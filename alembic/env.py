"""
Alembic Migration Environment Configuration (env.py)
----------------------------------------------------

This script sets up and orchestrates the Alembic migration environment for the project.
It serves as the integration layer between Alembic's release/upgrade infrastructure and
this codebase's modular SQLAlchemy ORM model declarations.

Features and project-specific customizations:
- Imports and reflects the runtime SQLAlchemy models' Base metadata, ensuring autogenerated migrations reflect current ORM state.
- Dynamically injects the production DB URL (`sync_url`) from configuration settings at runtime, making migrations robust to environment changes.
- Handles both online (live engine) and offline (SQL-only script) migration modes, supporting safe schema evolution in all environments.
- Configures Python logging via the alembic.ini file for migration process observability.
- Preserves compatibility with command-line Alembic tooling (e.g., `alembic revision --autogenerate`, `alembic upgrade head`).
- All project models must be imported here to ensure Alembic inspection covers the full schema.

Typical usage:
- Autogeneration and application of migrations when called by alembic CLI or automated scripts.
- Serves as the base for any customized migration logic or upgrade workflows.

Key project hooks:
- `from db.db import Base, sync_url` — see db/db.py for integration points and base construction.

"""

from logging.config import fileConfig

from sqlalchemy import engine_from_config
from sqlalchemy import pool

from alembic import context

# this is the Alembic Config object, which provides
# access to the values within the .ini file in use.
config = context.config  # pylint: disable=no-member

# Interpret the config file for Python logging.
# This line sets up loggers basically.
if config.config_file_name is not None:
    fileConfig(config.config_file_name)

# --- begin custom project integration ---
# Ensure all models are imported so Base.metadata is populated
import models.__init__  # pylint: disable=unused-import
from db.db import Base, sync_url

# Inject the real DB URL from settings/config into Alembic's config at runtime
# Escape '%' for sqlalchemy.url interpolation
config.set_main_option("sqlalchemy.url", sync_url.replace("%", "%%"))

target_metadata = Base.metadata
# --- end custom project integration ---

# other values from the config, defined by the needs of env.py,
# can be acquired:
# my_important_option = config.get_main_option("my_important_option")
# ... etc.


def run_migrations_offline() -> None:
    """Run migrations in 'offline' mode.

    This configures the context with just a URL
    and not an Engine, though an Engine is acceptable
    here as well.  By skipping the Engine creation
    we don't even need a DBAPI to be available.

    Calls to context.execute() here emit the given string to the
    script output.

    """
    url = config.get_main_option("sqlalchemy.url")
    context.configure(  # pylint: disable=no-member
        url=url,
        target_metadata=target_metadata,
        literal_binds=True,
        dialect_opts={"paramstyle": "named"},
    )

    with context.begin_transaction():  # pylint: disable=no-member
        context.run_migrations()  # pylint: disable=no-member


def run_migrations_online() -> None:
    """Run migrations in 'online' mode.

    In this scenario we need to create an Engine
    and associate a connection with the context.

    """
    connectable = engine_from_config(
        config.get_section(config.config_ini_section, {}),
        prefix="sqlalchemy.",
        poolclass=pool.NullPool,
    )

    with connectable.connect() as connection:
        context.configure(  # pylint: disable=no-member
            connection=connection, target_metadata=target_metadata
        )

        with context.begin_transaction():  # pylint: disable=no-member
            context.run_migrations()  # pylint: disable=no-member


if context.is_offline_mode():  # pylint: disable=no-member
    run_migrations_offline()
else:
    run_migrations_online()
