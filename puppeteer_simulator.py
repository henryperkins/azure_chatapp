#!/usr/bin/env python3
"""
Puppeteer MCP Server Simulator

This script simulates the functionality of the Puppeteer MCP server
without actually launching a browser. It demonstrates the types of
operations that would be possible with the Puppeteer MCP server.
"""

import json
import time
import argparse
import os
import pickle
from datetime import datetime


STATE_FILE = '/tmp/puppeteer_simulator_state.pkl'

class PuppeteerSimulator:
    def __init__(self):
        self.current_url = None
        self.page_content = {}
        self.console_logs = []
        self.browser_logs = []
        self.screenshots = {}
        self.form_data = {}
        self.load_state()
        
    def navigate(self, url):
        """Simulate navigating to a URL"""
        print(f"🌐 Navigating to: {url}")
        self.current_url = url
        self.console_logs.append(f"[{self._get_timestamp()}] Navigation to {url} complete")
        
        # Add browser console logs that would be captured during navigation
        self.browser_logs.append({
            "type": "info", 
            "text": f"Navigation to {url} started", 
            "timestamp": self._get_timestamp()
        })
        self.browser_logs.append({
            "type": "log", 
            "text": "DOMContentLoaded event fired", 
            "timestamp": self._get_timestamp()
        })
        self.browser_logs.append({
            "type": "log", 
            "text": "Load event fired", 
            "timestamp": self._get_timestamp()
        })
        
        # Simulate page content based on URL
        if "example.com" in url:
            self.page_content = {
                "title": "Example Domain",
                "headings": ["Example Domain"],
                "paragraphs": ["This domain is for use in illustrative examples in documents."],
                "links": ["https://www.iana.org/domains/example"]
            }
        else:
            self.page_content = {
                "title": "Simulated Page",
                "headings": ["Welcome to Simulated Page"],
                "paragraphs": ["This is a simulation of a web page."],
                "links": []
            }
        
        self.save_state()
        return {
            "success": True,
            "url": url,
            "title": self.page_content["title"]
        }
    
    def screenshot(self, name, selector=None, width=800, height=600):
        """Simulate taking a screenshot"""
        print(f"📸 Taking screenshot: {name}")
        if not self.current_url:
            return {"success": False, "error": "No page loaded"}
        
        target = "full page" if not selector else f"element: {selector}"
        self.screenshots[name] = {
            "timestamp": self._get_timestamp(),
            "url": self.current_url,
            "target": target,
            "dimensions": f"{width}x{height}"
        }
        
        self.console_logs.append(f"[{self._get_timestamp()}] Screenshot '{name}' captured")
        
        self.save_state()
        return {
            "success": True,
            "name": name,
            "path": f"/simulated/screenshots/{name}.png",
            "dimensions": f"{width}x{height}"
        }
    
    def click(self, selector):
        """Simulate clicking an element"""
        print(f"🖱️ Clicking element: {selector}")
        if not self.current_url:
            return {"success": False, "error": "No page loaded"}
        
        self.console_logs.append(f"[{self._get_timestamp()}] Clicked on {selector}")
        
        # Add browser console logs that might be generated by click events
        self.browser_logs.append({
            "type": "log", 
            "text": f"Click event on {selector}", 
            "timestamp": self._get_timestamp()
        })
        
        # Simulate different behaviors based on selector
        if "button" in selector.lower():
            print("  Button clicked! Simulating action...")
            self.console_logs.append(f"[{self._get_timestamp()}] Button action triggered")
            self.browser_logs.append({
                "type": "log", 
                "text": "Button click handler executed", 
                "timestamp": self._get_timestamp()
            })
        elif "link" in selector.lower() or "a" == selector:
            print("  Link clicked! Simulating navigation...")
            self.console_logs.append(f"[{self._get_timestamp()}] Link navigation triggered")
            self.browser_logs.append({
                "type": "log", 
                "text": "Link navigation initiated", 
                "timestamp": self._get_timestamp()
            })
        
        self.save_state()
        return {
            "success": True,
            "selector": selector
        }
    
    def fill(self, selector, value):
        """Simulate filling a form field"""
        print(f"✏️ Filling form field: {selector} with value: {value}")
        if not self.current_url:
            return {"success": False, "error": "No page loaded"}
        
        self.form_data[selector] = value
        self.console_logs.append(f"[{self._get_timestamp()}] Form field {selector} filled with value")
        
        # Add browser console logs for form interaction
        self.browser_logs.append({
            "type": "log", 
            "text": f"Input event on {selector}", 
            "timestamp": self._get_timestamp()
        })
        
        self.save_state()
        return {
            "success": True,
            "selector": selector,
            "value": value
        }
    
    def select(self, selector, value):
        """Simulate selecting an option from a dropdown"""
        print(f"📋 Selecting option: {value} from dropdown: {selector}")
        if not self.current_url:
            return {"success": False, "error": "No page loaded"}
        
        self.form_data[selector] = value
        self.console_logs.append(f"[{self._get_timestamp()}] Selected '{value}' from {selector}")
        
        # Add browser console logs for select interaction
        self.browser_logs.append({
            "type": "log", 
            "text": f"Change event on {selector}", 
            "timestamp": self._get_timestamp()
        })
        
        self.save_state()
        return {
            "success": True,
            "selector": selector,
            "value": value
        }
    
    def hover(self, selector):
        """Simulate hovering over an element"""
        print(f"👆 Hovering over element: {selector}")
        if not self.current_url:
            return {"success": False, "error": "No page loaded"}
        
        self.console_logs.append(f"[{self._get_timestamp()}] Hovered over {selector}")
        
        # Add browser console logs for hover interaction
        self.browser_logs.append({
            "type": "log", 
            "text": f"MouseOver event on {selector}", 
            "timestamp": self._get_timestamp()
        })
        
        self.save_state()
        return {
            "success": True,
            "selector": selector
        }
    
    def evaluate(self, script):
        """Simulate evaluating JavaScript"""
        print(f"🧮 Evaluating JavaScript: {script[:50]}{'...' if len(script) > 50 else ''}")
        if not self.current_url:
            return {"success": False, "error": "No page loaded"}
        
        self.console_logs.append(f"[{self._get_timestamp()}] Executed JavaScript")
        
        # Add browser console logs for JavaScript evaluation
        if "console.log" in script:
            # Extract the log message if it's a console.log statement
            try:
                log_content = script.split('console.log(')[1].split(')')[0].strip('"\'')
                self.browser_logs.append({
                    "type": "log", 
                    "text": log_content, 
                    "timestamp": self._get_timestamp()
                })
            except Exception:
                self.browser_logs.append({
                    "type": "log", 
                    "text": "JavaScript executed", 
                    "timestamp": self._get_timestamp()
                })
        
        # Simulate a result based on the script
        result = None
        if "document.title" in script:
            result = self.page_content["title"]
        elif "Math.random" in script:
            import random
            result = random.random()
        else:
            result = {"executed": True, "timestamp": self._get_timestamp()}
        
        self.save_state()
        return {
            "success": True,
            "result": result
        }
    
    def get_console_logs(self):
        """Get console logs"""
        return self.console_logs
    
    def get_browser_logs(self):
        """Get browser console logs"""
        print("📋 Viewing browser console logs")
        if not self.current_url:
            return {"success": False, "error": "No page loaded"}
            
        self.save_state()
        return {
            "success": True,
            "logs": self.browser_logs
        }
    
    def _get_timestamp(self):
        """Get current timestamp"""
        return datetime.now().strftime("%Y-%m-%d %H:%M:%S.%f")[:-3]
    
    def save_state(self):
        """Save the current state to a file"""
        with open(STATE_FILE, 'wb') as f:
            pickle.dump({
                'current_url': self.current_url,
                'page_content': self.page_content,
                'console_logs': self.console_logs,
                'browser_logs': self.browser_logs,
                'screenshots': self.screenshots,
                'form_data': self.form_data
            }, f)
        print(f"State saved to {STATE_FILE}")
        
    def load_state(self):
        """Load state from a file if it exists"""
        if os.path.exists(STATE_FILE):
            try:
                with open(STATE_FILE, 'rb') as f:
                    state = pickle.load(f)
                    self.current_url = state.get('current_url')
                    self.page_content = state.get('page_content', {})
                    self.console_logs = state.get('console_logs', [])
                    self.browser_logs = state.get('browser_logs', [])
                    self.screenshots = state.get('screenshots', {})
                    self.form_data = state.get('form_data', {})
                print(f"State loaded from {STATE_FILE}")
                if self.current_url:
                    print(f"Current URL: {self.current_url}")
            except Exception as e:
                print(f"Error loading state: {e}")
    
    def run_demo(self):
        """Run a demonstration of all capabilities"""
        print("\n🚀 Starting Puppeteer MCP Server Simulator Demo\n")
        
        # Navigate to a page
        print("\n=== Navigation ===")
        self.navigate("https://www.example.com")
        time.sleep(0.5)
        
        # Take a screenshot
        print("\n=== Screenshot ===")
        self.screenshot("example-full-page")
        time.sleep(0.5)
        
        # Click an element
        print("\n=== Click Interaction ===")
        self.click("#main-button")
        time.sleep(0.5)
        
        # Fill a form
        print("\n=== Form Filling ===")
        self.fill("#username", "testuser")
        self.fill("#password", "password123")
        time.sleep(0.5)
        
        # Select from dropdown
        print("\n=== Dropdown Selection ===")
        self.select("#country", "United States")
        time.sleep(0.5)
        
        # Hover over element
        print("\n=== Hover Interaction ===")
        self.hover("#hover-menu")
        time.sleep(0.5)
        
        # Evaluate JavaScript
        print("\n=== JavaScript Evaluation ===")
        self.evaluate("document.title")
        self.evaluate("console.log('User clicked the button')")
        time.sleep(0.5)
        
        # Show browser console logs
        print("\n=== Browser Console Logs ===")
        browser_logs = self.get_browser_logs()
        if not isinstance(browser_logs, dict):
            print("  [No logs available - invalid response format]")
        elif not browser_logs.get("success"):
            print("  [No logs available - request failed]")
        else:
            logs = browser_logs.get("logs", [])
            if not isinstance(logs, list):
                print("  [No logs available - invalid logs format]")
            else:
                for log in logs:
                    if isinstance(log, dict):
                        print(f"  [{log.get('timestamp', '?')}] [{log.get('type', '?')}] {log.get('text', '')}")
                    else:
                        print(f"  [Malformed log entry: {log}]")
        
        # Show console logs
        print("\n=== Console Logs ===")
        for log in self.get_console_logs():
            print(f"  {log}")
        
        # Show form data
        print("\n=== Form Data ===")
        print(json.dumps(self.form_data, indent=2))
        
        # Show screenshots
        print("\n=== Screenshots ===")
        print(json.dumps(self.screenshots, indent=2))
        
        print("\n✅ Demo Complete!")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Puppeteer MCP Server Simulator")
    parser.add_argument("--action", choices=["navigate", "screenshot", "click", "fill", "select", "hover", "evaluate", "browser_logs", "demo"], 
                        default="demo", help="Action to perform")
    parser.add_argument("--url", help="URL to navigate to")
    parser.add_argument("--selector", help="CSS selector for element")
    parser.add_argument("--value", help="Value for form fields")
    parser.add_argument("--name", help="Name for screenshot")
    parser.add_argument("--script", help="JavaScript to evaluate")
    
    args = parser.parse_args()
    simulator = PuppeteerSimulator()
    
    if args.action == "demo":
        simulator.run_demo()
    elif args.action == "navigate":
        if not args.url:
            print("Error: URL is required for navigate action")
            exit(1)
        print(json.dumps(simulator.navigate(args.url), indent=2))
    elif args.action == "screenshot":
        if not args.name:
            print("Error: Name is required for screenshot action")
            exit(1)
        print(json.dumps(simulator.screenshot(args.name, args.selector), indent=2))
    elif args.action == "click":
        if not args.selector:
            print("Error: Selector is required for click action")
            exit(1)
        print(json.dumps(simulator.click(args.selector), indent=2))
    elif args.action == "fill":
        if not args.selector or args.value is None:
            print("Error: Selector and value are required for fill action")
            exit(1)
        print(json.dumps(simulator.fill(args.selector, args.value), indent=2))
    elif args.action == "select":
        if not args.selector or args.value is None:
            print("Error: Selector and value are required for select action")
            exit(1)
        print(json.dumps(simulator.select(args.selector, args.value), indent=2))
    elif args.action == "hover":
        if not args.selector:
            print("Error: Selector is required for hover action")
            exit(1)
        print(json.dumps(simulator.hover(args.selector), indent=2))
    elif args.action == "evaluate":
        if not args.script:
            print("Error: Script is required for evaluate action")
            exit(1)
        print(json.dumps(simulator.evaluate(args.script), indent=2))
    elif args.action == "browser_logs":
        print(json.dumps(simulator.get_browser_logs(), indent=2))
