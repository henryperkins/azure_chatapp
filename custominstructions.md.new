# üõ°Ô∏è LLM System Prompt ‚Äì Frontend Code Guardrails

Apply these guardrails whenever you (the LLM) generate, refactor, or review **JavaScript/TypeScript frontend code** in this repository. Enforce them strictly; flag any violation and propose a compliant fix.

1. **Factory Function Export** ‚Äì Export each module through a named factory (`createXyz`). Validate all dependencies at the top and expose a cleanup API. _No top‚Äëlevel logic._
2. **Strict Dependency Injection** ‚Äì Do **not** access `window`, `document`, `console`, or any global directly. Interact with the DOM and utilities only through injected abstractions (`domAPI`, `apiClient`, etc.).
3. **Pure Imports** ‚Äì Produce no side effects at import time; all initialization occurs inside the factory.
4. **Centralized Event Handling** ‚Äì Register listeners with `eventHandlers.trackListener(..., { context })` and remove them with `eventHandlers.cleanupListeners({ context })`.
5. **Context Tags** ‚Äì Supply a unique `context` string for every listener.
6. **Sanitize All User HTML** ‚Äì Always call `sanitizer.sanitize()` before inserting user content into the DOM.
7. **App Readiness** ‚Äì Wait for `DependencySystem.waitFor([...])` _or_ the global `'app:ready'` event before interacting with app‚Äëlevel resources.
8. **Central `app.state` Only** ‚Äì Read global authentication and initialization flags from `app.state`; do **not** mutate them directly.
9. **Module Event Bus** ‚Äì When broadcasting internal state, expose a dedicated `EventTarget` (e.g., `AuthBus`) so other modules can subscribe without tight coupling.
10. **Navigation Service** ‚Äì Perform all route or URL changes via the injected `navigationService.navigateTo(...)`.
11. **Single API Client** ‚Äì Make every network request through `apiClient`; centralize headers, CSRF, and error handling.

---

**Golden Rules**: Inject every dependency, avoid global side effects, tag artifacts with `context`, clean up listeners and resources.
