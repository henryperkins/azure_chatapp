name: Python Quality Checks

on:
  push:
    branches: [ main, after-claude ]
    paths:
      - '**.py'
      - 'requirements.txt'
      - '.github/workflows/python-quality.yml'
  pull_request:
    paths:
      - '**.py'
      - 'requirements.txt'
      - '.github/workflows/python-quality.yml'
  workflow_dispatch:  # Enable manual triggering
  schedule:
    - cron: '0 0 * * 0'  # Run weekly on Sundays

jobs:
  lint:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11"]
      fail-fast: false  # Continue with other versions if one fails

    steps:
    - uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'  # Enable pip caching
    
    - name: Set PYTHONPATH
      run: echo "PYTHONPATH=." >> $GITHUB_ENV
      
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pylint black flake8 isort
        pip install -r requirements.txt
        
    - name: Check code formatting with Black
      run: black --check --diff .
      continue-on-error: true
      
    - name: Check import sorting with isort
      run: isort --check --diff .
      continue-on-error: true
      
    - name: Lint with Flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --statistics
      continue-on-error: true
        
    - name: Analyze code with Pylint
      run: |
        pylint $(git ls-files '*.py') --output-format=text:pylint-report.txt,colorized
      continue-on-error: true
      
    - name: Upload Pylint report
      uses: actions/upload-artifact@v3
      with:
        name: pylint-report-python-${{ matrix.python-version }}
        path: pylint-report.txt
        if-no-files-found: ignore

    # ----------------------------------------------------------------------------
    # Codecov upload
    # ----------------------------------------------------------------------------
    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v5
      with:
        token: ${{ secrets.CODECOV_TOKEN }}

  security-scan:
    runs-on: ubuntu-latest
    needs: lint
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
        
    - name: Install security scanning tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety
        
    - name: Check for security issues with Bandit
      run: bandit -r . -f json -o bandit-report.json
      continue-on-error: true
      
    - name: Check dependencies for known vulnerabilities
      run: safety check -r requirements.txt --output json > safety-report.json
      continue-on-error: true
      
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json
        if-no-files-found: ignore
