┌──────────────────────────────────────────────────────────────────────────────┐
│                                                                              │
│                🛡️ Frontend Patterns: knowledgeBaseManager.js                │
│                                                                              │
└──────────────────────────────────────────────────────────────────────────────┘

┌───────────────────────────────────────────────────────────────────┼────────────┐
│ Pattern                                                           │ Violations │
├───────────────────────────────────────────────────────────────────┼────────────┤
│ 🔒 12. Logger / Observability                                     │ 12         │
│ 🔒 14. Module Size Limit                                          │ 1          │
└───────────────────────────────────────────────────────────────────┼────────────┘

Detailed Violations

• Rule 12: Logger / Observability
  No `console.*`; all logs via DI logger with context. Use canonical safeHandler.

  Line 46: console.warn(
  ⚠  Violation: console.warn is forbidden – use DI logger.
  💡 Hint:
     Replace 'console.warn(...)' with 'logger.info("Message string", data, { context: "Module:operation" })'

  Line 121: } catch (err) {
  ⚠  Violation: Caught errors must be logged via 'logger.error(..., { context: ... })'.
  💡 Hint:
     Example:
     } catch (err) {
       logger.error("[Module] Something broke", err, { context: "Module:myError" });
     }

  Line 181: } catch (err) {
  ⚠  Violation: Caught errors must be logged via 'logger.error(..., { context: ... })'.
  💡 Hint:
     Example:
     } catch (err) {
       logger.error("[Module] Something broke", err, { context: "Module:myError" });
     }

  Line 316: } catch (refreshError) {
  ⚠  Violation: Caught errors must be logged via 'logger.error(..., { context: ... })'.
  💡 Hint:
     Example:
     } catch (refreshError) {
       logger.error("[Module] Something broke", refreshError, { context: "Module:myError" });
     }

  Line 388: } catch (err) {
  ⚠  Violation: Caught errors must be logged via 'logger.error(..., { context: ... })'.
  💡 Hint:
     Example:
     } catch (err) {
       logger.error("[Module] Something broke", err, { context: "Module:myError" });
     }

  Line 438: } catch (err) {
  ⚠  Violation: Caught errors must be logged via 'logger.error(..., { context: ... })'.
  💡 Hint:
     Example:
     } catch (err) {
       logger.error("[Module] Something broke", err, { context: "Module:myError" });
     }

  Line 613: } catch (err) {
  ⚠  Violation: Caught errors must be logged via 'logger.error(..., { context: ... })'.
  💡 Hint:
     Example:
     } catch (err) {
       logger.error("[Module] Something broke", err, { context: "Module:myError" });
     }

  Line 660: } catch (error) {
  ⚠  Violation: Caught errors must be logged via 'logger.error(..., { context: ... })'.
  💡 Hint:
     Example:
     } catch (error) {
       logger.error("[Module] Something broke", error, { context: "Module:myError" });
     }

  Line 784: } catch (error) {
  ⚠  Violation: Caught errors must be logged via 'logger.error(..., { context: ... })'.
  💡 Hint:
     Example:
     } catch (error) {
       logger.error("[Module] Something broke", error, { context: "Module:myError" });
     }

  Line 828: } catch (_) {
  ⚠  Violation: Caught errors must be logged via 'logger.error(..., { context: ... })'.
  💡 Hint:
     Example:
     } catch (_) {
       logger.error("[Module] Something broke", _, { context: "Module:myError" });
     }

  Line 865: } catch (error) {
  ⚠  Violation: Caught errors must be logged via 'logger.error(..., { context: ... })'.
  💡 Hint:
     Example:
     } catch (error) {
       logger.error("[Module] Something broke", error, { context: "Module:myError" });
     }

  Line 936: } catch (error) {
  ⚠  Violation: Caught errors must be logged via 'logger.error(..., { context: ... })'.
  💡 Hint:
     Example:
     } catch (error) {
       logger.error("[Module] Something broke", error, { context: "Module:myError" });
     }

• Rule 14: Module Size Limit
  Modules must not exceed 1000 lines.

  Line 1: /**
  ⚠  Violation: Module exceeds 1000 line limit (1032 lines).
  💡 Hint:
     Split this module into smaller, focused modules.

┌──────────────────────────────────────────────────────────────────────────────┐
│                                                                              │
│                   🛡️ Frontend Patterns: errorReporter.js                    │
│                                                                              │
└──────────────────────────────────────────────────────────────────────────────┘

┌───────────────────────────────────────────────────────────────────┼────────────┐
│ Pattern                                                           │ Violations │
├───────────────────────────────────────────────────────────────────┼────────────┤
│ 🔒 4.  Centralised Event Handling                                 │ 1          │
└───────────────────────────────────────────────────────────────────┼────────────┘

Detailed Violations

• Rule 4: Centralised Event Handling
  Use central `eventHandlers.trackListener` + `cleanupListeners` only.

  Line 5: export function createErrorReporter({
  ⚠  Violation: Factory 'createErrorReporter' provides cleanup() but never calls eventHandlers.cleanupListeners({ context: … }).
  💡 Hint:
     Invoke eventHandlers.cleanupListeners({ context: … }) inside cleanup().

┌──────────────────────────────────────────────────────────────────────────────┐
│                                                                              │
│                        🛡️ Frontend Patterns: auth.js                        │
│                                                                              │
└──────────────────────────────────────────────────────────────────────────────┘

┌───────────────────────────────────────────────────────────────────┼────────────┐
│ Pattern                                                           │ Violations │
├───────────────────────────────────────────────────────────────────┼────────────┤
│ 🔒 4.  Centralised Event Handling                                 │ 1          │
│ 🔒 9.  Module Event Bus                                           │ 1          │
└───────────────────────────────────────────────────────────────────┼────────────┘

Detailed Violations

• Rule 4: Centralised Event Handling
  Use central `eventHandlers.trackListener` + `cleanupListeners` only.

  Line 19: export function createAuthModule(deps) {
  ⚠  Violation: Factory 'createAuthModule' provides cleanup() but never calls eventHandlers.cleanupListeners({ context: … }).
  💡 Hint:
     Invoke eventHandlers.cleanupListeners({ context: … }) inside cleanup().

• Rule 9: Module Event Bus
  Dispatch custom events through a dedicated `EventTarget` bus.

  Line 375: docObj.dispatchEvent(evt);
  ⚠  Violation: Event dispatched on an object not identified as a dedicated event bus.
  💡 Hint:
     Dispatch events via a known bus (e.g., 'eventBus.dispatchEvent()').

┌──────────────────────────────────────────────────────────────────────────────┐
│                                                                              │
│                  🛡️ Frontend Patterns: projectDashboard.js                  │
│                                                                              │
└──────────────────────────────────────────────────────────────────────────────┘

┌───────────────────────────────────────────────────────────────────┼────────────┐
│ Pattern                                                           │ Violations │
├───────────────────────────────────────────────────────────────────┼────────────┤
│ 🔒 14. Module Size Limit                                          │ 1          │
└───────────────────────────────────────────────────────────────────┼────────────┘

Detailed Violations

• Rule 14: Module Size Limit
  Modules must not exceed 1000 lines.

  Line 1: /**
  ⚠  Violation: Module exceeds 1000 line limit (1145 lines).
  💡 Hint:
     Split this module into smaller, focused modules.

┌──────────────────────────────────────────────────────────────────────────────┐
│                                                                              │
│                   🛡️ Frontend Patterns: projectManager.js                   │
│                                                                              │
└──────────────────────────────────────────────────────────────────────────────┘

┌───────────────────────────────────────────────────────────────────┼────────────┐
│ Pattern                                                           │ Violations │
├───────────────────────────────────────────────────────────────────┼────────────┤
│ 🔒 14. Module Size Limit                                          │ 1          │
└───────────────────────────────────────────────────────────────────┼────────────┘

Detailed Violations

• Rule 14: Module Size Limit
  Modules must not exceed 1000 lines.

  Line 1: // Refactored to comply with factory export, pure imports, domReadinessService usage, event bus for module events,
  ⚠  Violation: Module exceeds 1000 line limit (1043 lines).
  💡 Hint:
     Split this module into smaller, focused modules.

┌──────────────────────────────────────────────────────────────────────────────┐
│                                                                              │
│                 🛡️ Frontend Patterns: logDeliveryService.js                 │
│                                                                              │
└──────────────────────────────────────────────────────────────────────────────┘

┌───────────────────────────────────────────────────────────────────┼────────────┐
│ Pattern                                                           │ Violations │
├───────────────────────────────────────────────────────────────────┼────────────┤
│ 🔒 12. Logger / Observability                                     │ 2          │
└───────────────────────────────────────────────────────────────────┼────────────┘

Detailed Violations

• Rule 12: Logger / Observability
  No `console.*`; all logs via DI logger with context. Use canonical safeHandler.

  Line 41: } catch (error) {
  ⚠  Violation: Caught errors must be logged via 'logger.error(..., { context: ... })'.
  💡 Hint:
     Example:
     } catch (error) {
       logger.error("[Module] Something broke", error, { context: "Module:myError" });
     }

  Line 102: handleLogEvent,
  ⚠  Violation: Event handler for 'eventHandlers.trackListener' must be wrapped by 'safeHandler' (or forwarded param).
  💡 Hint:
     Example: eventHandlers.trackListener(el, 'click', safeHandler(myHandler, 'Module:desc'), ...);

┌──────────────────────────────────────────────────────────────────────────────┐
│                                                                              │
│                    🛡️ Frontend Patterns: sidebarAuth.js                     │
│                                                                              │
└──────────────────────────────────────────────────────────────────────────────┘

┌───────────────────────────────────────────────────────────────────┼────────────┐
│ Pattern                                                           │ Violations │
├───────────────────────────────────────────────────────────────────┼────────────┤
│ 🔒 12. Logger / Observability                                     │ 1          │
└───────────────────────────────────────────────────────────────────┼────────────┘

Detailed Violations

• Rule 12: Logger / Observability
  No `console.*`; all logs via DI logger with context. Use canonical safeHandler.

  Line 147: } catch (err) {
  ⚠  Violation: Caught errors must be logged via 'logger.error(..., { context: ... })'.
  💡 Hint:
     Example:
     } catch (err) {
       logger.error("[Module] Something broke", err, { context: "Module:myError" });
     }

┌──────────────────────────────────────────────────────────────────────────────┐
│                                                                              │
│                     🛡️ Frontend Patterns: formatting.js                     │
│                                                                              │
└──────────────────────────────────────────────────────────────────────────────┘

┌───────────────────────────────────────────────────────────────────┼────────────┐
│ Pattern                                                           │ Violations │
├───────────────────────────────────────────────────────────────────┼────────────┤
│ 🔒 6.  Sanitize All User HTML                                     │ 1          │
└───────────────────────────────────────────────────────────────────┼────────────┘

Detailed Violations

• Rule 6: Sanitize All User HTML
  Always call `sanitizer.sanitize()` before inserting user HTML.

  Line 67: div.innerHTML = html;
  ⚠  Violation: Direct assignment to 'innerHTML' is forbidden.
  💡 Hint:
     Use domAPI.setInnerHTML() with 'sanitizer.sanitize()' instead.

┌──────────────────────────────────────────────────────────────────────────────┐
│                                                                              │
│                    🛡️ Frontend Patterns: modalManager.js                    │
│                                                                              │
└──────────────────────────────────────────────────────────────────────────────┘

┌───────────────────────────────────────────────────────────────────┼────────────┐
│ Pattern                                                           │ Violations │
├───────────────────────────────────────────────────────────────────┼────────────┤
│ 🔒 14. Module Size Limit                                          │ 1          │
└───────────────────────────────────────────────────────────────────┼────────────┘

Detailed Violations

• Rule 14: Module Size Limit
  Modules must not exceed 1000 lines.

  Line 1: import { MODAL_MAPPINGS } from './modalConstants.js';
  ⚠  Violation: Module exceeds 1000 line limit (1128 lines).
  💡 Hint:
     Split this module into smaller, focused modules.

┌──────────────────────────────────────────────────────────────────────────────┐
│                                                                              │
│               🛡️ Frontend Patterns: knowledgeBaseComponent.js               │
│                                                                              │
└──────────────────────────────────────────────────────────────────────────────┘

┌───────────────────────────────────────────────────────────────────┼────────────┐
│ Pattern                                                           │ Violations │
├───────────────────────────────────────────────────────────────────┼────────────┤
│ 🔒 4.  Centralised Event Handling                                 │ 1          │
└───────────────────────────────────────────────────────────────────┼────────────┘

Detailed Violations

• Rule 4: Centralised Event Handling
  Use central `eventHandlers.trackListener` + `cleanupListeners` only.

  Line 21: export function createKnowledgeBaseComponent(options = {}) {
  ⚠  Violation: Factory 'createKnowledgeBaseComponent' provides cleanup() but never calls eventHandlers.cleanupListeners({ context: … }).
  💡 Hint:
     Invoke eventHandlers.cleanupListeners({ context: … }) inside cleanup().

┌──────────────────────────────────────────────────────────────────────────────┐
│                                                                              │
│                🛡️ Frontend Patterns: FileUploadComponent.js                 │
│                                                                              │
└──────────────────────────────────────────────────────────────────────────────┘

┌───────────────────────────────────────────────────────────────────┼────────────┐
│ Pattern                                                           │ Violations │
├───────────────────────────────────────────────────────────────────┼────────────┤
│ 🔒 2.  Strict Dependency Injection                                │ 2          │
│ 🔒 12. Logger / Observability                                     │ 3          │
└───────────────────────────────────────────────────────────────────┼────────────┘

Detailed Violations

• Rule 2: Strict Dependency Injection
  No direct globals or direct service imports; inject via DI.

  Line 80: const win = domAPI?.getWindow?.() || (typeof window !== 'undefined' ? window : null);
  ⚠  Violation: Direct use of global 'window' is forbidden. Use DI abstractions.
  💡 Hint:
     If access to 'window' is needed, expose it via a DI-provided service.

  Line 80: const win = domAPI?.getWindow?.() || (typeof window !== 'undefined' ? window : null);
  ⚠  Violation: Direct use of global 'window' is forbidden. Use DI abstractions.
  💡 Hint:
     If access to 'window' is needed, expose it via a DI-provided service.

• Rule 12: Logger / Observability
  No `console.*`; all logs via DI logger with context. Use canonical safeHandler.

  Line 39: } catch (err) {
  ⚠  Violation: Caught errors must be logged via 'logger.error(..., { context: ... })'.
  💡 Hint:
     Example:
     } catch (err) {
       logger.error("[FileUploadComponentContext] Something broke", err, { context: "FileUploadComponentContext:myError" });
     }

  Line 286: } catch (error) {
  ⚠  Violation: Caught errors must be logged via 'logger.error(..., { context: ... })'.
  💡 Hint:
     Example:
     } catch (error) {
       logger.error("[FileUploadComponentContext] Something broke", error, { context: "FileUploadComponentContext:myError" });
     }

  Line 324: } catch (err) {
  ⚠  Violation: Caught errors must be logged via 'logger.error(..., { context: ... })'.
  💡 Hint:
     Example:
     } catch (err) {
       logger.error("[FileUploadComponentContext] Something broke", err, { context: "FileUploadComponentContext:myError" });
     }

┌──────────────────────────────────────────────────────────────────────────────┐
│                                                                              │
│                    🛡️ Frontend Patterns: theme-toggle.js                    │
│                                                                              │
└──────────────────────────────────────────────────────────────────────────────┘

┌───────────────────────────────────────────────────────────────────┼────────────┐
│ Pattern                                                           │ Violations │
├───────────────────────────────────────────────────────────────────┼────────────┤
│ 🔒 4.  Centralised Event Handling                                 │ 1          │
│ 🔒 12. Logger / Observability                                     │ 2          │
└───────────────────────────────────────────────────────────────────┼────────────┘

Detailed Violations

• Rule 4: Centralised Event Handling
  Use central `eventHandlers.trackListener` + `cleanupListeners` only.

  Line 25: export function createThemeManager({ dom, eventHandlers, logger } = {}) {
  ⚠  Violation: Factory 'createThemeManager' provides cleanup() but never calls eventHandlers.cleanupListeners({ context: … }).
  💡 Hint:
     Invoke eventHandlers.cleanupListeners({ context: … }) inside cleanup().

• Rule 12: Logger / Observability
  No `console.*`; all logs via DI logger with context. Use canonical safeHandler.

  Line 177: } catch (_err) {
  ⚠  Violation: Caught errors must be logged via 'logger.error(..., { context: ... })'.
  💡 Hint:
     Example:
     } catch (_err) {
       logger.error("[Module] Something broke", _err, { context: "Module:myError" });
     }

  Line 190: } catch (_err) {
  ⚠  Violation: Caught errors must be logged via 'logger.error(..., { context: ... })'.
  💡 Hint:
     Example:
     } catch (_err) {
       logger.error("[Module] Something broke", _err, { context: "Module:myError" });
     }

┌──────────────────────────────────────────────────────────────────────────────┐
│                                                                              │
│                   🛡️ Frontend Patterns: browserService.js                   │
│                                                                              │
└──────────────────────────────────────────────────────────────────────────────┘

┌───────────────────────────────────────────────────────────────────┼────────────┐
│ Pattern                                                           │ Violations │
├───────────────────────────────────────────────────────────────────┼────────────┤
│ 🔒 1.  Factory Function Export                                    │ 1          │
│ 🔒 12. Logger / Observability                                     │ 1          │
│ 🔒 15. Canonical Implementations                                  │ 1          │
└───────────────────────────────────────────────────────────────────┼────────────┘

Detailed Violations

• Rule 1: Factory Function Export
  Export `createXyz` factory, validate deps, expose cleanup, no top-level code.

  Line 49: export function createBrowserService({ windowObject, logger } = {}) {
  ⚠  Violation: Factory 'createBrowserService' must expose a cleanup or teardown API.
  💡 Hint:
     Example: return { ..., cleanup: () => { /* detach listeners, etc. */ } };

• Rule 12: Logger / Observability
  No `console.*`; all logs via DI logger with context. Use canonical safeHandler.

  Line 41: } catch {
  ⚠  Violation: Caught errors must be logged via 'logger.error(..., { context: ... })'.
  💡 Hint:
     Example:
     } catch (err) {
       logger.error("[Module] Something broke", err, { context: "Module:myError" });
     }

• Rule 15: Canonical Implementations
  Use canonical implementations only (safeHandler, form handlers, URL parsing, etc.)

  Line 28: url.search = new URLSearchParams(sorted).toString();
  ⚠  Violation: Direct URLSearchParams instantiation detected.
  💡 Hint:
     Use navigationService.parseURL() for URL parsing.

┌──────────────────────────────────────────────────────────────────────────────┐
│                                                                              │
│                       🛡️ Frontend Patterns: domAPI.js                       │
│                                                                              │
└──────────────────────────────────────────────────────────────────────────────┘

┌───────────────────────────────────────────────────────────────────┼────────────┐
│ Pattern                                                           │ Violations │
├───────────────────────────────────────────────────────────────────┼────────────┤
│ 🔒 4.  Centralised Event Handling                                 │ 1          │
│ 🔒 16. Error Object Structure                                     │ 1          │
└───────────────────────────────────────────────────────────────────┼────────────┘

Detailed Violations

• Rule 4: Centralised Event Handling
  Use central `eventHandlers.trackListener` + `cleanupListeners` only.

  Line 11: export function createDomAPI({
  ⚠  Violation: Factory 'createDomAPI' provides cleanup() but never calls eventHandlers.cleanupListeners({ context: … }).
  💡 Hint:
     Invoke eventHandlers.cleanupListeners({ context: … }) inside cleanup().

• Rule 16: Error Object Structure
  Error objects must use standard { status, data, message } structure.

  Line 29: let _logger = logger || { warn: () => { }, error: () => { } };
  ⚠  Violation: Non-standard error object structure detected.
  💡 Hint:
     Use { status, data, message } format (matches apiClient.js).

┌──────────────────────────────────────────────────────────────────────────────┐
│                                                                              │
│                    🛡️ Frontend Patterns: globalUtils.js                     │
│                                                                              │
└──────────────────────────────────────────────────────────────────────────────┘

┌───────────────────────────────────────────────────────────────────┼────────────┐
│ Pattern                                                           │ Violations │
├───────────────────────────────────────────────────────────────────┼────────────┤
│ 🔒 1.  Factory Function Export                                    │ 1          │
│ 🔒 2.  Strict Dependency Injection                                │ 1          │
│ 🔒 12. Logger / Observability                                     │ 3          │
└───────────────────────────────────────────────────────────────────┼────────────┘

Detailed Violations

• Rule 1: Factory Function Export
  Export `createXyz` factory, validate deps, expose cleanup, no top-level code.

  Line 115: export function createElement(tag, opts = {}, trackListener, domAPI) {
  ⚠  Violation: Factory 'createElement' must expose a cleanup or teardown API.
  💡 Hint:
     Example: return { ..., cleanup: () => { /* detach listeners, etc. */ } };

• Rule 2: Strict Dependency Injection
  No direct globals or direct service imports; inject via DI.

  Line 218: return await apiClient.get(`/item/${id}`);
  ⚠  Violation: Service 'apiClient' is used but does not appear to be injected via factory DI parameters.
  💡 Hint:
     Ensure 'apiClient' is part of the factory's 'deps' and properly destructured.

• Rule 12: Logger / Observability
  No `console.*`; all logs via DI logger with context. Use canonical safeHandler.

  Line 109: } catch (err) {
  ⚠  Violation: Caught errors must be logged via 'logger.error(..., { context: ... })'.
  💡 Hint:
     Example:
     } catch (err) {
       logger.error("[Module] Something broke", err, { context: "Module:myError" });
     }

  Line 168: } catch (e) {
  ⚠  Violation: Caught errors must be logged via 'logger.error(..., { context: ... })'.
  💡 Hint:
     Example:
     } catch (e) {
       logger.error("[Module] Something broke", e, { context: "Module:myError" });
     }

  Line 179: } catch {
  ⚠  Violation: Caught errors must be logged via 'logger.error(..., { context: ... })'.
  💡 Hint:
     Example:
     } catch (err) {
       logger.error("[Module] Something broke", err, { context: "Module:myError" });
     }

┌──────────────────────────────────────────────────────────────────────────────┐
│                                                                              │
│                    🛡️ Frontend Patterns: apiEndpoints.js                    │
│                                                                              │
└──────────────────────────────────────────────────────────────────────────────┘

┌───────────────────────────────────────────────────────────────────┼────────────┐
│ Pattern                                                           │ Violations │
├───────────────────────────────────────────────────────────────────┼────────────┤
│ 🔒 4.  Centralised Event Handling                                 │ 1          │
└───────────────────────────────────────────────────────────────────┼────────────┘

Detailed Violations

• Rule 4: Centralised Event Handling
  Use central `eventHandlers.trackListener` + `cleanupListeners` only.

  Line 5: export function createApiEndpoints({ logger, DependencySystem, config } = {}) {
  ⚠  Violation: Factory 'createApiEndpoints' provides cleanup() but never calls eventHandlers.cleanupListeners({ context: … }).
  💡 Hint:
     Invoke eventHandlers.cleanupListeners({ context: … }) inside cleanup().

┌──────────────────────────────────────────────────────────────────────────────┐
│                                                                              │
│                🛡️ Frontend Patterns: domReadinessService.js                 │
│                                                                              │
└──────────────────────────────────────────────────────────────────────────────┘

┌───────────────────────────────────────────────────────────────────┼────────────┐
│ Pattern                                                           │ Violations │
├───────────────────────────────────────────────────────────────────┼────────────┤
│ 🔒 12. Logger / Observability                                     │ 5          │
└───────────────────────────────────────────────────────────────────┼────────────┘

Detailed Violations

• Rule 12: Logger / Observability
  No `console.*`; all logs via DI logger with context. Use canonical safeHandler.

  Line 361: } catch (err) {
  ⚠  Violation: Caught errors must be logged via 'logger.error(..., { context: ... })'.
  💡 Hint:
     Example:
     } catch (err) {
       logger.error("[Module] Something broke", err, { context: "Module:myError" });
     }

  Line 463: } catch (err) {
  ⚠  Violation: Caught errors must be logged via 'logger.error(..., { context: ... })'.
  💡 Hint:
     Example:
     } catch (err) {
       logger.error("[Module] Something broke", err, { context: "Module:myError" });
     }

  Line 520: } catch (err) {
  ⚠  Violation: Caught errors must be logged via 'logger.error(..., { context: ... })'.
  💡 Hint:
     Example:
     } catch (err) {
       logger.error("[Module] Something broke", err, { context: "Module:myError" });
     }

  Line 545: } catch (err) {
  ⚠  Violation: Caught errors must be logged via 'logger.error(..., { context: ... })'.
  💡 Hint:
     Example:
     } catch (err) {
       logger.error("[Module] Something broke", err, { context: "Module:myError" });
     }

  Line 581: } catch (err) {
  ⚠  Violation: Caught errors must be logged via 'logger.error(..., { context: ... })'.
  💡 Hint:
     Example:
     } catch (err) {
       logger.error("[Module] Something broke", err, { context: "Module:myError" });
     }

┌──────────────────────────────────────────────────────────────────────────────┐
│                                                                              │
│                 🛡️ Frontend Patterns: htmlTemplateLoader.js                 │
│                                                                              │
└──────────────────────────────────────────────────────────────────────────────┘

┌───────────────────────────────────────────────────────────────────┼────────────┐
│ Pattern                                                           │ Violations │
├───────────────────────────────────────────────────────────────────┼────────────┤
│ 🔒 4.  Centralised Event Handling                                 │ 1          │
│ 🔒 12. Logger / Observability                                     │ 6          │
│ 🔒 16. Error Object Structure                                     │ 7          │
└───────────────────────────────────────────────────────────────────┼────────────┘

Detailed Violations

• Rule 4: Centralised Event Handling
  Use central `eventHandlers.trackListener` + `cleanupListeners` only.

  Line 12: export function createHtmlTemplateLoader({
  ⚠  Violation: Factory 'createHtmlTemplateLoader' provides cleanup() but never calls eventHandlers.cleanupListeners({ context: … }).
  💡 Hint:
     Invoke eventHandlers.cleanupListeners({ context: … }) inside cleanup().

• Rule 12: Logger / Observability
  No `console.*`; all logs via DI logger with context. Use canonical safeHandler.

  Line 84: logger.warn(`[HtmlTemplateLoader] containerSelector "${containerSelector}" not found in DOM. Template ${url} will not be injected.`);
  ⚠  Violation: Direct 'logger.warn' call missing a final metadata object with a 'context' property.
  💡 Hint:
     Ensure logger calls like 'warn' end with, e.g., { context: "Module:description" }. Found type for last arg: TemplateLiteral

  Line 92: } catch (e) {
  ⚠  Violation: Caught errors must be logged via 'logger.error(..., { context: ... })'.
  💡 Hint:
     Example:
     } catch (e) {
       logger.error("[Module] Something broke", e, { context: "Module:myError" });
     }

  Line 125: logger.warn(`[HtmlTemplateLoader] Timeout loading template: ${url}`, { url, timeout });
  ⚠  Violation: Direct 'logger.warn' call missing a final metadata object with a 'context' property.
  💡 Hint:
     Ensure logger calls like 'warn' end with, e.g., { context: "Module:description" }. Found type for last arg: ObjectExpression

  Line 147: } catch (primaryErr) {
  ⚠  Violation: Caught errors must be logged via 'logger.error(..., { context: ... })'.
  💡 Hint:
     Example:
     } catch (primaryErr) {
       logger.error("[Module] Something broke", primaryErr, { context: "Module:myError" });
     }

  Line 150: logger.warn('[HtmlTemplateLoader] Primary fetch failed, retrying with native fetch', { url });
  ⚠  Violation: Direct 'logger.warn' call missing a final metadata object with a 'context' property.
  💡 Hint:
     Ensure logger calls like 'warn' end with, e.g., { context: "Module:description" }. Found type for last arg: ObjectExpression

  Line 259: } catch (err) {
  ⚠  Violation: Caught errors must be logged via 'logger.error(..., { context: ... })'.
  💡 Hint:
     Example:
     } catch (err) {
       logger.error("[Module] Something broke", err, { context: "Module:myError" });
     }

• Rule 16: Error Object Structure
  Error objects must use standard { status, data, message } structure.

  Line 96: emitEvent(eventName, { success: false, error: `Container ${containerSelector} not found` });
  ⚠  Violation: Non-standard error object structure detected.
  💡 Hint:
     Use { status, data, message } format (matches apiClient.js).

  Line 99: emitEvent('modalsLoaded', { success: false, error: `Container ${containerSelector} not found for modals.html` });
  ⚠  Violation: Non-standard error object structure detected.
  💡 Hint:
     Use { status, data, message } format (matches apiClient.js).

  Line 209: emitEvent(eventName, { success, error: errorInfo, url });
  ⚠  Violation: Non-standard error object structure detected.
  💡 Hint:
     Use { status, data, message } format (matches apiClient.js).

  Line 213: emitEvent('modalsLoaded', { success, error: errorInfo, url, synthetic: false });
  ⚠  Violation: Non-standard error object structure detected.
  💡 Hint:
     Use { status, data, message } format (matches apiClient.js).

  Line 233: results.push({
  ⚠  Violation: Non-standard error object structure detected.
  💡 Hint:
     Use { status, data, message } format (matches apiClient.js).

  Line 260: results.push({
  ⚠  Violation: Non-standard error object structure detected.
  💡 Hint:
     Use { status, data, message } format (matches apiClient.js).

  Line 267: emitEvent(eventName, { success: false, error: err.message });
  ⚠  Violation: Non-standard error object structure detected.
  💡 Hint:
     Use { status, data, message } format (matches apiClient.js).

┌──────────────────────────────────────────────────────────────────────────────┐
│                                                                              │
│                🛡️ Frontend Patterns: polyfillCustomEvent.js                 │
│                                                                              │
└──────────────────────────────────────────────────────────────────────────────┘

┌───────────────────────────────────────────────────────────────────┼────────────┐
│ Pattern                                                           │ Violations │
├───────────────────────────────────────────────────────────────────┼────────────┤
│ 🔒 1.  Factory Function Export                                    │ 1          │
│ 🔒 2.  Strict Dependency Injection                                │ 5          │
└───────────────────────────────────────────────────────────────────┼────────────┘

Detailed Violations

• Rule 1: Factory Function Export
  Export `createXyz` factory, validate deps, expose cleanup, no top-level code.

  Line 1: /**
  ⚠  Violation: Missing factory export.
  💡 Hint:
     A module must export a function like 'createMyFeature(deps)'.

• Rule 2: Strict Dependency Injection
  No direct globals or direct service imports; inject via DI.

  Line 7: if (typeof window === "undefined" || typeof window.CustomEvent === "function") return;
  ⚠  Violation: Direct use of global 'window' is forbidden. Use DI abstractions.
  💡 Hint:
     If access to 'window' is needed, expose it via a DI-provided service.

  Line 7: if (typeof window === "undefined" || typeof window.CustomEvent === "function") return;
  ⚠  Violation: Direct use of global 'window' is forbidden. Use DI abstractions.
  💡 Hint:
     If access to 'window' is needed, expose it via a DI-provided service.

  Line 10: var evt = document.createEvent("CustomEvent");
  ⚠  Violation: Direct use of global 'document' is forbidden. Use DI abstractions.
  💡 Hint:
     If access to 'document' is needed, expose it via a DI-provided service.

  Line 14: CustomEvent.prototype = window.Event.prototype;
  ⚠  Violation: Direct use of global 'window' is forbidden. Use DI abstractions.
  💡 Hint:
     If access to 'window' is needed, expose it via a DI-provided service.

  Line 15: window.CustomEvent = CustomEvent;
  ⚠  Violation: Direct use of global 'window' is forbidden. Use DI abstractions.
  💡 Hint:
     If access to 'window' is needed, expose it via a DI-provided service.

┌──────────────────────────────────────────────────────────────────────────────┐
│                                                                              │
│                      🛡️ Frontend Patterns: session.js                       │
│                                                                              │
└──────────────────────────────────────────────────────────────────────────────┘

┌───────────────────────────────────────────────────────────────────┼────────────┐
│ Pattern                                                           │ Violations │
├───────────────────────────────────────────────────────────────────┼────────────┤
│ 🔒 1.  Factory Function Export                                    │ 1          │
└───────────────────────────────────────────────────────────────────┼────────────┘

Detailed Violations

• Rule 1: Factory Function Export
  Export `createXyz` factory, validate deps, expose cleanup, no top-level code.

  Line 1: /**
  ⚠  Violation: Missing factory export.
  💡 Hint:
     A module must export a function like 'createMyFeature(deps)'.

┌──────────────────────────────────────────────────────────────────────────────┐
│                                                                              │
│                    🛡️ Frontend Patterns: initHelpers.js                     │
│                                                                              │
└──────────────────────────────────────────────────────────────────────────────┘

┌───────────────────────────────────────────────────────────────────┼────────────┐
│ Pattern                                                           │ Violations │
├───────────────────────────────────────────────────────────────────┼────────────┤
│ 🔒 1.  Factory Function Export                                    │ 1          │
│ 🔒 12. Logger / Observability                                     │ 2          │
└───────────────────────────────────────────────────────────────────┼────────────┘

Detailed Violations

• Rule 1: Factory Function Export
  Export `createXyz` factory, validate deps, expose cleanup, no top-level code.

  Line 98: export function createInitHelpers({ domReadinessService, browserService, logger }) {
  ⚠  Violation: Factory 'createInitHelpers' must expose a cleanup or teardown API.
  💡 Hint:
     Example: return { ..., cleanup: () => { /* detach listeners, etc. */ } };

• Rule 12: Logger / Observability
  No `console.*`; all logs via DI logger with context. Use canonical safeHandler.

  Line 31: } catch (err) {
  ⚠  Violation: Caught errors must be logged via 'logger.error(..., { context: ... })'.
  💡 Hint:
     Example:
     } catch (err) {
       logger.error("[Module] Something broke", err, { context: "Module:myError" });
     }

  Line 58: } catch (err) {
  ⚠  Violation: Caught errors must be logged via 'logger.error(..., { context: ... })'.
  💡 Hint:
     Example:
     } catch (err) {
       logger.error("[Module] Something broke", err, { context: "Module:myError" });
     }

┌──────────────────────────────────────────────────────────────────────────────┐
│                                                                              │
│                 🛡️ Frontend Patterns: errorReporterStub.js                  │
│                                                                              │
└──────────────────────────────────────────────────────────────────────────────┘

┌───────────────────────────────────────────────────────────────────┼────────────┐
│ Pattern                                                           │ Violations │
├───────────────────────────────────────────────────────────────────┼────────────┤
│ 🔒 1.  Factory Function Export                                    │ 1          │
└───────────────────────────────────────────────────────────────────┼────────────┘

Detailed Violations

• Rule 1: Factory Function Export
  Export `createXyz` factory, validate deps, expose cleanup, no top-level code.

  Line 1: /**
  ⚠  Violation: Missing factory export.
  💡 Hint:
     A module must export a function like 'createMyFeature(deps)'.

┌──────────────────────────────────────────────────────────────────────────────┐
│                                                                              │
│                   🛡️ Frontend Patterns: storageService.js                   │
│                                                                              │
└──────────────────────────────────────────────────────────────────────────────┘

┌───────────────────────────────────────────────────────────────────┼────────────┐
│ Pattern                                                           │ Violations │
├───────────────────────────────────────────────────────────────────┼────────────┤
│ 🔒 1.  Factory Function Export                                    │ 2          │
│ 🔒 12. Logger / Observability                                     │ 1          │
└───────────────────────────────────────────────────────────────────┼────────────┘

Detailed Violations

• Rule 1: Factory Function Export
  Export `createXyz` factory, validate deps, expose cleanup, no top-level code.

  Line 10: export function createStorageService({ browserService, APP_CONFIG, logger, DependencySystem }) {
  ⚠  Violation: Factory 'createStorageService' must validate its dependencies.
  💡 Hint:
     Example: if (!deps.logger) throw new Error("Missing logger dependency");

  Line 10: export function createStorageService({ browserService, APP_CONFIG, logger, DependencySystem }) {
  ⚠  Violation: Factory 'createStorageService' must expose a cleanup or teardown API.
  💡 Hint:
     Example: return { ..., cleanup: () => { /* detach listeners, etc. */ } };

• Rule 12: Logger / Observability
  No `console.*`; all logs via DI logger with context. Use canonical safeHandler.

  Line 14: } catch (err) {
  ⚠  Violation: Caught errors must be logged via 'logger.error(..., { context: ... })'.
  💡 Hint:
     Example:
     } catch (err) {
       logger.error("[Module] Something broke", err, { context: "Module:myError" });
     }

┌──────────────────────────────────────────────────────────────────────────────┐
│                                                                              │
│                 🛡️ Frontend Patterns: selectorConstants.js                  │
│                                                                              │
└──────────────────────────────────────────────────────────────────────────────┘

┌───────────────────────────────────────────────────────────────────┼────────────┐
│ Pattern                                                           │ Violations │
├───────────────────────────────────────────────────────────────────┼────────────┤
│ 🔒 1.  Factory Function Export                                    │ 1          │
└───────────────────────────────────────────────────────────────────┼────────────┘

Detailed Violations

• Rule 1: Factory Function Export
  Export `createXyz` factory, validate deps, expose cleanup, no top-level code.

  Line 1: /**
  ⚠  Violation: Missing factory export.
  💡 Hint:
     A module must export a function like 'createMyFeature(deps)'.

┌──────────────────────────────────────────────────────────────────────────────┐
│                                                                              │
│                     🛡️ Frontend Patterns: apiClient.js                      │
│                                                                              │
└──────────────────────────────────────────────────────────────────────────────┘

┌───────────────────────────────────────────────────────────────────┼────────────┐
│ Pattern                                                           │ Violations │
├───────────────────────────────────────────────────────────────────┼────────────┤
│ 🔒 4.  Centralised Event Handling                                 │ 1          │
└───────────────────────────────────────────────────────────────────┼────────────┘

Detailed Violations

• Rule 4: Centralised Event Handling
  Use central `eventHandlers.trackListener` + `cleanupListeners` only.

  Line 18: export function createApiClient({
  ⚠  Violation: Factory 'createApiClient' provides cleanup() but never calls eventHandlers.cleanupListeners({ context: … }).
  💡 Hint:
     Invoke eventHandlers.cleanupListeners({ context: … }) inside cleanup().

┌──────────────────────────────────────────────────────────────────────────────┐
│                                                                              │
│                   🛡️ Frontend Patterns: appInitializer.js                   │
│                                                                              │
└──────────────────────────────────────────────────────────────────────────────┘

┌───────────────────────────────────────────────────────────────────┼────────────┐
│ Pattern                                                           │ Violations │
├───────────────────────────────────────────────────────────────────┼────────────┤
│ 🔒 2.  Strict Dependency Injection                                │ 3          │
│ 🔒 9.  Module Event Bus                                           │ 2          │
│ 🔒 12. Logger / Observability                                     │ 7          │
│ 🔒 16. Error Object Structure                                     │ 3          │
│ 🔒 17. Logger Factory Placement                                   │ 1          │
└───────────────────────────────────────────────────────────────────┼────────────┘

Detailed Violations

• Rule 2: Strict Dependency Injection
  No direct globals or direct service imports; inject via DI.

  Line 13: import { createDomReadinessService } from "../utils/domReadinessService.js";
  ⚠  Violation: Direct import of a service-like module ('../utils/domReadinessService.js' for 'domReadinessService') is forbidden.
  💡 Hint:
     Inject 'domReadinessService' via DI through the factory function's parameters.

  Line 14: import { createLogger } from "../logger.js";
  ⚠  Violation: Direct import of a service-like module ('../logger.js' for 'logger') is forbidden.
  💡 Hint:
     Inject 'logger' via DI through the factory function's parameters.

  Line 1551: const doc = domAPI.getDocument?.() || document;
  ⚠  Violation: Direct use of global 'document' is forbidden. Use DI abstractions.
  💡 Hint:
     If access to 'document' is needed, expose it via a DI-provided service.

• Rule 9: Module Event Bus
  Dispatch custom events through a dedicated `EventTarget` bus.

  Line 390: appBus.dispatchEvent(
  ⚠  Violation: Event dispatched on an object not identified as a dedicated event bus.
  💡 Hint:
     Dispatch events via a known bus (e.g., 'eventBus.dispatchEvent()').

  Line 402: domAPIlookup.dispatchEvent(
  ⚠  Violation: Event dispatched on an object not identified as a dedicated event bus.
  💡 Hint:
     Dispatch events via a known bus (e.g., 'eventBus.dispatchEvent()').

• Rule 12: Logger / Observability
  No `console.*`; all logs via DI logger with context. Use canonical safeHandler.

  Line 414: } catch (error) {
  ⚠  Violation: Caught errors must be logged via 'logger.error(..., { context: ... })'.
  💡 Hint:
     Example:
     } catch (error) {
       logger.error("[Module] Something broke", error, { context: "Module:myError" });
     }

  Line 1818: logger.info('[appInitializer] Boot sequence start');
  ⚠  Violation: Direct 'logger.info' call missing a final metadata object with a 'context' property.
  💡 Hint:
     Ensure logger calls like 'info' end with, e.g., { context: "Module:description" }. Found type for last arg: Literal

  Line 1827: logger.info(`[appInitializer] ▶ Phase start: ${name}`);
  ⚠  Violation: Direct 'logger.info' call missing a final metadata object with a 'context' property.
  💡 Hint:
     Ensure logger calls like 'info' end with, e.g., { context: "Module:description" }. Found type for last arg: TemplateLiteral

  Line 1831: logger.info(`[appInitializer] ✔ Phase complete: ${name} (${duration.toFixed(0)} ms)`);
  ⚠  Violation: Direct 'logger.info' call missing a final metadata object with a 'context' property.
  💡 Hint:
     Ensure logger calls like 'info' end with, e.g., { context: "Module:description" }. Found type for last arg: TemplateLiteral

  Line 1866: logger.info('[appInitializer] Boot sequence complete – app is READY');
  ⚠  Violation: Direct 'logger.info' call missing a final metadata object with a 'context' property.
  💡 Hint:
     Ensure logger calls like 'info' end with, e.g., { context: "Module:description" }. Found type for last arg: Literal

  Line 1870: logger.info('[appInitializer] Shutdown start');
  ⚠  Violation: Direct 'logger.info' call missing a final metadata object with a 'context' property.
  💡 Hint:
     Ensure logger calls like 'info' end with, e.g., { context: "Module:description" }. Found type for last arg: Literal

  Line 1878: logger.info('[appInitializer] Shutdown complete');
  ⚠  Violation: Direct 'logger.info' call missing a final metadata object with a 'context' property.
  💡 Hint:
     Ensure logger calls like 'info' end with, e.g., { context: "Module:description" }. Found type for last arg: Literal

• Rule 16: Error Object Structure
  Error objects must use standard { status, data, message } structure.

  Line 260: _logger = winConsole ?? { info() {}, warn() {}, error() {}, debug() {}, log() {} };
  ⚠  Violation: Non-standard error object structure detected.
  💡 Hint:
     Use { status, data, message } format (matches apiClient.js).

  Line 415: _logger.error('[appState] Failed to dispatch project change event.', {
  ⚠  Violation: Non-standard error object structure detected.
  💡 Hint:
     Use { status, data, message } format (matches apiClient.js).

  Line 807: { message, source, lineno, colno, err: error?.stack || error },
  ⚠  Violation: Non-standard error object structure detected.
  💡 Hint:
     Use { status, data, message } format (matches apiClient.js).

• Rule 17: Logger Factory Placement
  `createLogger()` may appear **only** in logger.js or app.js bootstrap.

  Line 66: logger = createLogger({
  ⚠  Violation: `createLogger()` can only be called in logger.js or app bootstrap.
  💡 Hint:
     All other modules must receive a prepared logger via DI.

┌──────────────────────────────────────────────────────────────────────────────┐
│                                                                              │
│                   🛡️ Frontend Patterns: modalConstants.js                   │
│                                                                              │
└──────────────────────────────────────────────────────────────────────────────┘

┌───────────────────────────────────────────────────────────────────┼────────────┐
│ Pattern                                                           │ Violations │
├───────────────────────────────────────────────────────────────────┼────────────┤
│ 🔒 1.  Factory Function Export                                    │ 1          │
│ 🔒 16. Error Object Structure                                     │ 1          │
└───────────────────────────────────────────────────────────────────┼────────────┘

Detailed Violations

• Rule 1: Factory Function Export
  Export `createXyz` factory, validate deps, expose cleanup, no top-level code.

  Line 1: /**
  ⚠  Violation: Missing factory export.
  💡 Hint:
     A module must export a function like 'createMyFeature(deps)'.

• Rule 16: Error Object Structure
  Error objects must use standard { status, data, message } structure.

  Line 14: export const MODAL_MAPPINGS = {
  ⚠  Violation: Non-standard error object structure detected.
  💡 Hint:
     Use { status, data, message } format (matches apiClient.js).

┌──────────────────────────────────────────────────────────────────────────────┐
│                                                                              │
│                 🛡️ Frontend Patterns: navigationService.js                  │
│                                                                              │
└──────────────────────────────────────────────────────────────────────────────┘

┌───────────────────────────────────────────────────────────────────┼────────────┐
│ Pattern                                                           │ Violations │
├───────────────────────────────────────────────────────────────────┼────────────┤
│ 🔒 12. Logger / Observability                                     │ 4          │
└───────────────────────────────────────────────────────────────────┼────────────┘

Detailed Violations

• Rule 12: Logger / Observability
  No `console.*`; all logs via DI logger with context. Use canonical safeHandler.

  Line 69: } catch (err) {
  ⚠  Violation: Caught errors must be logged via 'logger.error(..., { context: ... })'.
  💡 Hint:
     Example:
     } catch (err) {
       logger.error("[navigationService] Something broke", err, { context: "navigationService:myError" });
     }

  Line 210: } catch (error) {
  ⚠  Violation: Caught errors must be logged via 'logger.error(..., { context: ... })'.
  💡 Hint:
     Example:
     } catch (error) {
       logger.error("[navigationService] Something broke", error, { context: "navigationService:myError" });
     }

  Line 324: } catch (error) {
  ⚠  Violation: Caught errors must be logged via 'logger.error(..., { context: ... })'.
  💡 Hint:
     Example:
     } catch (error) {
       logger.error("[navigationService] Something broke", error, { context: "navigationService:myError" });
     }

  Line 428: } catch (err) {
  ⚠  Violation: Caught errors must be logged via 'logger.error(..., { context: ... })'.
  💡 Hint:
     Example:
     } catch (err) {
       logger.error("[navigationService] Something broke", err, { context: "navigationService:myError" });
     }

┌──────────────────────────────────────────────────────────────────────────────┐
│                                                                              │
│                  🛡️ Frontend Patterns: dompurify-global.js                  │
│                                                                              │
└──────────────────────────────────────────────────────────────────────────────┘

┌───────────────────────────────────────────────────────────────────┼────────────┐
│ Pattern                                                           │ Violations │
├───────────────────────────────────────────────────────────────────┼────────────┤
│ 🔒 2.  Strict Dependency Injection                                │ 2          │
│ 🔒 4.  Centralised Event Handling                                 │ 1          │
└───────────────────────────────────────────────────────────────────┼────────────┘

Detailed Violations

• Rule 2: Strict Dependency Injection
  No direct globals or direct service imports; inject via DI.

  Line 4: if (typeof window !== 'undefined') {
  ⚠  Violation: Direct use of global 'window' is forbidden. Use DI abstractions.
  💡 Hint:
     If access to 'window' is needed, expose it via a DI-provided service.

  Line 5: window.DOMPurify = DOMPurify;
  ⚠  Violation: Direct use of global 'window' is forbidden. Use DI abstractions.
  💡 Hint:
     If access to 'window' is needed, expose it via a DI-provided service.

• Rule 4: Centralised Event Handling
  Use central `eventHandlers.trackListener` + `cleanupListeners` only.

  Line 8: export function createDOMPurifyGlobal({ browserService }) {
  ⚠  Violation: Factory 'createDOMPurifyGlobal' provides cleanup() but never calls eventHandlers.cleanupListeners({ context: … }).
  💡 Hint:
     Invoke eventHandlers.cleanupListeners({ context: … }) inside cleanup().

┌──────────────────────────────────────────────────────────────────────────────┐
│                                                                              │
│                    🛡️ Frontend Patterns: dompurify.es.js                    │
│                                                                              │
└──────────────────────────────────────────────────────────────────────────────┘

┌───────────────────────────────────────────────────────────────────┼────────────┐
│ Pattern                                                           │ Violations │
├───────────────────────────────────────────────────────────────────┼────────────┤
│ 🔒 1.  Factory Function Export                                    │ 1          │
│ 🔒 2.  Strict Dependency Injection                                │ 8          │
│ 🔒 3.  Pure Imports                                               │ 33         │
│ 🔒 6.  Sanitize All User HTML                                     │ 1          │
│ 🔒 12. Logger / Observability                                     │ 10         │
│ 🔒 14. Module Size Limit                                          │ 1          │
└───────────────────────────────────────────────────────────────────┼────────────┘

Detailed Violations

• Rule 1: Factory Function Export
  Export `createXyz` factory, validate deps, expose cleanup, no top-level code.

  Line 1: /*! @license DOMPurify 3.0.5 | (c) Cure53 and other contributors | Released under the Apache license 2.0 and Mozilla Public License 2.0 | github.com/cure53/DOMPurify/blob/3.0.5/LICENSE */
  ⚠  Violation: Missing factory export.
  💡 Hint:
     A module must export a function like 'createMyFeature(deps)'.

• Rule 2: Strict Dependency Injection
  No direct globals or direct service imports; inject via DI.

  Line 198: const getGlobal = () => typeof window === 'undefined' ? null : window;
  ⚠  Violation: Direct use of global 'window' is forbidden. Use DI abstractions.
  💡 Hint:
     If access to 'window' is needed, expose it via a DI-provided service.

  Line 198: const getGlobal = () => typeof window === 'undefined' ? null : window;
  ⚠  Violation: Direct use of global 'window' is forbidden. Use DI abstractions.
  💡 Hint:
     If access to 'window' is needed, expose it via a DI-provided service.

  Line 299: const template = document.createElement('template');
  ⚠  Violation: Direct use of global 'document' is forbidden. Use DI abstractions.
  💡 Hint:
     If access to 'document' is needed, expose it via a DI-provided service.

  Line 302: document = template.content.ownerDocument;
  ⚠  Violation: Direct use of global 'document' is forbidden. Use DI abstractions.
  💡 Hint:
     If access to 'document' is needed, expose it via a DI-provided service.

  Line 313: } = document;
  ⚠  Violation: Direct use of global 'document' is forbidden. Use DI abstractions.
  💡 Hint:
     If access to 'document' is needed, expose it via a DI-provided service.

  Line 490: const formElement = document.createElement('form');
  ⚠  Violation: Direct use of global 'document' is forbidden. Use DI abstractions.
  💡 Hint:
     If access to 'document' is needed, expose it via a DI-provided service.

  Line 921: body.insertBefore(document.createTextNode(leadingWhitespace), body.childNodes[0] || null);
  ⚠  Violation: Direct use of global 'document' is forbidden. Use DI abstractions.
  💡 Hint:
     If access to 'document' is needed, expose it via a DI-provided service.

  Line 1110: if (SANITIZE_DOM && (lcName === 'id' || lcName === 'name') && (value in document || value in formElement)) {
  ⚠  Violation: Direct use of global 'document' is forbidden. Use DI abstractions.
  💡 Hint:
     If access to 'document' is needed, expose it via a DI-provided service.

• Rule 3: Pure Imports
  No side-effects at import time; all logic inside the factory.

  Line 45: const arrayForEach = unapply(Array.prototype.forEach);
  ⚠  Violation: Potential side-effect from function call at module top-level.
  💡 Hint:
     All executable logic should be inside the factory or DI-provided functions.

  Line 46: const arrayPop = unapply(Array.prototype.pop);
  ⚠  Violation: Potential side-effect from function call at module top-level.
  💡 Hint:
     All executable logic should be inside the factory or DI-provided functions.

  Line 47: const arrayPush = unapply(Array.prototype.push);
  ⚠  Violation: Potential side-effect from function call at module top-level.
  💡 Hint:
     All executable logic should be inside the factory or DI-provided functions.

  Line 48: const stringToLowerCase = unapply(String.prototype.toLowerCase);
  ⚠  Violation: Potential side-effect from function call at module top-level.
  💡 Hint:
     All executable logic should be inside the factory or DI-provided functions.

  Line 49: const stringToString = unapply(String.prototype.toString);
  ⚠  Violation: Potential side-effect from function call at module top-level.
  💡 Hint:
     All executable logic should be inside the factory or DI-provided functions.

  Line 50: const stringMatch = unapply(String.prototype.match);
  ⚠  Violation: Potential side-effect from function call at module top-level.
  💡 Hint:
     All executable logic should be inside the factory or DI-provided functions.

  Line 51: const stringReplace = unapply(String.prototype.replace);
  ⚠  Violation: Potential side-effect from function call at module top-level.
  💡 Hint:
     All executable logic should be inside the factory or DI-provided functions.

  Line 52: const stringIndexOf = unapply(String.prototype.indexOf);
  ⚠  Violation: Potential side-effect from function call at module top-level.
  💡 Hint:
     All executable logic should be inside the factory or DI-provided functions.

  Line 53: const stringTrim = unapply(String.prototype.trim);
  ⚠  Violation: Potential side-effect from function call at module top-level.
  💡 Hint:
     All executable logic should be inside the factory or DI-provided functions.

  Line 54: const regExpTest = unapply(RegExp.prototype.test);
  ⚠  Violation: Potential side-effect from function call at module top-level.
  💡 Hint:
     All executable logic should be inside the factory or DI-provided functions.

  Line 55: const typeErrorCreate = unconstruct(TypeError);
  ⚠  Violation: Potential side-effect from function call at module top-level.
  💡 Hint:
     All executable logic should be inside the factory or DI-provided functions.

  Line 150: const html$1 = freeze(['a', 'abbr', 'acronym', 'address', 'area', 'article', 'aside', 'audio', 'b', 'bdi', 'bdo', 'big', 'blink', 'blockquote', 'body', 'br', 'button', 'canvas', 'caption', 'center', 'cite', 'code', 'col', 'colgroup', 'content', 'data', 'datalist', 'dd', 'decorator', 'del', 'details', 'dfn', 'dialog', 'dir', 'div', 'dl', 'dt', 'element', 'em', 'fieldset', 'figcaption', 'figure', 'font', 'footer', 'form', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'i', 'img', 'input', 'ins', 'kbd', 'label', 'legend', 'li', 'main', 'map', 'mark', 'marquee', 'menu', 'menuitem', 'meter', 'nav', 'nobr', 'ol', 'optgroup', 'option', 'output', 'p', 'picture', 'pre', 'progress', 'q', 'rp', 'rt', 'ruby', 's', 'samp', 'section', 'select', 'shadow', 'small', 'source', 'spacer', 'span', 'strike', 'strong', 'style', 'sub', 'summary', 'sup', 'table', 'tbody', 'td', 'template', 'textarea', 'tfoot', 'th', 'thead', 'time', 'tr', 'track', 'tt', 'u', 'ul', 'var', 'video', 'wbr']); // SVG
  ⚠  Violation: Potential side-effect from function call at module top-level.
  💡 Hint:
     All executable logic should be inside the factory or DI-provided functions.

  Line 152: const svg$1 = freeze(['svg', 'a', 'altglyph', 'altglyphdef', 'altglyphitem', 'animatecolor', 'animatemotion', 'animatetransform', 'circle', 'clippath', 'defs', 'desc', 'ellipse', 'filter', 'font', 'g', 'glyph', 'glyphref', 'hkern', 'image', 'line', 'lineargradient', 'marker', 'mask', 'metadata', 'mpath', 'path', 'pattern', 'polygon', 'polyline', 'radialgradient', 'rect', 'stop', 'style', 'switch', 'symbol', 'text', 'textpath', 'title', 'tref', 'tspan', 'view', 'vkern']);
  ⚠  Violation: Potential side-effect from function call at module top-level.
  💡 Hint:
     All executable logic should be inside the factory or DI-provided functions.

  Line 153: const svgFilters = freeze(['feBlend', 'feColorMatrix', 'feComponentTransfer', 'feComposite', 'feConvolveMatrix', 'feDiffuseLighting', 'feDisplacementMap', 'feDistantLight', 'feDropShadow', 'feFlood', 'feFuncA', 'feFuncB', 'feFuncG', 'feFuncR', 'feGaussianBlur', 'feImage', 'feMerge', 'feMergeNode', 'feMorphology', 'feOffset', 'fePointLight', 'feSpecularLighting', 'feSpotLight', 'feTile', 'feTurbulence']); // List of SVG elements that are disallowed by default.
  ⚠  Violation: Potential side-effect from function call at module top-level.
  💡 Hint:
     All executable logic should be inside the factory or DI-provided functions.

  Line 158: const svgDisallowed = freeze(['animate', 'color-profile', 'cursor', 'discard', 'font-face', 'font-face-format', 'font-face-name', 'font-face-src', 'font-face-uri', 'foreignobject', 'hatch', 'hatchpath', 'mesh', 'meshgradient', 'meshpatch', 'meshrow', 'missing-glyph', 'script', 'set', 'solidcolor', 'unknown', 'use']);
  ⚠  Violation: Potential side-effect from function call at module top-level.
  💡 Hint:
     All executable logic should be inside the factory or DI-provided functions.

  Line 159: const mathMl$1 = freeze(['math', 'menclose', 'merror', 'mfenced', 'mfrac', 'mglyph', 'mi', 'mlabeledtr', 'mmultiscripts', 'mn', 'mo', 'mover', 'mpadded', 'mphantom', 'mroot', 'mrow', 'ms', 'mspace', 'msqrt', 'mstyle', 'msub', 'msup', 'msubsup', 'mtable', 'mtd', 'mtext', 'mtr', 'munder', 'munderover', 'mprescripts']); // Similarly to SVG, we want to know all MathML elements,
  ⚠  Violation: Potential side-effect from function call at module top-level.
  💡 Hint:
     All executable logic should be inside the factory or DI-provided functions.

  Line 162: const mathMlDisallowed = freeze(['maction', 'maligngroup', 'malignmark', 'mlongdiv', 'mscarries', 'mscarry', 'msgroup', 'mstack', 'msline', 'msrow', 'semantics', 'annotation', 'annotation-xml', 'mprescripts', 'none']);
  ⚠  Violation: Potential side-effect from function call at module top-level.
  💡 Hint:
     All executable logic should be inside the factory or DI-provided functions.

  Line 163: const text = freeze(['#text']);
  ⚠  Violation: Potential side-effect from function call at module top-level.
  💡 Hint:
     All executable logic should be inside the factory or DI-provided functions.

  Line 165: const html = freeze(['accept', 'action', 'align', 'alt', 'autocapitalize', 'autocomplete', 'autopictureinpicture', 'autoplay', 'background', 'bgcolor', 'border', 'capture', 'cellpadding', 'cellspacing', 'checked', 'cite', 'class', 'clear', 'color', 'cols', 'colspan', 'controls', 'controlslist', 'coords', 'crossorigin', 'datetime', 'decoding', 'default', 'dir', 'disabled', 'disablepictureinpicture', 'disableremoteplayback', 'download', 'draggable', 'enctype', 'enterkeyhint', 'face', 'for', 'headers', 'height', 'hidden', 'high', 'href', 'hreflang', 'id', 'inputmode', 'integrity', 'ismap', 'kind', 'label', 'lang', 'list', 'loading', 'loop', 'low', 'max', 'maxlength', 'media', 'method', 'min', 'minlength', 'multiple', 'muted', 'name', 'nonce', 'noshade', 'novalidate', 'nowrap', 'open', 'optimum', 'pattern', 'placeholder', 'playsinline', 'poster', 'preload', 'pubdate', 'radiogroup', 'readonly', 'rel', 'required', 'rev', 'reversed', 'role', 'rows', 'rowspan', 'spellcheck', 'scope', 'selected', 'shape', 'size', 'sizes', 'span', 'srclang', 'start', 'src', 'srcset', 'step', 'style', 'summary', 'tabindex', 'title', 'translate', 'type', 'usemap', 'valign', 'value', 'width', 'xmlns', 'slot']);
  ⚠  Violation: Potential side-effect from function call at module top-level.
  💡 Hint:
     All executable logic should be inside the factory or DI-provided functions.

  Line 166: const svg = freeze(['accent-height', 'accumulate', 'additive', 'alignment-baseline', 'ascent', 'attributename', 'attributetype', 'azimuth', 'basefrequency', 'baseline-shift', 'begin', 'bias', 'by', 'class', 'clip', 'clippathunits', 'clip-path', 'clip-rule', 'color', 'color-interpolation', 'color-interpolation-filters', 'color-profile', 'color-rendering', 'cx', 'cy', 'd', 'dx', 'dy', 'diffuseconstant', 'direction', 'display', 'divisor', 'dur', 'edgemode', 'elevation', 'end', 'fill', 'fill-opacity', 'fill-rule', 'filter', 'filterunits', 'flood-color', 'flood-opacity', 'font-family', 'font-size', 'font-size-adjust', 'font-stretch', 'font-style', 'font-variant', 'font-weight', 'fx', 'fy', 'g1', 'g2', 'glyph-name', 'glyphref', 'gradientunits', 'gradienttransform', 'height', 'href', 'id', 'image-rendering', 'in', 'in2', 'k', 'k1', 'k2', 'k3', 'k4', 'kerning', 'keypoints', 'keysplines', 'keytimes', 'lang', 'lengthadjust', 'letter-spacing', 'kernelmatrix', 'kernelunitlength', 'lighting-color', 'local', 'marker-end', 'marker-mid', 'marker-start', 'markerheight', 'markerunits', 'markerwidth', 'maskcontentunits', 'maskunits', 'max', 'mask', 'media', 'method', 'mode', 'min', 'name', 'numoctaves', 'offset', 'operator', 'opacity', 'order', 'orient', 'orientation', 'origin', 'overflow', 'paint-order', 'path', 'pathlength', 'patterncontentunits', 'patterntransform', 'patternunits', 'points', 'preservealpha', 'preserveaspectratio', 'primitiveunits', 'r', 'rx', 'ry', 'radius', 'refx', 'refy', 'repeatcount', 'repeatdur', 'restart', 'result', 'rotate', 'scale', 'seed', 'shape-rendering', 'specularconstant', 'specularexponent', 'spreadmethod', 'startoffset', 'stddeviation', 'stitchtiles', 'stop-color', 'stop-opacity', 'stroke-dasharray', 'stroke-dashoffset', 'stroke-linecap', 'stroke-linejoin', 'stroke-miterlimit', 'stroke-opacity', 'stroke', 'stroke-width', 'style', 'surfacescale', 'systemlanguage', 'tabindex', 'targetx', 'targety', 'transform', 'transform-origin', 'text-anchor', 'text-decoration', 'text-rendering', 'textlength', 'type', 'u1', 'u2', 'unicode', 'values', 'viewbox', 'visibility', 'version', 'vert-adv-y', 'vert-origin-x', 'vert-origin-y', 'width', 'word-spacing', 'wrap', 'writing-mode', 'xchannelselector', 'ychannelselector', 'x', 'x1', 'x2', 'xmlns', 'y', 'y1', 'y2', 'z', 'zoomandpan']);
  ⚠  Violation: Potential side-effect from function call at module top-level.
  💡 Hint:
     All executable logic should be inside the factory or DI-provided functions.

  Line 167: const mathMl = freeze(['accent', 'accentunder', 'align', 'bevelled', 'close', 'columnsalign', 'columnlines', 'columnspan', 'denomalign', 'depth', 'dir', 'display', 'displaystyle', 'encoding', 'fence', 'frame', 'height', 'href', 'id', 'largeop', 'length', 'linethickness', 'lspace', 'lquote', 'mathbackground', 'mathcolor', 'mathsize', 'mathvariant', 'maxsize', 'minsize', 'movablelimits', 'notation', 'numalign', 'open', 'rowalign', 'rowlines', 'rowspacing', 'rowspan', 'rspace', 'rquote', 'scriptlevel', 'scriptminsize', 'scriptsizemultiplier', 'selection', 'separator', 'separators', 'stretchy', 'subscriptshift', 'supscriptshift', 'symmetric', 'voffset', 'width', 'xmlns']);
  ⚠  Violation: Potential side-effect from function call at module top-level.
  💡 Hint:
     All executable logic should be inside the factory or DI-provided functions.

  Line 168: const xml = freeze(['xlink:href', 'xml:id', 'xlink:title', 'xml:space', 'xmlns:xlink']);
  ⚠  Violation: Potential side-effect from function call at module top-level.
  💡 Hint:
     All executable logic should be inside the factory or DI-provided functions.

  Line 170: const MUSTACHE_EXPR = seal(/\{\{[\w\W]*|[\w\W]*\}\}/gm); // Specify template detection regex for SAFE_FOR_TEMPLATES mode
  ⚠  Violation: Potential side-effect from function call at module top-level.
  💡 Hint:
     All executable logic should be inside the factory or DI-provided functions.

  Line 172: const ERB_EXPR = seal(/<%[\w\W]*|[\w\W]*%>/gm);
  ⚠  Violation: Potential side-effect from function call at module top-level.
  💡 Hint:
     All executable logic should be inside the factory or DI-provided functions.

  Line 173: const TMPLIT_EXPR = seal(/\${[\w\W]*}/gm);
  ⚠  Violation: Potential side-effect from function call at module top-level.
  💡 Hint:
     All executable logic should be inside the factory or DI-provided functions.

  Line 174: const DATA_ATTR = seal(/^data-[\-\w.\u00B7-\uFFFF]/); // eslint-disable-line no-useless-escape
  ⚠  Violation: Potential side-effect from function call at module top-level.
  💡 Hint:
     All executable logic should be inside the factory or DI-provided functions.

  Line 176: const ARIA_ATTR = seal(/^aria-[\-\w]+$/); // eslint-disable-line no-useless-escape
  ⚠  Violation: Potential side-effect from function call at module top-level.
  💡 Hint:
     All executable logic should be inside the factory or DI-provided functions.

  Line 178: const IS_ALLOWED_URI = seal(/^(?:(?:(?:f|ht)tps?|mailto|tel|callto|sms|cid|xmpp):|[^a-z]|[a-z+.\-]+(?:[^a-z+.\-:]|$))/i // eslint-disable-line no-useless-escape
  ⚠  Violation: Potential side-effect from function call at module top-level.
  💡 Hint:
     All executable logic should be inside the factory or DI-provided functions.

  Line 180: const IS_SCRIPT_OR_DATA = seal(/^(?:\w+script|data):/i);
  ⚠  Violation: Potential side-effect from function call at module top-level.
  💡 Hint:
     All executable logic should be inside the factory or DI-provided functions.

  Line 181: const ATTR_WHITESPACE = seal(/[\u0000-\u0020\u00A0\u1680\u180E\u2000-\u2029\u205F\u3000]/g // eslint-disable-line no-control-regex
  ⚠  Violation: Potential side-effect from function call at module top-level.
  💡 Hint:
     All executable logic should be inside the factory or DI-provided functions.

  Line 183: const DOCTYPE_NAME = seal(/^html$/i);
  ⚠  Violation: Potential side-effect from function call at module top-level.
  💡 Hint:
     All executable logic should be inside the factory or DI-provided functions.

  Line 185: var EXPRESSIONS = /*#__PURE__*/Object.freeze({
  ⚠  Violation: Potential side-effect from function call at module top-level.
  💡 Hint:
     All executable logic should be inside the factory or DI-provided functions.

  Line 1622: var purify = createDOMPurify();
  ⚠  Violation: Potential side-effect from function call at module top-level.
  💡 Hint:
     All executable logic should be inside the factory or DI-provided functions.

• Rule 6: Sanitize All User HTML
  Always call `sanitizer.sanitize()` before inserting user HTML.

  Line 913: doc.documentElement.innerHTML = IS_EMPTY_INPUT ? emptyHTML : dirtyPayload;
  ⚠  Violation: Direct assignment to 'innerHTML' is forbidden.
  💡 Hint:
     Use domAPI.setInnerHTML() with 'sanitizer.sanitize()' instead.

• Rule 12: Logger / Observability
  No `console.*`; all logs via DI logger with context. Use canonical safeHandler.

  Line 143: console.warn('fallback value for', element);
  ⚠  Violation: console.warn is forbidden – use DI logger.
  💡 Hint:
     Replace 'console.warn(...)' with 'logger.info("Message string", data, { context: "Module:operation" })'

  Line 237: } catch (_) {
  ⚠  Violation: Caught errors must be logged via 'logger.error(..., { context: ... })'.
  💡 Hint:
     Example:
     } catch (_) {
       logger.error("[Module] Something broke", _, { context: "Module:myError" });
     }

  Line 241: console.warn('TrustedTypes policy ' + policyName + ' could not be created.');
  ⚠  Violation: console.warn is forbidden – use DI logger.
  💡 Hint:
     Replace 'console.warn(...)' with 'logger.info("Message string", data, { context: "Module:operation" })'

  Line 830: } catch (_) {
  ⚠  Violation: Caught errors must be logged via 'logger.error(..., { context: ... })'.
  💡 Hint:
     Example:
     } catch (_) {
       logger.error("[Module] Something broke", _, { context: "Module:myError" });
     }

  Line 848: } catch (_) {
  ⚠  Violation: Caught errors must be logged via 'logger.error(..., { context: ... })'.
  💡 Hint:
     Example:
     } catch (_) {
       logger.error("[Module] Something broke", _, { context: "Module:myError" });
     }

  Line 861: } catch (_) {}
  ⚠  Violation: Caught errors must be logged via 'logger.error(..., { context: ... })'.
  💡 Hint:
     Example:
     } catch (_) {
       logger.error("[Module] Something broke", _, { context: "Module:myError" });
     }

  Line 865: } catch (_) {}
  ⚠  Violation: Caught errors must be logged via 'logger.error(..., { context: ... })'.
  💡 Hint:
     Example:
     } catch (_) {
       logger.error("[Module] Something broke", _, { context: "Module:myError" });
     }

  Line 904: } catch (_) {}
  ⚠  Violation: Caught errors must be logged via 'logger.error(..., { context: ... })'.
  💡 Hint:
     Example:
     } catch (_) {
       logger.error("[Module] Something broke", _, { context: "Module:myError" });
     }

  Line 914: } catch (_) {// Syntax error if dirtyPayload is invalid xml
  ⚠  Violation: Caught errors must be logged via 'logger.error(..., { context: ... })'.
  💡 Hint:
     Example:
     } catch (_) {
       logger.error("[Module] Something broke", _, { context: "Module:myError" });
     }

  Line 1287: } catch (_) {}
  ⚠  Violation: Caught errors must be logged via 'logger.error(..., { context: ... })'.
  💡 Hint:
     Example:
     } catch (_) {
       logger.error("[Module] Something broke", _, { context: "Module:myError" });
     }

• Rule 14: Module Size Limit
  Modules must not exceed 1000 lines.

  Line 1: /*! @license DOMPurify 3.0.5 | (c) Cure53 and other contributors | Released under the Apache license 2.0 and Mozilla Public License 2.0 | github.com/cure53/DOMPurify/blob/3.0.5/LICENSE */
  ⚠  Violation: Module exceeds 1000 line limit (1626 lines).
  💡 Hint:
     Split this module into smaller, focused modules.

┌──────────────────────────────────────────────────────────────────────────────┐
│                                                                              │
│              🛡️ Frontend Patterns: projectDetailsComponent.js               │
│                                                                              │
└──────────────────────────────────────────────────────────────────────────────┘

┌───────────────────────────────────────────────────────────────────┼────────────┐
│ Pattern                                                           │ Violations │
├───────────────────────────────────────────────────────────────────┼────────────┤
│ 🔒 14. Module Size Limit                                          │ 1          │
└───────────────────────────────────────────────────────────────────┼────────────┘

Detailed Violations

• Rule 14: Module Size Limit
  Modules must not exceed 1000 lines.

  Line 1: const MODULE_CONTEXT = "ProjectDetailsComponent";
  ⚠  Violation: Module exceeds 1000 line limit (1058 lines).
  💡 Hint:
     Split this module into smaller, focused modules.

┌──────────────────────────────────────────────────────────────────────────────┐
│                                                                              │
│             🛡️ Frontend Patterns: knowledgeBaseSearchHandler.js             │
│                                                                              │
└──────────────────────────────────────────────────────────────────────────────┘

┌───────────────────────────────────────────────────────────────────┼────────────┐
│ Pattern                                                           │ Violations │
├───────────────────────────────────────────────────────────────────┼────────────┤
│ 🔒 9.  Module Event Bus                                           │ 1          │
│ 🔒 12. Logger / Observability                                     │ 1          │
└───────────────────────────────────────────────────────────────────┼────────────┘

Detailed Violations

• Rule 9: Module Event Bus
  Dispatch custom events through a dedicated `EventTarget` bus.

  Line 267: ctx.eventHandlers.dispatchEvent(
  ⚠  Violation: Event dispatched on an object not identified as a dedicated event bus.
  💡 Hint:
     Dispatch events via a known bus (e.g., 'eventBus.dispatchEvent()').

• Rule 12: Logger / Observability
  No `console.*`; all logs via DI logger with context. Use canonical safeHandler.

  Line 79: } catch (err) {
  ⚠  Violation: Caught errors must be logged via 'logger.error(..., { context: ... })'.
  💡 Hint:
     Example:
     } catch (err) {
       logger.error("[Module] Something broke", err, { context: "Module:myError" });
     }

┌──────────────────────────────────────────────────────────────────────────────┐
│                                                                              │
│                      🛡️ Frontend Patterns: sidebar.js                       │
│                                                                              │
└──────────────────────────────────────────────────────────────────────────────┘

┌───────────────────────────────────────────────────────────────────┼────────────┐
│ Pattern                                                           │ Violations │
├───────────────────────────────────────────────────────────────────┼────────────┤
│ 🔒 12. Logger / Observability                                     │ 1          │
└───────────────────────────────────────────────────────────────────┼────────────┘

Detailed Violations

• Rule 12: Logger / Observability
  No `console.*`; all logs via DI logger with context. Use canonical safeHandler.

  Line 770: logger.info('[Sidebar] Auth state debug info', debugInfo);
  ⚠  Violation: Direct 'logger.info' call missing a final metadata object with a 'context' property.
  💡 Hint:
     Ensure logger calls like 'info' end with, e.g., { context: "Module:description" }. Found type for last arg: ObjectExpression

┌──────────────────────────────────────────────────────────────────────────────┐
│                                                                              │
│                        🛡️ Frontend Patterns: chat.js                        │
│                                                                              │
└──────────────────────────────────────────────────────────────────────────────┘

┌───────────────────────────────────────────────────────────────────┼────────────┐
│ Pattern                                                           │ Violations │
├───────────────────────────────────────────────────────────────────┼────────────┤
│ 🔒 14. Module Size Limit                                          │ 1          │
└───────────────────────────────────────────────────────────────────┼────────────┘

Detailed Violations

• Rule 14: Module Size Limit
  Modules must not exceed 1000 lines.

  Line 1: import { createChatUIUtils } from "./chat-ui-utils.js";
  ⚠  Violation: Module exceeds 1000 line limit (1488 lines).
  💡 Hint:
     Split this module into smaller, focused modules.

┌──────────────────────────────────────────────────────────────────────────────┐
│                                                                              │
│              🛡️ Frontend Patterns: authFormListenerFactory.js               │
│                                                                              │
└──────────────────────────────────────────────────────────────────────────────┘

┌───────────────────────────────────────────────────────────────────┼────────────┐
│ Pattern                                                           │ Violations │
├───────────────────────────────────────────────────────────────────┼────────────┤
│ 🔒 4.  Centralised Event Handling                                 │ 1          │
│ 🔒 12. Logger / Observability                                     │ 4          │
│ 🔒 15. Canonical Implementations                                  │ 3          │
└───────────────────────────────────────────────────────────────────┼────────────┘

Detailed Violations

• Rule 4: Centralised Event Handling
  Use central `eventHandlers.trackListener` + `cleanupListeners` only.

  Line 13: export function createAuthFormListenerFactory(deps) {
  ⚠  Violation: Factory 'createAuthFormListenerFactory' provides cleanup() but never calls eventHandlers.cleanupListeners({ context: … }).
  💡 Hint:
     Invoke eventHandlers.cleanupListeners({ context: … }) inside cleanup().

• Rule 12: Logger / Observability
  No `console.*`; all logs via DI logger with context. Use canonical safeHandler.

  Line 72: logger.debug("[AuthFormListenerFactory] Setup called but listeners are already attached.");
  ⚠  Violation: Direct 'logger.debug' call missing a final metadata object with a 'context' property.
  💡 Hint:
     Ensure logger calls like 'debug' end with, e.g., { context: "Module:description" }. Found type for last arg: Literal

  Line 94: handleLoginFormSubmit,
  ⚠  Violation: Event handler for 'eventHandlers.trackListener' must be wrapped by 'safeHandler' (or forwarded param).
  💡 Hint:
     Example: eventHandlers.trackListener(el, 'click', safeHandler(myHandler, 'Module:desc'), ...);

  Line 110: handleRegisterFormSubmit,
  ⚠  Violation: Event handler for 'eventHandlers.trackListener' must be wrapped by 'safeHandler' (or forwarded param).
  💡 Hint:
     Example: eventHandlers.trackListener(el, 'click', safeHandler(myHandler, 'Module:desc'), ...);

  Line 124: modalsLoadedHandlerRef,
  ⚠  Violation: Event handler for 'eventHandlers.trackListener' must be wrapped by 'safeHandler' (or forwarded param).
  💡 Hint:
     Example: eventHandlers.trackListener(el, 'click', safeHandler(myHandler, 'Module:desc'), ...);

• Rule 15: Canonical Implementations
  Use canonical implementations only (safeHandler, form handlers, URL parsing, etc.)

  Line 13: export function createAuthFormListenerFactory(deps) {
  ⚠  Violation: Custom form handler 'createAuthFormListenerFactory' detected.
  💡 Hint:
     Use createAuthFormHandler() from auth.js instead.

  Line 40: function handleLoginFormSubmit(e) {
  ⚠  Violation: Custom form handler 'handleLoginFormSubmit' detected.
  💡 Hint:
     Use createAuthFormHandler() from auth.js instead.

  Line 47: function handleRegisterFormSubmit(e) {
  ⚠  Violation: Custom form handler 'handleRegisterFormSubmit' detected.
  💡 Hint:
     Use createAuthFormHandler() from auth.js instead.

┌──────────────────────────────────────────────────────────────────────────────┐
│                                                                              │
│                   🛡️ Frontend Patterns: starredStorage.js                   │
│                                                                              │
└──────────────────────────────────────────────────────────────────────────────┘

┌───────────────────────────────────────────────────────────────────┼────────────┐
│ Pattern                                                           │ Violations │
├───────────────────────────────────────────────────────────────────┼────────────┤
│ 🔒 1.  Factory Function Export                                    │ 1          │
└───────────────────────────────────────────────────────────────────┼────────────┘

Detailed Violations

• Rule 1: Factory Function Export
  Export `createXyz` factory, validate deps, expose cleanup, no top-level code.

  Line 1: 
  ⚠  Violation: Missing factory export.
  💡 Hint:
     A module must export a function like 'createMyFeature(deps)'.

┌──────────────────────────────────────────────────────────────────────────────┐
│                                                                              │
│            🚨 Found 171 pattern violation(s)! See details above.             │
│                                                                              │
└──────────────────────────────────────────────────────────────────────────────┘

