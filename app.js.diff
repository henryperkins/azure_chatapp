--- a/static/js/app.js
+++ b/static/js/app.js
@@ -700,14 +700,8 @@
             DependencySystem
         });
         DependencySystem.register('projectDashboardUtils', projectDashboardUtilsInstance);
-
         const projectListComponentInstance = new ProjectListComponent({
             projectManager,
             eventHandlers,
             modalManager,
             app,
-            router: {
-                navigate: (url) => {
-                    notify.debug('[App] ProjectList router.navigate called with URL:', { urlToPush: url, currentWindowLocation: browserAPI.getLocation().href });
-                    browserAPI.getHistory().pushState({}, '', url);
-                    domAPI.dispatchEvent(browserAPI.getWindow(), new Event('locationchange'));
-                },
-                getURL: () => browserAPI.getLocation().href
-            },
             notify,
             storage: DependencySystem.modules.get('storage'),
             sanitizer: DependencySystem.modules.get('sanitizer'),
@@ -721,13 +715,6 @@
         if (!projectDashboardInstance)
           throw new Error('[UI init] projectDashboard instance missing â€‘ core mis-init');

-        // Details component expects DI with proper router methods
-        const detailsRouter = {
-            navigate: (url) => {
-                browserAPI.getHistory().pushState({}, '', url);
-                domAPI.dispatchEvent(browserAPI.getWindow(), new Event('locationchange'));
-            },
-            getURL: () => browserAPI.getLocation().href
-        };
-
         // const authModule = DependencySystem.modules.get('auth'); // Ensure authModule is defined - Already defined and registered
         // const projectManager = DependencySystem.modules.get('projectManager'); // Ensure projectManager is defined - Already defined and registered
         // const apiRequest = DependencySystem.modules.get('apiRequest'); // Ensure apiRequest is defined - Already defined and registered
@@ -746,7 +733,6 @@
             eventHandlers,
             modalManager,
             FileUploadComponentClass: fileUploadComponentClass,
-            router: detailsRouter,
             domAPI,
             notify,
             sanitizer: DependencySystem.modules.get('sanitizer'),
@@ -756,12 +742,8 @@
             modelConfig: modelConfigInstance,
             knowledgeBaseComponent: knowledgeBaseComponentInstance, // Wire KB component
             onBack: async () => {
-                let pd;
-                try {
-                    pd = await DependencySystem.waitFor('projectDashboard');
-                } catch (err) {
-                    notify.error('[App] Dependency not met: projectDashboard', { error: err });
-                    throw err;
-                }
-                pd?.showProjectList?.();
+                const navService = DependencySystem.modules.get('navigationService');
+                navService?.navigateToProjectList();
             }
         });
         DependencySystem.register('projectDetailsComponent', projectDetailsComponentInstance);
