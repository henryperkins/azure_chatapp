bc4436c05275b2d3a459368e74c13028
"use strict";

var _FileUploadComponent = require("../../static/js/FileUploadComponent.js");
function createDependencySystem() {
  const modules = new Map();
  return {
    modules,
    register(n, v) {
      modules.set(n, v);
    }
  };
}
const stubDomAPI = {
  querySelector: () => ({
    disabled: false,
    classList: {
      add() {},
      remove() {}
    }
  }),
  addClass() {},
  removeClass() {},
  setProperty() {},
  getWindow: () => ({}),
  getDocument: () => ({
    addEventListener() {},
    removeEventListener() {}
  }),
  dispatchEvent() {}
};
const stubEventHandlers = {
  DependencySystem: null,
  // will be wired after creation
  trackListener(target, event, handler, options) {
    // Actually register the event listener for testing
    if (target && typeof target.addEventListener === 'function') {
      target.addEventListener(event, handler, options);
    }
  },
  cleanupListeners() {},
  createCustomEvent: (n, d) => ({
    type: n,
    detail: d
  })
};
describe('FileUploadComponent â€“ AuthBus compliance', () => {
  test('disables and re-enables inputs on auth state change', async () => {
    const DS = createDependencySystem();
    stubEventHandlers.DependencySystem = DS;
    const authBus = new EventTarget();
    if (typeof global.CustomEvent !== 'function') {
      global.CustomEvent = class CustomEvent {
        constructor(name, opts) {
          this.type = name;
          this.detail = opts?.detail;
        }
      };
    }
    DS.register('auth', {
      AuthBus: authBus
    });
    DS.register('AppBus', new EventTarget());
    const logger = {
      debug() {},
      info() {},
      warn() {},
      error() {}
    };
    const fileInputEl = {
      disabled: false,
      classList: {
        add() {},
        remove() {}
      }
    };
    const uploadBtnEl = {
      disabled: false,
      classList: {
        add() {},
        remove() {}
      }
    };
    const dragZoneEl = {
      disabled: false,
      classList: {
        add() {},
        remove() {}
      }
    };
    const uploadProgressEl = {
      disabled: false,
      classList: {
        add() {},
        remove() {}
      }
    };
    const progressBarEl = {
      disabled: false,
      classList: {
        add() {},
        remove() {}
      }
    };
    const uploadStatusEl = {
      disabled: false,
      classList: {
        add() {},
        remove() {}
      }
    };

    // Override domAPI.querySelector to return stub elements in sequence matching _findElements order
    let callIndex = 0;
    const elementsArr = [fileInputEl,
    // fileInput
    uploadBtnEl,
    // uploadBtn
    dragZoneEl,
    // dragZone
    uploadProgressEl,
    // uploadProgress
    progressBarEl,
    // progressBar
    uploadStatusEl,
    // uploadStatus
    {} // indexKbCheckbox (optional)
    ];
    stubDomAPI.querySelector = () => elementsArr[callIndex++] || {};
    const eventServiceStub = {
      emit: () => {},
      on: () => {},
      off: () => {}
    };
    const component = (0, _FileUploadComponent.createFileUploadComponent)({
      app: {
        validateUUID: () => true
      },
      eventHandlers: stubEventHandlers,
      projectManager: {},
      domAPI: stubDomAPI,
      logger,
      eventService: eventServiceStub,
      domReadinessService: {
        dependenciesAndElements: () => Promise.resolve()
      },
      scheduler: {
        setTimeout: () => {},
        clearTimeout: () => {}
      }
    });
    await component.init();

    // Trigger logout
    authBus.dispatchEvent(new CustomEvent('authStateChanged', {
      detail: {
        authenticated: false
      }
    }));
    await new Promise(resolve => setTimeout(resolve, 0)); // Allow async operations
    expect(fileInputEl.disabled).toBe(true);

    // Trigger login
    authBus.dispatchEvent(new CustomEvent('authStateChanged', {
      detail: {
        authenticated: true
      }
    }));
    await new Promise(resolve => setTimeout(resolve, 0)); // Allow async operations
    expect(fileInputEl.disabled).toBe(false);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,