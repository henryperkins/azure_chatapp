63610eb86edcd0158e8aa9f92e67545e
"use strict";

var _appInitializer = require("../../static/js/init/appInitializer.js");
/**
 * Basic smoke test for createAppInitializer
 * ----------------------------------------------------------
 * Verifies that the bootstrap sequence resolves without
 * throwing given a minimal set of stubbed dependencies.
 * This is intended to detect regressions where new mandatory
 * DI parameters are added to appInitializer without updating
 * downstream boot scripts or tests.
 */

function createMockDependencySystem() {
  const modules = new Map();
  return {
    modules,
    register: (key, value) => modules.set(key, value),
    get: key => modules.get(key)
  };
}
function createStubBrowserService() {
  const win = {
    setTimeout: fn => fn && fn(),
    clearTimeout: () => {},
    EventTarget,
    performance: {
      now: () => 0
    },
    crypto: {
      randomUUID: () => '00000000-0000-4000-8000-000000000000'
    },
    DOMPurify: {
      sanitize: html => html
    },
    Event: function () {}
  };
  const doc = {
    readyState: 'complete',
    addEventListener: () => {},
    removeEventListener: () => {},
    getElementById: () => null,
    querySelector: () => null,
    createElement: () => ({
      style: {}
    }),
    body: {
      appendChild: () => {},
      removeChild: () => {}
    }
  };
  win.document = doc;
  return {
    getWindow: () => win,
    getDocument: () => doc,
    setTimeout: win.setTimeout,
    clearTimeout: win.clearTimeout
  };
}
function createNoopFactory() {
  return () => ({
    cleanup() {}
  });
}
test('appInitializer completes bootstrap without error', async () => {
  const DependencySystem = createMockDependencySystem();
  const appInit = (0, _appInitializer.createAppInitializer)({
    DependencySystem,
    browserService: createStubBrowserService(),
    createChatManager: createNoopFactory(),
    createApiEndpoints: () => ({
      endpoints: {},
      cleanup() {}
    }),
    MODAL_MAPPINGS: {},
    APP_CONFIG: {
      TIMEOUTS: {
        DOM_READY: 1000
      }
    }
  });
  await expect(appInit.initializeApp()).resolves.not.toThrow();
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfYXBwSW5pdGlhbGl6ZXIiLCJyZXF1aXJlIiwiY3JlYXRlTW9ja0RlcGVuZGVuY3lTeXN0ZW0iLCJtb2R1bGVzIiwiTWFwIiwicmVnaXN0ZXIiLCJrZXkiLCJ2YWx1ZSIsInNldCIsImdldCIsImNyZWF0ZVN0dWJCcm93c2VyU2VydmljZSIsIndpbiIsInNldFRpbWVvdXQiLCJmbiIsImNsZWFyVGltZW91dCIsIkV2ZW50VGFyZ2V0IiwicGVyZm9ybWFuY2UiLCJub3ciLCJjcnlwdG8iLCJyYW5kb21VVUlEIiwiRE9NUHVyaWZ5Iiwic2FuaXRpemUiLCJodG1sIiwiRXZlbnQiLCJkb2MiLCJyZWFkeVN0YXRlIiwiYWRkRXZlbnRMaXN0ZW5lciIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJnZXRFbGVtZW50QnlJZCIsInF1ZXJ5U2VsZWN0b3IiLCJjcmVhdGVFbGVtZW50Iiwic3R5bGUiLCJib2R5IiwiYXBwZW5kQ2hpbGQiLCJyZW1vdmVDaGlsZCIsImRvY3VtZW50IiwiZ2V0V2luZG93IiwiZ2V0RG9jdW1lbnQiLCJjcmVhdGVOb29wRmFjdG9yeSIsImNsZWFudXAiLCJ0ZXN0IiwiRGVwZW5kZW5jeVN5c3RlbSIsImFwcEluaXQiLCJjcmVhdGVBcHBJbml0aWFsaXplciIsImJyb3dzZXJTZXJ2aWNlIiwiY3JlYXRlQ2hhdE1hbmFnZXIiLCJjcmVhdGVBcGlFbmRwb2ludHMiLCJlbmRwb2ludHMiLCJNT0RBTF9NQVBQSU5HUyIsIkFQUF9DT05GSUciLCJUSU1FT1VUUyIsIkRPTV9SRUFEWSIsImV4cGVjdCIsImluaXRpYWxpemVBcHAiLCJyZXNvbHZlcyIsIm5vdCIsInRvVGhyb3ciXSwic291cmNlcyI6WyJhcHBpbml0aWFsaXplci1iYXNpYy50ZXN0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQmFzaWMgc21va2UgdGVzdCBmb3IgY3JlYXRlQXBwSW5pdGlhbGl6ZXJcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIFZlcmlmaWVzIHRoYXQgdGhlIGJvb3RzdHJhcCBzZXF1ZW5jZSByZXNvbHZlcyB3aXRob3V0XG4gKiB0aHJvd2luZyBnaXZlbiBhIG1pbmltYWwgc2V0IG9mIHN0dWJiZWQgZGVwZW5kZW5jaWVzLlxuICogVGhpcyBpcyBpbnRlbmRlZCB0byBkZXRlY3QgcmVncmVzc2lvbnMgd2hlcmUgbmV3IG1hbmRhdG9yeVxuICogREkgcGFyYW1ldGVycyBhcmUgYWRkZWQgdG8gYXBwSW5pdGlhbGl6ZXIgd2l0aG91dCB1cGRhdGluZ1xuICogZG93bnN0cmVhbSBib290IHNjcmlwdHMgb3IgdGVzdHMuXG4gKi9cblxuaW1wb3J0IHsgY3JlYXRlQXBwSW5pdGlhbGl6ZXIgfSBmcm9tICcuLi8uLi9zdGF0aWMvanMvaW5pdC9hcHBJbml0aWFsaXplci5qcyc7XG5cbmZ1bmN0aW9uIGNyZWF0ZU1vY2tEZXBlbmRlbmN5U3lzdGVtICgpIHtcbiAgY29uc3QgbW9kdWxlcyA9IG5ldyBNYXAoKTtcbiAgcmV0dXJuIHtcbiAgICBtb2R1bGVzLFxuICAgIHJlZ2lzdGVyOiAoa2V5LCB2YWx1ZSkgPT4gbW9kdWxlcy5zZXQoa2V5LCB2YWx1ZSksXG4gICAgZ2V0OiAoa2V5KSA9PiBtb2R1bGVzLmdldChrZXkpXG4gIH07XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVN0dWJCcm93c2VyU2VydmljZSAoKSB7XG4gIGNvbnN0IHdpbiA9IHtcbiAgICBzZXRUaW1lb3V0OiAoZm4pID0+IGZuICYmIGZuKCksXG4gICAgY2xlYXJUaW1lb3V0OiAoKSA9PiB7fSxcbiAgICBFdmVudFRhcmdldCxcbiAgICBwZXJmb3JtYW5jZTogeyBub3c6ICgpID0+IDAgfSxcbiAgICBjcnlwdG86IHsgcmFuZG9tVVVJRDogKCkgPT4gJzAwMDAwMDAwLTAwMDAtNDAwMC04MDAwLTAwMDAwMDAwMDAwMCcgfSxcbiAgICBET01QdXJpZnk6IHsgc2FuaXRpemU6IChodG1sKSA9PiBodG1sIH0sXG4gICAgRXZlbnQ6IGZ1bmN0aW9uICgpIHt9XG4gIH07XG4gIGNvbnN0IGRvYyA9IHtcbiAgICByZWFkeVN0YXRlOiAnY29tcGxldGUnLFxuICAgIGFkZEV2ZW50TGlzdGVuZXI6ICgpID0+IHt9LFxuICAgIHJlbW92ZUV2ZW50TGlzdGVuZXI6ICgpID0+IHt9LFxuICAgIGdldEVsZW1lbnRCeUlkOiAoKSA9PiBudWxsLFxuICAgIHF1ZXJ5U2VsZWN0b3I6ICgpID0+IG51bGwsXG4gICAgY3JlYXRlRWxlbWVudDogKCkgPT4gKHsgc3R5bGU6IHt9IH0pLFxuICAgIGJvZHk6IHsgYXBwZW5kQ2hpbGQ6ICgpID0+IHt9LCByZW1vdmVDaGlsZDogKCkgPT4ge30gfVxuICB9O1xuICB3aW4uZG9jdW1lbnQgPSBkb2M7XG5cbiAgcmV0dXJuIHtcbiAgICBnZXRXaW5kb3c6ICgpID0+IHdpbixcbiAgICBnZXREb2N1bWVudDogKCkgPT4gZG9jLFxuICAgIHNldFRpbWVvdXQ6IHdpbi5zZXRUaW1lb3V0LFxuICAgIGNsZWFyVGltZW91dDogd2luLmNsZWFyVGltZW91dFxuICB9O1xufVxuXG5mdW5jdGlvbiBjcmVhdGVOb29wRmFjdG9yeSAoKSB7XG4gIHJldHVybiAoKSA9PiAoeyBjbGVhbnVwICgpIHt9IH0pO1xufVxuXG50ZXN0KCdhcHBJbml0aWFsaXplciBjb21wbGV0ZXMgYm9vdHN0cmFwIHdpdGhvdXQgZXJyb3InLCBhc3luYyAoKSA9PiB7XG4gIGNvbnN0IERlcGVuZGVuY3lTeXN0ZW0gPSBjcmVhdGVNb2NrRGVwZW5kZW5jeVN5c3RlbSgpO1xuXG4gIGNvbnN0IGFwcEluaXQgPSBjcmVhdGVBcHBJbml0aWFsaXplcih7XG4gICAgRGVwZW5kZW5jeVN5c3RlbSxcbiAgICBicm93c2VyU2VydmljZTogY3JlYXRlU3R1YkJyb3dzZXJTZXJ2aWNlKCksXG4gICAgY3JlYXRlQ2hhdE1hbmFnZXI6IGNyZWF0ZU5vb3BGYWN0b3J5KCksXG4gICAgY3JlYXRlQXBpRW5kcG9pbnRzOiAoKSA9PiAoe1xuICAgICAgZW5kcG9pbnRzOiB7fSxcbiAgICAgIGNsZWFudXAgKCkge31cbiAgICB9KSxcbiAgICBNT0RBTF9NQVBQSU5HUzoge30sXG4gICAgQVBQX0NPTkZJRzoge1xuICAgICAgVElNRU9VVFM6IHsgRE9NX1JFQURZOiAxMDAwIH1cbiAgICB9XG4gIH0pO1xuXG4gIGF3YWl0IGV4cGVjdChhcHBJbml0LmluaXRpYWxpemVBcHAoKSkucmVzb2x2ZXMubm90LnRvVGhyb3coKTtcbn0pO1xuIl0sIm1hcHBpbmdzIjoiOztBQVVBLElBQUFBLGVBQUEsR0FBQUMsT0FBQTtBQVZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFJQSxTQUFTQywwQkFBMEJBLENBQUEsRUFBSTtFQUNyQyxNQUFNQyxPQUFPLEdBQUcsSUFBSUMsR0FBRyxDQUFDLENBQUM7RUFDekIsT0FBTztJQUNMRCxPQUFPO0lBQ1BFLFFBQVEsRUFBRUEsQ0FBQ0MsR0FBRyxFQUFFQyxLQUFLLEtBQUtKLE9BQU8sQ0FBQ0ssR0FBRyxDQUFDRixHQUFHLEVBQUVDLEtBQUssQ0FBQztJQUNqREUsR0FBRyxFQUFHSCxHQUFHLElBQUtILE9BQU8sQ0FBQ00sR0FBRyxDQUFDSCxHQUFHO0VBQy9CLENBQUM7QUFDSDtBQUVBLFNBQVNJLHdCQUF3QkEsQ0FBQSxFQUFJO0VBQ25DLE1BQU1DLEdBQUcsR0FBRztJQUNWQyxVQUFVLEVBQUdDLEVBQUUsSUFBS0EsRUFBRSxJQUFJQSxFQUFFLENBQUMsQ0FBQztJQUM5QkMsWUFBWSxFQUFFQSxDQUFBLEtBQU0sQ0FBQyxDQUFDO0lBQ3RCQyxXQUFXO0lBQ1hDLFdBQVcsRUFBRTtNQUFFQyxHQUFHLEVBQUVBLENBQUEsS0FBTTtJQUFFLENBQUM7SUFDN0JDLE1BQU0sRUFBRTtNQUFFQyxVQUFVLEVBQUVBLENBQUEsS0FBTTtJQUF1QyxDQUFDO0lBQ3BFQyxTQUFTLEVBQUU7TUFBRUMsUUFBUSxFQUFHQyxJQUFJLElBQUtBO0lBQUssQ0FBQztJQUN2Q0MsS0FBSyxFQUFFLFNBQUFBLENBQUEsRUFBWSxDQUFDO0VBQ3RCLENBQUM7RUFDRCxNQUFNQyxHQUFHLEdBQUc7SUFDVkMsVUFBVSxFQUFFLFVBQVU7SUFDdEJDLGdCQUFnQixFQUFFQSxDQUFBLEtBQU0sQ0FBQyxDQUFDO0lBQzFCQyxtQkFBbUIsRUFBRUEsQ0FBQSxLQUFNLENBQUMsQ0FBQztJQUM3QkMsY0FBYyxFQUFFQSxDQUFBLEtBQU0sSUFBSTtJQUMxQkMsYUFBYSxFQUFFQSxDQUFBLEtBQU0sSUFBSTtJQUN6QkMsYUFBYSxFQUFFQSxDQUFBLE1BQU87TUFBRUMsS0FBSyxFQUFFLENBQUM7SUFBRSxDQUFDLENBQUM7SUFDcENDLElBQUksRUFBRTtNQUFFQyxXQUFXLEVBQUVBLENBQUEsS0FBTSxDQUFDLENBQUM7TUFBRUMsV0FBVyxFQUFFQSxDQUFBLEtBQU0sQ0FBQztJQUFFO0VBQ3ZELENBQUM7RUFDRHZCLEdBQUcsQ0FBQ3dCLFFBQVEsR0FBR1gsR0FBRztFQUVsQixPQUFPO0lBQ0xZLFNBQVMsRUFBRUEsQ0FBQSxLQUFNekIsR0FBRztJQUNwQjBCLFdBQVcsRUFBRUEsQ0FBQSxLQUFNYixHQUFHO0lBQ3RCWixVQUFVLEVBQUVELEdBQUcsQ0FBQ0MsVUFBVTtJQUMxQkUsWUFBWSxFQUFFSCxHQUFHLENBQUNHO0VBQ3BCLENBQUM7QUFDSDtBQUVBLFNBQVN3QixpQkFBaUJBLENBQUEsRUFBSTtFQUM1QixPQUFPLE9BQU87SUFBRUMsT0FBT0EsQ0FBQSxFQUFJLENBQUM7RUFBRSxDQUFDLENBQUM7QUFDbEM7QUFFQUMsSUFBSSxDQUFDLGtEQUFrRCxFQUFFLFlBQVk7RUFDbkUsTUFBTUMsZ0JBQWdCLEdBQUd2QywwQkFBMEIsQ0FBQyxDQUFDO0VBRXJELE1BQU13QyxPQUFPLEdBQUcsSUFBQUMsb0NBQW9CLEVBQUM7SUFDbkNGLGdCQUFnQjtJQUNoQkcsY0FBYyxFQUFFbEMsd0JBQXdCLENBQUMsQ0FBQztJQUMxQ21DLGlCQUFpQixFQUFFUCxpQkFBaUIsQ0FBQyxDQUFDO0lBQ3RDUSxrQkFBa0IsRUFBRUEsQ0FBQSxNQUFPO01BQ3pCQyxTQUFTLEVBQUUsQ0FBQyxDQUFDO01BQ2JSLE9BQU9BLENBQUEsRUFBSSxDQUFDO0lBQ2QsQ0FBQyxDQUFDO0lBQ0ZTLGNBQWMsRUFBRSxDQUFDLENBQUM7SUFDbEJDLFVBQVUsRUFBRTtNQUNWQyxRQUFRLEVBQUU7UUFBRUMsU0FBUyxFQUFFO01BQUs7SUFDOUI7RUFDRixDQUFDLENBQUM7RUFFRixNQUFNQyxNQUFNLENBQUNWLE9BQU8sQ0FBQ1csYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDQyxRQUFRLENBQUNDLEdBQUcsQ0FBQ0MsT0FBTyxDQUFDLENBQUM7QUFDOUQsQ0FBQyxDQUFDIiwiaWdub3JlTGlzdCI6W119