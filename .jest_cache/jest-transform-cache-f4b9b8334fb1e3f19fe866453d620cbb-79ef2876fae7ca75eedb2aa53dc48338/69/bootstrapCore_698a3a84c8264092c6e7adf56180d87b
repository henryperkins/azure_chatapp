a6d74d8be2fda7d82aa312d4822c9af6
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createBootstrapCore = createBootstrapCore;
var _domAPI = require("../../utils/domAPI.js");
var _eventHandler = require("../../eventHandler.js");
var _safeHandler = require("../../safeHandler.js");
var _domReadinessService = require("../../utils/domReadinessService.js");
var _logger = require("../../logger.js");
var _polyfillCustomEvent = require("../../utils/polyfillCustomEvent.js");
var _eventService = require("../../services/eventService.js");
var _uiStateService = require("../../uiStateService.js");
var _session = require("../../utils/session.js");
var _tokenStatsManagerProxy = require("../../tokenStatsManagerProxy.js");
var _authFormHandler = require("../../authFormHandler.js");
var _authApiService = require("../../authApiService.js");
var _authStateManager = require("../../authStateManager.js");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (const t in e) "default" !== t && {}.hasOwnProperty.call(e, t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, t)) && (i.get || i.set) ? o(f, t, i) : f[t] = e[t]); return f; })(e, t); } // ========================================
// FILE: /initialization/bootstrap/bootstrapCore.js
// ========================================
/**
 * Core Bootstrap Logic
 * Handles circular dependency resolution and early service setup
 * Extracted from initialDISetup()
 */ // Statically import modules that were previously loaded with dynamic `import()`.
function createBootstrapCore(opts) {
  const {
    DependencySystem,
    browserService,
    APP_CONFIG
  } = opts;

  /**
   * Bootstrap core services with circular dependency resolution
   */
  function initializeCoreServices() {
    // 1. Attach browserService to session for backward-compatibility
    (0, _session.setBrowserService)(browserService);

    // 2. Ensure DOMPurify (sanitizer) is available.
    // If it does not exist yet, attempt to lazily create it using the
    // injected `createDOMPurifyGlobal` factory (added to opts by
    // app.js).  This preserves the original safety check while avoiding
    // a hard-failure during early bootstrap ordering.

    let sanitizer = browserService?.getWindow?.()?.DOMPurify;
    if (!sanitizer) {
      const {
        createDOMPurifyGlobal
      } = opts;
      if (typeof createDOMPurifyGlobal === 'function') {
        try {
          createDOMPurifyGlobal({
            browserService
          });
          sanitizer = browserService?.getWindow?.()?.DOMPurify;
        } catch (err) {
          /* eslint-disable no-empty */
        }
      }
    }
    if (!sanitizer) {
      throw new Error('[appInitializer] DOMPurify not found â€” cannot proceed (security requirement).');
    }

    // 3. Create domAPI BEFORE logger/eventHandlers
    const domAPI = (0, _domAPI.createDomAPI)({
      documentObject: browserService.getDocument(),
      windowObject: browserService.getWindow(),
      debug: APP_CONFIG?.DEBUG === true,
      sanitizer
    });

    // 4. Bootstrap logger with stub pattern for circular dependency

    // Bootstrap minimal safeHandler stub for pre-logger DI
    function stubSafeHandler(fn, _description) {
      if (typeof fn !== 'function') return () => {};
      return function (...args) {
        try {
          return fn.apply(this, args);
        } catch {/* intentionally ignored */}
      };
    }
    let logger;

    // Create eventHandlers with stub logger
    const eventHandlers = (0, _eventHandler.createEventHandlers)({
      DependencySystem,
      domAPI,
      browserService,
      APP_CONFIG,
      safeHandler: stubSafeHandler,
      sanitizer,
      errorReporter: {
        report: (...args) => logger ? logger.error('[errorReporter]', ...args) : undefined
      },
      logger: {
        debug: () => {},
        info: () => {},
        warn: () => {},
        error: () => {},
        log: () => {}
      }
    });

    // Create real logger
    logger = (0, _logger.createLogger)({
      context: 'App',
      debug: APP_CONFIG?.DEBUG === true,
      minLevel: APP_CONFIG?.LOGGING?.MIN_LEVEL || 'info',
      consoleEnabled: APP_CONFIG?.LOGGING?.CONSOLE_ENABLED !== false,
      sessionIdProvider: _session.getSessionId,
      domAPI,
      browserService,
      eventHandlers
    });

    // Create custom event polyfill
    const {
      cleanup: customEventPolyfillCleanup
    } = (0, _polyfillCustomEvent.createCustomEventPolyfill)({
      browserService,
      logger
    });
    DependencySystem.register('customEventPolyfill', {
      cleanup: customEventPolyfillCleanup
    });

    // Wire logger into eventHandlers
    if (typeof eventHandlers.setLogger === 'function') {
      eventHandlers.setLogger(logger);
    }

    // Create error reporter
    const errorReporter = {
      report(error, ctx = {}) {
        if (logger) {
          logger.error('[errorReporter] reported', error, {
            context: 'errorReporter',
            ...ctx
          });
        } else if (typeof console !== 'undefined') {
          console.error('[errorReporter] reported', error, ctx);
        }
      }
    };

    // Wire logger into domAPI
    if (typeof domAPI.setLogger === 'function') {
      domAPI.setLogger(logger);
    }

    // Create real safeHandler with logger
    const {
      safeHandler
    } = (0, _safeHandler.createSafeHandler)({
      logger
    });

    // Upgrade eventHandlers with real safeHandler
    if (typeof eventHandlers.setSafeHandler === 'function') {
      eventHandlers.setSafeHandler(safeHandler);
    }

    // Register core objects into DependencySystem
    DependencySystem.register('browserService', browserService);
    DependencySystem.register('logger', logger);
    DependencySystem.register('sanitizer', sanitizer);
    DependencySystem.register('domPurify', sanitizer); // legacy alias
    DependencySystem.register('safeHandler', safeHandler);
    DependencySystem.register('createChatManager', opts.createChatManager);
    DependencySystem.register('domAPI', domAPI);
    DependencySystem.register('eventHandlers', eventHandlers);
    DependencySystem.register('errorReporter', errorReporter);

    // Setup domReadinessService
    const domReadinessService = (0, _domReadinessService.createDomReadinessService)({
      DependencySystem,
      domAPI,
      browserService,
      eventHandlers,
      APP_CONFIG,
      logger
    });
    DependencySystem.register('domReadinessService', domReadinessService);
    eventHandlers.setDomReadinessService(domReadinessService);

    // Create event bus and services
    const AppBus = new EventTarget();
    DependencySystem.register('AppBus', AppBus);
    const eventService = (0, _eventService.createEventService)({
      DependencySystem,
      logger,
      eventHandlers,
      existingBus: AppBus
    });
    DependencySystem.register('eventService', eventService);

    // Legacy aliases
    if (!DependencySystem.modules.get('eventBus')) {
      DependencySystem.register('eventBus', AppBus);
    }
    if (!DependencySystem.modules.get('AuthBus')) {
      DependencySystem.register('AuthBus', AppBus);
    }

    // UI utilities
    const uiUtils = {
      formatBytes: opts.globalFormatBytes,
      formatDate: opts.globalFormatDate,
      fileIcon: opts.globalFileIcon
    };
    const globalUtils = {
      shouldSkipDedup: opts.shouldSkipDedup,
      stableStringify: opts.stableStringify,
      normaliseUrl: browserService.normaliseUrl || null,
      isAbsoluteUrl: opts.isAbsoluteUrl,
      isValidProjectId: opts.isValidProjectId
    };

    // Register token stats proxy
    const tokenStatsProxy = (0, _tokenStatsManagerProxy.createTokenStatsManagerProxy)({
      DependencySystem,
      logger
    });
    DependencySystem.register('tokenStatsManagerProxy', tokenStatsProxy);
    // Alias: expose proxy under canonical name so downstream modules can
    // safely `modules.get('tokenStatsManager')` before the real manager is
    // ready.  uiInit later replaces this entry with the concrete
    // implementation.
    if (!DependencySystem.modules.get('tokenStatsManager')) {
      DependencySystem.register('tokenStatsManager', tokenStatsProxy);
    }

    // UI State Service
    const uiStateService = (0, _uiStateService.createUIStateService)({
      logger
    });
    DependencySystem.register('uiStateService', uiStateService);

    // Register auth component factories
    const authFormHandler = (0, _authFormHandler.createAuthFormHandler)({
      domAPI,
      sanitizer,
      eventHandlers,
      logger,
      safeHandler
    });
    DependencySystem.register('authFormHandler', authFormHandler);

    // AuthApiService requires a functional apiClient and apiEndpoints.
    // These are only available after serviceInit's basic & advanced
    // registrations.  Therefore we register *a factory wrapper* that can
    // lazily create the real service on first access, once the
    // dependencies exist.  This prevents an early boot failure while
    // keeping the module name reserved in the DI container.

    function _tryCreateAuthApiService() {
      let instance = DependencySystem.modules.get('__authApiServiceReal');
      if (instance) return instance;
      const apiClient = DependencySystem.modules.get('apiRequest') || DependencySystem.modules.get('apiClient');
      const apiEndpoints = DependencySystem.modules.get('apiEndpoints') || opts.apiEndpoints;
      if (!apiClient || !apiEndpoints) {
        return null; // dependencies not ready yet
      }
      instance = (0, _authApiService.createAuthApiService)({
        apiClient,
        apiEndpoints,
        logger,
        browserService
      });
      DependencySystem.register('__authApiServiceReal', instance);
      return instance;
    }
    const authApiServiceProxy = new Proxy({}, {
      get(_target, prop) {
        const inst = _tryCreateAuthApiService();
        if (inst) {
          const value = inst[prop];
          return typeof value === 'function' ? value.bind(inst) : value;
        }
        // Not ready yet â€“ return noop to avoid hard crash
        if (prop === 'toString' || prop === Symbol.toPrimitive) {
          return () => '[authApiServiceProxy:unready]';
        }
        return () => {
          throw new Error('[authApiServiceProxy] AuthApiService not ready yet');
        };
      },
      set(_target, prop, value) {
        const inst = _tryCreateAuthApiService();
        if (inst) {
          inst[prop] = value;
        }
        return true;
      }
    });
    DependencySystem.register('authApiService', authApiServiceProxy);
    const authStateManager = (0, _authStateManager.createAuthStateManager)({
      eventService,
      logger,
      browserService,
      storageService: null // will be set later
    });
    DependencySystem.register('authStateManager', authStateManager);

    // Return all created services
    // Start background factory registration (non-blocking)
    try {
      // Intentionally not awaited â€“ side-effects only.
      registerFactories();
    } catch (err) {
      logger.warn('[bootstrapCore] registerFactories() failed', err, {
        context: 'bootstrapCore:registerFactories'
      });
    }
    return {
      logger,
      eventHandlers,
      domAPI,
      safeHandler,
      sanitizer,
      domReadinessService,
      uiUtils,
      globalUtils,
      getSessionId: _session.getSessionId,
      eventService,
      errorReporter
    };
  }

  /**
   * Register factory functions in DI container
   */
  function registerFactories() {
    const factoriesToRegister = ['KBManagerFactory', 'KBSearchHandlerFactory', 'PollingServiceFactory', 'chatUIEnhancementsFactory',
    // Phase-2 factories
    'createChatUIController', 'createConversationManager', 'createMessageHandler', 'createProjectDetailsRenderer', 'createProjectDataCoordinator', 'createProjectEventHandlers'];

    // Import and register KB factories
    Promise.resolve().then(() => _interopRequireWildcard(require("../../knowledgeBaseManager.js"))).then(m => {
      if (!DependencySystem.modules.get('KBManagerFactory')) {
        DependencySystem.register('KBManagerFactory', m.createKnowledgeBaseManager);
      }
    });
    Promise.resolve().then(() => _interopRequireWildcard(require("../../knowledgeBaseSearchHandler.js"))).then(m => {
      if (!DependencySystem.modules.get('KBSearchHandlerFactory')) {
        DependencySystem.register('KBSearchHandlerFactory', m.createKnowledgeBaseSearchHandler);
      }
    });
    Promise.resolve().then(() => _interopRequireWildcard(require("../../pollingService.js"))).then(m => {
      if (!DependencySystem.modules.get('PollingServiceFactory')) {
        DependencySystem.register('PollingServiceFactory', m.createPollingService);
      }
    });
    Promise.resolve().then(() => _interopRequireWildcard(require("../../chatUIEnhancements.js"))).then(m => {
      if (!DependencySystem.modules.get('chatUIEnhancementsFactory')) {
        DependencySystem.register('chatUIEnhancementsFactory', m.createChatUIEnhancements);
      }
    });
  }
  return {
    initializeCoreServices,
    registerFactories
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZG9tQVBJIiwicmVxdWlyZSIsIl9ldmVudEhhbmRsZXIiLCJfc2FmZUhhbmRsZXIiLCJfZG9tUmVhZGluZXNzU2VydmljZSIsIl9sb2dnZXIiLCJfcG9seWZpbGxDdXN0b21FdmVudCIsIl9ldmVudFNlcnZpY2UiLCJfdWlTdGF0ZVNlcnZpY2UiLCJfc2Vzc2lvbiIsIl90b2tlblN0YXRzTWFuYWdlclByb3h5IiwiX2F1dGhGb3JtSGFuZGxlciIsIl9hdXRoQXBpU2VydmljZSIsIl9hdXRoU3RhdGVNYW5hZ2VyIiwiX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQiLCJlIiwidCIsIldlYWtNYXAiLCJyIiwibiIsIl9fZXNNb2R1bGUiLCJvIiwiaSIsImYiLCJfX3Byb3RvX18iLCJkZWZhdWx0IiwiaGFzIiwiZ2V0Iiwic2V0IiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJjcmVhdGVCb290c3RyYXBDb3JlIiwib3B0cyIsIkRlcGVuZGVuY3lTeXN0ZW0iLCJicm93c2VyU2VydmljZSIsIkFQUF9DT05GSUciLCJpbml0aWFsaXplQ29yZVNlcnZpY2VzIiwicmVnaXN0ZXJTZXNzaW9uQnJvd3NlclNlcnZpY2UiLCJzYW5pdGl6ZXIiLCJnZXRXaW5kb3ciLCJET01QdXJpZnkiLCJjcmVhdGVET01QdXJpZnlHbG9iYWwiLCJlcnIiLCJFcnJvciIsImRvbUFQSSIsImNyZWF0ZURvbUFQSSIsImRvY3VtZW50T2JqZWN0IiwiZ2V0RG9jdW1lbnQiLCJ3aW5kb3dPYmplY3QiLCJkZWJ1ZyIsIkRFQlVHIiwic3R1YlNhZmVIYW5kbGVyIiwiZm4iLCJfZGVzY3JpcHRpb24iLCJhcmdzIiwiYXBwbHkiLCJsb2dnZXIiLCJldmVudEhhbmRsZXJzIiwiY3JlYXRlRXZlbnRIYW5kbGVycyIsInNhZmVIYW5kbGVyIiwiZXJyb3JSZXBvcnRlciIsInJlcG9ydCIsImVycm9yIiwidW5kZWZpbmVkIiwiaW5mbyIsIndhcm4iLCJsb2ciLCJjcmVhdGVMb2dnZXIiLCJjb250ZXh0IiwibWluTGV2ZWwiLCJMT0dHSU5HIiwiTUlOX0xFVkVMIiwiY29uc29sZUVuYWJsZWQiLCJDT05TT0xFX0VOQUJMRUQiLCJzZXNzaW9uSWRQcm92aWRlciIsImNvcmVHZXRTZXNzaW9uSWQiLCJjbGVhbnVwIiwiY3VzdG9tRXZlbnRQb2x5ZmlsbENsZWFudXAiLCJjcmVhdGVDdXN0b21FdmVudFBvbHlmaWxsIiwicmVnaXN0ZXIiLCJzZXRMb2dnZXIiLCJjdHgiLCJjb25zb2xlIiwiY3JlYXRlU2FmZUhhbmRsZXIiLCJzZXRTYWZlSGFuZGxlciIsImNyZWF0ZUNoYXRNYW5hZ2VyIiwiZG9tUmVhZGluZXNzU2VydmljZSIsImNyZWF0ZURvbVJlYWRpbmVzc1NlcnZpY2UiLCJzZXREb21SZWFkaW5lc3NTZXJ2aWNlIiwiQXBwQnVzIiwiRXZlbnRUYXJnZXQiLCJldmVudFNlcnZpY2UiLCJjcmVhdGVFdmVudFNlcnZpY2UiLCJleGlzdGluZ0J1cyIsIm1vZHVsZXMiLCJ1aVV0aWxzIiwiZm9ybWF0Qnl0ZXMiLCJnbG9iYWxGb3JtYXRCeXRlcyIsImZvcm1hdERhdGUiLCJnbG9iYWxGb3JtYXREYXRlIiwiZmlsZUljb24iLCJnbG9iYWxGaWxlSWNvbiIsImdsb2JhbFV0aWxzIiwic2hvdWxkU2tpcERlZHVwIiwic3RhYmxlU3RyaW5naWZ5Iiwibm9ybWFsaXNlVXJsIiwiaXNBYnNvbHV0ZVVybCIsImlzVmFsaWRQcm9qZWN0SWQiLCJ0b2tlblN0YXRzUHJveHkiLCJjcmVhdGVUb2tlblN0YXRzTWFuYWdlclByb3h5IiwidWlTdGF0ZVNlcnZpY2UiLCJjcmVhdGVVSVN0YXRlU2VydmljZSIsImF1dGhGb3JtSGFuZGxlciIsImNyZWF0ZUF1dGhGb3JtSGFuZGxlciIsIl90cnlDcmVhdGVBdXRoQXBpU2VydmljZSIsImluc3RhbmNlIiwiYXBpQ2xpZW50IiwiYXBpRW5kcG9pbnRzIiwiY3JlYXRlQXV0aEFwaVNlcnZpY2UiLCJhdXRoQXBpU2VydmljZVByb3h5IiwiUHJveHkiLCJfdGFyZ2V0IiwicHJvcCIsImluc3QiLCJ2YWx1ZSIsImJpbmQiLCJTeW1ib2wiLCJ0b1ByaW1pdGl2ZSIsImF1dGhTdGF0ZU1hbmFnZXIiLCJjcmVhdGVBdXRoU3RhdGVNYW5hZ2VyIiwic3RvcmFnZVNlcnZpY2UiLCJyZWdpc3RlckZhY3RvcmllcyIsImdldFNlc3Npb25JZCIsImZhY3Rvcmllc1RvUmVnaXN0ZXIiLCJQcm9taXNlIiwicmVzb2x2ZSIsInRoZW4iLCJtIiwiY3JlYXRlS25vd2xlZGdlQmFzZU1hbmFnZXIiLCJjcmVhdGVLbm93bGVkZ2VCYXNlU2VhcmNoSGFuZGxlciIsImNyZWF0ZVBvbGxpbmdTZXJ2aWNlIiwiY3JlYXRlQ2hhdFVJRW5oYW5jZW1lbnRzIl0sInNvdXJjZXMiOlsiYm9vdHN0cmFwQ29yZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4vLyBGSUxFOiAvaW5pdGlhbGl6YXRpb24vYm9vdHN0cmFwL2Jvb3RzdHJhcENvcmUuanNcbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbi8qKlxuICogQ29yZSBCb290c3RyYXAgTG9naWNcbiAqIEhhbmRsZXMgY2lyY3VsYXIgZGVwZW5kZW5jeSByZXNvbHV0aW9uIGFuZCBlYXJseSBzZXJ2aWNlIHNldHVwXG4gKiBFeHRyYWN0ZWQgZnJvbSBpbml0aWFsRElTZXR1cCgpXG4gKi9cblxuaW1wb3J0IHsgY3JlYXRlRG9tQVBJIH0gZnJvbSBcIi4uLy4uL3V0aWxzL2RvbUFQSS5qc1wiO1xuaW1wb3J0IHsgY3JlYXRlRXZlbnRIYW5kbGVycyB9IGZyb20gXCIuLi8uLi9ldmVudEhhbmRsZXIuanNcIjtcbmltcG9ydCB7IGNyZWF0ZVNhZmVIYW5kbGVyIH0gZnJvbSBcIi4uLy4uL3NhZmVIYW5kbGVyLmpzXCI7XG5pbXBvcnQgeyBjcmVhdGVEb21SZWFkaW5lc3NTZXJ2aWNlIH0gZnJvbSBcIi4uLy4uL3V0aWxzL2RvbVJlYWRpbmVzc1NlcnZpY2UuanNcIjtcbmltcG9ydCB7IGNyZWF0ZUxvZ2dlciB9IGZyb20gXCIuLi8uLi9sb2dnZXIuanNcIjtcbmltcG9ydCB7IGNyZWF0ZUN1c3RvbUV2ZW50UG9seWZpbGwgfSBmcm9tIFwiLi4vLi4vdXRpbHMvcG9seWZpbGxDdXN0b21FdmVudC5qc1wiO1xuaW1wb3J0IHsgY3JlYXRlRXZlbnRTZXJ2aWNlIH0gZnJvbSBcIi4uLy4uL3NlcnZpY2VzL2V2ZW50U2VydmljZS5qc1wiO1xuaW1wb3J0IHsgY3JlYXRlVUlTdGF0ZVNlcnZpY2UgfSBmcm9tIFwiLi4vLi4vdWlTdGF0ZVNlcnZpY2UuanNcIjtcbmltcG9ydCB7IHNldEJyb3dzZXJTZXJ2aWNlIGFzIHJlZ2lzdGVyU2Vzc2lvbkJyb3dzZXJTZXJ2aWNlLCBnZXRTZXNzaW9uSWQgYXMgY29yZUdldFNlc3Npb25JZCB9IGZyb20gXCIuLi8uLi91dGlscy9zZXNzaW9uLmpzXCI7XG5cbi8vIFN0YXRpY2FsbHkgaW1wb3J0IG1vZHVsZXMgdGhhdCB3ZXJlIHByZXZpb3VzbHkgbG9hZGVkIHdpdGggZHluYW1pYyBgaW1wb3J0KClgLlxuaW1wb3J0IHsgY3JlYXRlVG9rZW5TdGF0c01hbmFnZXJQcm94eSB9IGZyb20gXCIuLi8uLi90b2tlblN0YXRzTWFuYWdlclByb3h5LmpzXCI7XG5pbXBvcnQgeyBjcmVhdGVBdXRoRm9ybUhhbmRsZXIgfSBmcm9tIFwiLi4vLi4vYXV0aEZvcm1IYW5kbGVyLmpzXCI7XG5pbXBvcnQgeyBjcmVhdGVBdXRoQXBpU2VydmljZSB9IGZyb20gXCIuLi8uLi9hdXRoQXBpU2VydmljZS5qc1wiO1xuaW1wb3J0IHsgY3JlYXRlQXV0aFN0YXRlTWFuYWdlciB9IGZyb20gXCIuLi8uLi9hdXRoU3RhdGVNYW5hZ2VyLmpzXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVCb290c3RyYXBDb3JlKG9wdHMpIHtcbiAgICBjb25zdCB7IERlcGVuZGVuY3lTeXN0ZW0sIGJyb3dzZXJTZXJ2aWNlLCBBUFBfQ09ORklHIH0gPSBvcHRzO1xuXG4gICAgLyoqXG4gICAgICogQm9vdHN0cmFwIGNvcmUgc2VydmljZXMgd2l0aCBjaXJjdWxhciBkZXBlbmRlbmN5IHJlc29sdXRpb25cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpbml0aWFsaXplQ29yZVNlcnZpY2VzKCkge1xuICAgICAgICAvLyAxLiBBdHRhY2ggYnJvd3NlclNlcnZpY2UgdG8gc2Vzc2lvbiBmb3IgYmFja3dhcmQtY29tcGF0aWJpbGl0eVxuICAgICAgICByZWdpc3RlclNlc3Npb25Ccm93c2VyU2VydmljZShicm93c2VyU2VydmljZSk7XG5cbiAgICAgICAgLy8gMi4gRW5zdXJlIERPTVB1cmlmeSAoc2FuaXRpemVyKSBpcyBhdmFpbGFibGUuXG4gICAgICAgIC8vIElmIGl0IGRvZXMgbm90IGV4aXN0IHlldCwgYXR0ZW1wdCB0byBsYXppbHkgY3JlYXRlIGl0IHVzaW5nIHRoZVxuICAgICAgICAvLyBpbmplY3RlZCBgY3JlYXRlRE9NUHVyaWZ5R2xvYmFsYCBmYWN0b3J5IChhZGRlZCB0byBvcHRzIGJ5XG4gICAgICAgIC8vIGFwcC5qcykuICBUaGlzIHByZXNlcnZlcyB0aGUgb3JpZ2luYWwgc2FmZXR5IGNoZWNrIHdoaWxlIGF2b2lkaW5nXG4gICAgICAgIC8vIGEgaGFyZC1mYWlsdXJlIGR1cmluZyBlYXJseSBib290c3RyYXAgb3JkZXJpbmcuXG5cbiAgICAgICAgbGV0IHNhbml0aXplciA9IGJyb3dzZXJTZXJ2aWNlPy5nZXRXaW5kb3c/LigpPy5ET01QdXJpZnk7XG5cbiAgICAgICAgaWYgKCFzYW5pdGl6ZXIpIHtcbiAgICAgICAgICAgIGNvbnN0IHsgY3JlYXRlRE9NUHVyaWZ5R2xvYmFsIH0gPSBvcHRzO1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBjcmVhdGVET01QdXJpZnlHbG9iYWwgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBjcmVhdGVET01QdXJpZnlHbG9iYWwoeyBicm93c2VyU2VydmljZSB9KTtcbiAgICAgICAgICAgICAgICAgICAgc2FuaXRpemVyID0gYnJvd3NlclNlcnZpY2U/LmdldFdpbmRvdz8uKCk/LkRPTVB1cmlmeTtcbiAgICAgICAgICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgLyogZXNsaW50LWRpc2FibGUgbm8tZW1wdHkgKi9cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXNhbml0aXplcikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdbYXBwSW5pdGlhbGl6ZXJdIERPTVB1cmlmeSBub3QgZm91bmQg4oCUIGNhbm5vdCBwcm9jZWVkIChzZWN1cml0eSByZXF1aXJlbWVudCkuJyk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyAzLiBDcmVhdGUgZG9tQVBJIEJFRk9SRSBsb2dnZXIvZXZlbnRIYW5kbGVyc1xuICAgICAgICBjb25zdCBkb21BUEkgPSBjcmVhdGVEb21BUEkoe1xuICAgICAgICAgICAgZG9jdW1lbnRPYmplY3Q6IGJyb3dzZXJTZXJ2aWNlLmdldERvY3VtZW50KCksXG4gICAgICAgICAgICB3aW5kb3dPYmplY3Q6IGJyb3dzZXJTZXJ2aWNlLmdldFdpbmRvdygpLFxuICAgICAgICAgICAgZGVidWc6IEFQUF9DT05GSUc/LkRFQlVHID09PSB0cnVlLFxuICAgICAgICAgICAgc2FuaXRpemVyXG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIDQuIEJvb3RzdHJhcCBsb2dnZXIgd2l0aCBzdHViIHBhdHRlcm4gZm9yIGNpcmN1bGFyIGRlcGVuZGVuY3lcblxuICAgICAgICAvLyBCb290c3RyYXAgbWluaW1hbCBzYWZlSGFuZGxlciBzdHViIGZvciBwcmUtbG9nZ2VyIERJXG4gICAgICAgIGZ1bmN0aW9uIHN0dWJTYWZlSGFuZGxlcihmbiwgX2Rlc2NyaXB0aW9uKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGZuICE9PSAnZnVuY3Rpb24nKSByZXR1cm4gKCkgPT4ge307XG4gICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKC4uLmFyZ3MpIHtcbiAgICAgICAgICAgICAgICB0cnkgeyByZXR1cm4gZm4uYXBwbHkodGhpcywgYXJncyk7IH0gY2F0Y2ggeyAvKiBpbnRlbnRpb25hbGx5IGlnbm9yZWQgKi8gfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBsb2dnZXI7XG5cbiAgICAgICAgLy8gQ3JlYXRlIGV2ZW50SGFuZGxlcnMgd2l0aCBzdHViIGxvZ2dlclxuICAgICAgICBjb25zdCBldmVudEhhbmRsZXJzID0gY3JlYXRlRXZlbnRIYW5kbGVycyh7XG4gICAgICAgICAgICBEZXBlbmRlbmN5U3lzdGVtLFxuICAgICAgICAgICAgZG9tQVBJLFxuICAgICAgICAgICAgYnJvd3NlclNlcnZpY2UsXG4gICAgICAgICAgICBBUFBfQ09ORklHLFxuICAgICAgICAgICAgc2FmZUhhbmRsZXI6IHN0dWJTYWZlSGFuZGxlcixcbiAgICAgICAgICAgIHNhbml0aXplcixcbiAgICAgICAgICAgIGVycm9yUmVwb3J0ZXI6IHtcbiAgICAgICAgICAgICAgICByZXBvcnQ6ICguLi5hcmdzKSA9PiBsb2dnZXIgPyBsb2dnZXIuZXJyb3IoJ1tlcnJvclJlcG9ydGVyXScsIC4uLmFyZ3MpIDogdW5kZWZpbmVkXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbG9nZ2VyOiB7XG4gICAgICAgICAgICAgICAgZGVidWc6ICgpID0+IHt9LFxuICAgICAgICAgICAgICAgIGluZm86ICgpID0+IHt9LFxuICAgICAgICAgICAgICAgIHdhcm46ICgpID0+IHt9LFxuICAgICAgICAgICAgICAgIGVycm9yOiAoKSA9PiB7fSxcbiAgICAgICAgICAgICAgICBsb2c6ICgpID0+IHt9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIENyZWF0ZSByZWFsIGxvZ2dlclxuICAgICAgICBsb2dnZXIgPSBjcmVhdGVMb2dnZXIoe1xuICAgICAgICAgICAgY29udGV4dDogJ0FwcCcsXG4gICAgICAgICAgICBkZWJ1ZzogQVBQX0NPTkZJRz8uREVCVUcgPT09IHRydWUsXG4gICAgICAgICAgICBtaW5MZXZlbDogQVBQX0NPTkZJRz8uTE9HR0lORz8uTUlOX0xFVkVMIHx8ICdpbmZvJyxcbiAgICAgICAgICAgIGNvbnNvbGVFbmFibGVkOiBBUFBfQ09ORklHPy5MT0dHSU5HPy5DT05TT0xFX0VOQUJMRUQgIT09IGZhbHNlLFxuICAgICAgICAgICAgc2Vzc2lvbklkUHJvdmlkZXI6IGNvcmVHZXRTZXNzaW9uSWQsXG4gICAgICAgICAgICBkb21BUEksXG4gICAgICAgICAgICBicm93c2VyU2VydmljZSxcbiAgICAgICAgICAgIGV2ZW50SGFuZGxlcnNcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gQ3JlYXRlIGN1c3RvbSBldmVudCBwb2x5ZmlsbFxuICAgICAgICBjb25zdCB7IGNsZWFudXA6IGN1c3RvbUV2ZW50UG9seWZpbGxDbGVhbnVwIH0gPSBjcmVhdGVDdXN0b21FdmVudFBvbHlmaWxsKHtcbiAgICAgICAgICAgIGJyb3dzZXJTZXJ2aWNlLFxuICAgICAgICAgICAgbG9nZ2VyXG4gICAgICAgIH0pO1xuICAgICAgICBEZXBlbmRlbmN5U3lzdGVtLnJlZ2lzdGVyKCdjdXN0b21FdmVudFBvbHlmaWxsJywge1xuICAgICAgICAgICAgY2xlYW51cDogY3VzdG9tRXZlbnRQb2x5ZmlsbENsZWFudXBcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gV2lyZSBsb2dnZXIgaW50byBldmVudEhhbmRsZXJzXG4gICAgICAgIGlmICh0eXBlb2YgZXZlbnRIYW5kbGVycy5zZXRMb2dnZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGV2ZW50SGFuZGxlcnMuc2V0TG9nZ2VyKGxvZ2dlcik7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBDcmVhdGUgZXJyb3IgcmVwb3J0ZXJcbiAgICAgICAgY29uc3QgZXJyb3JSZXBvcnRlciA9IHtcbiAgICAgICAgICAgIHJlcG9ydChlcnJvciwgY3R4ID0ge30pIHtcbiAgICAgICAgICAgICAgICBpZiAobG9nZ2VyKSB7XG4gICAgICAgICAgICAgICAgICAgIGxvZ2dlci5lcnJvcignW2Vycm9yUmVwb3J0ZXJdIHJlcG9ydGVkJywgZXJyb3IsIHsgY29udGV4dDogJ2Vycm9yUmVwb3J0ZXInLCAuLi5jdHggfSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcignW2Vycm9yUmVwb3J0ZXJdIHJlcG9ydGVkJywgZXJyb3IsIGN0eCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIC8vIFdpcmUgbG9nZ2VyIGludG8gZG9tQVBJXG4gICAgICAgIGlmICh0eXBlb2YgZG9tQVBJLnNldExvZ2dlciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgZG9tQVBJLnNldExvZ2dlcihsb2dnZXIpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQ3JlYXRlIHJlYWwgc2FmZUhhbmRsZXIgd2l0aCBsb2dnZXJcbiAgICAgICAgY29uc3QgeyBzYWZlSGFuZGxlciB9ID0gY3JlYXRlU2FmZUhhbmRsZXIoeyBsb2dnZXIgfSk7XG5cbiAgICAgICAgLy8gVXBncmFkZSBldmVudEhhbmRsZXJzIHdpdGggcmVhbCBzYWZlSGFuZGxlclxuICAgICAgICBpZiAodHlwZW9mIGV2ZW50SGFuZGxlcnMuc2V0U2FmZUhhbmRsZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGV2ZW50SGFuZGxlcnMuc2V0U2FmZUhhbmRsZXIoc2FmZUhhbmRsZXIpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gUmVnaXN0ZXIgY29yZSBvYmplY3RzIGludG8gRGVwZW5kZW5jeVN5c3RlbVxuICAgICAgICBEZXBlbmRlbmN5U3lzdGVtLnJlZ2lzdGVyKCdicm93c2VyU2VydmljZScsIGJyb3dzZXJTZXJ2aWNlKTtcbiAgICAgICAgRGVwZW5kZW5jeVN5c3RlbS5yZWdpc3RlcignbG9nZ2VyJywgbG9nZ2VyKTtcbiAgICAgICAgRGVwZW5kZW5jeVN5c3RlbS5yZWdpc3Rlcignc2FuaXRpemVyJywgc2FuaXRpemVyKTtcbiAgICAgICAgRGVwZW5kZW5jeVN5c3RlbS5yZWdpc3RlcignZG9tUHVyaWZ5Jywgc2FuaXRpemVyKTsgLy8gbGVnYWN5IGFsaWFzXG4gICAgICAgIERlcGVuZGVuY3lTeXN0ZW0ucmVnaXN0ZXIoJ3NhZmVIYW5kbGVyJywgc2FmZUhhbmRsZXIpO1xuICAgICAgICBEZXBlbmRlbmN5U3lzdGVtLnJlZ2lzdGVyKCdjcmVhdGVDaGF0TWFuYWdlcicsIG9wdHMuY3JlYXRlQ2hhdE1hbmFnZXIpO1xuICAgICAgICBEZXBlbmRlbmN5U3lzdGVtLnJlZ2lzdGVyKCdkb21BUEknLCBkb21BUEkpO1xuICAgICAgICBEZXBlbmRlbmN5U3lzdGVtLnJlZ2lzdGVyKCdldmVudEhhbmRsZXJzJywgZXZlbnRIYW5kbGVycyk7XG4gICAgICAgIERlcGVuZGVuY3lTeXN0ZW0ucmVnaXN0ZXIoJ2Vycm9yUmVwb3J0ZXInLCBlcnJvclJlcG9ydGVyKTtcblxuICAgICAgICAvLyBTZXR1cCBkb21SZWFkaW5lc3NTZXJ2aWNlXG4gICAgICAgIGNvbnN0IGRvbVJlYWRpbmVzc1NlcnZpY2UgPSBjcmVhdGVEb21SZWFkaW5lc3NTZXJ2aWNlKHtcbiAgICAgICAgICAgIERlcGVuZGVuY3lTeXN0ZW0sXG4gICAgICAgICAgICBkb21BUEksXG4gICAgICAgICAgICBicm93c2VyU2VydmljZSxcbiAgICAgICAgICAgIGV2ZW50SGFuZGxlcnMsXG4gICAgICAgICAgICBBUFBfQ09ORklHLFxuICAgICAgICAgICAgbG9nZ2VyXG4gICAgICAgIH0pO1xuICAgICAgICBEZXBlbmRlbmN5U3lzdGVtLnJlZ2lzdGVyKCdkb21SZWFkaW5lc3NTZXJ2aWNlJywgZG9tUmVhZGluZXNzU2VydmljZSk7XG4gICAgICAgIGV2ZW50SGFuZGxlcnMuc2V0RG9tUmVhZGluZXNzU2VydmljZShkb21SZWFkaW5lc3NTZXJ2aWNlKTtcblxuICAgICAgICAvLyBDcmVhdGUgZXZlbnQgYnVzIGFuZCBzZXJ2aWNlc1xuICAgICAgICBjb25zdCBBcHBCdXMgPSBuZXcgRXZlbnRUYXJnZXQoKTtcbiAgICAgICAgRGVwZW5kZW5jeVN5c3RlbS5yZWdpc3RlcignQXBwQnVzJywgQXBwQnVzKTtcblxuICAgICAgICBjb25zdCBldmVudFNlcnZpY2UgPSBjcmVhdGVFdmVudFNlcnZpY2Uoe1xuICAgICAgICAgICAgRGVwZW5kZW5jeVN5c3RlbSxcbiAgICAgICAgICAgIGxvZ2dlcixcbiAgICAgICAgICAgIGV2ZW50SGFuZGxlcnMsXG4gICAgICAgICAgICBleGlzdGluZ0J1czogQXBwQnVzXG4gICAgICAgIH0pO1xuICAgICAgICBEZXBlbmRlbmN5U3lzdGVtLnJlZ2lzdGVyKCdldmVudFNlcnZpY2UnLCBldmVudFNlcnZpY2UpO1xuXG4gICAgICAgIC8vIExlZ2FjeSBhbGlhc2VzXG4gICAgICAgIGlmICghRGVwZW5kZW5jeVN5c3RlbS5tb2R1bGVzLmdldCgnZXZlbnRCdXMnKSkge1xuICAgICAgICAgICAgRGVwZW5kZW5jeVN5c3RlbS5yZWdpc3RlcignZXZlbnRCdXMnLCBBcHBCdXMpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghRGVwZW5kZW5jeVN5c3RlbS5tb2R1bGVzLmdldCgnQXV0aEJ1cycpKSB7XG4gICAgICAgICAgICBEZXBlbmRlbmN5U3lzdGVtLnJlZ2lzdGVyKCdBdXRoQnVzJywgQXBwQnVzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFVJIHV0aWxpdGllc1xuICAgICAgICBjb25zdCB1aVV0aWxzID0ge1xuICAgICAgICAgICAgZm9ybWF0Qnl0ZXM6IG9wdHMuZ2xvYmFsRm9ybWF0Qnl0ZXMsXG4gICAgICAgICAgICBmb3JtYXREYXRlOiBvcHRzLmdsb2JhbEZvcm1hdERhdGUsXG4gICAgICAgICAgICBmaWxlSWNvbjogb3B0cy5nbG9iYWxGaWxlSWNvblxuICAgICAgICB9O1xuXG4gICAgICAgIGNvbnN0IGdsb2JhbFV0aWxzID0ge1xuICAgICAgICAgICAgc2hvdWxkU2tpcERlZHVwOiBvcHRzLnNob3VsZFNraXBEZWR1cCxcbiAgICAgICAgICAgIHN0YWJsZVN0cmluZ2lmeTogb3B0cy5zdGFibGVTdHJpbmdpZnksXG4gICAgICAgICAgICBub3JtYWxpc2VVcmw6IGJyb3dzZXJTZXJ2aWNlLm5vcm1hbGlzZVVybCB8fCBudWxsLFxuICAgICAgICAgICAgaXNBYnNvbHV0ZVVybDogb3B0cy5pc0Fic29sdXRlVXJsLFxuICAgICAgICAgICAgaXNWYWxpZFByb2plY3RJZDogb3B0cy5pc1ZhbGlkUHJvamVjdElkXG4gICAgICAgIH07XG5cbiAgICAgICAgLy8gUmVnaXN0ZXIgdG9rZW4gc3RhdHMgcHJveHlcbiAgICAgICAgY29uc3QgdG9rZW5TdGF0c1Byb3h5ID0gY3JlYXRlVG9rZW5TdGF0c01hbmFnZXJQcm94eSh7IERlcGVuZGVuY3lTeXN0ZW0sIGxvZ2dlciB9KTtcbiAgICAgICAgRGVwZW5kZW5jeVN5c3RlbS5yZWdpc3RlcigndG9rZW5TdGF0c01hbmFnZXJQcm94eScsIHRva2VuU3RhdHNQcm94eSk7XG4gICAgICAgIC8vIEFsaWFzOiBleHBvc2UgcHJveHkgdW5kZXIgY2Fub25pY2FsIG5hbWUgc28gZG93bnN0cmVhbSBtb2R1bGVzIGNhblxuICAgICAgICAvLyBzYWZlbHkgYG1vZHVsZXMuZ2V0KCd0b2tlblN0YXRzTWFuYWdlcicpYCBiZWZvcmUgdGhlIHJlYWwgbWFuYWdlciBpc1xuICAgICAgICAvLyByZWFkeS4gIHVpSW5pdCBsYXRlciByZXBsYWNlcyB0aGlzIGVudHJ5IHdpdGggdGhlIGNvbmNyZXRlXG4gICAgICAgIC8vIGltcGxlbWVudGF0aW9uLlxuICAgICAgICBpZiAoIURlcGVuZGVuY3lTeXN0ZW0ubW9kdWxlcy5nZXQoJ3Rva2VuU3RhdHNNYW5hZ2VyJykpIHtcbiAgICAgICAgICAgIERlcGVuZGVuY3lTeXN0ZW0ucmVnaXN0ZXIoJ3Rva2VuU3RhdHNNYW5hZ2VyJywgdG9rZW5TdGF0c1Byb3h5KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFVJIFN0YXRlIFNlcnZpY2VcbiAgICAgICAgY29uc3QgdWlTdGF0ZVNlcnZpY2UgPSBjcmVhdGVVSVN0YXRlU2VydmljZSh7IGxvZ2dlciB9KTtcbiAgICAgICAgRGVwZW5kZW5jeVN5c3RlbS5yZWdpc3RlcigndWlTdGF0ZVNlcnZpY2UnLCB1aVN0YXRlU2VydmljZSk7XG5cbiAgICAgICAgLy8gUmVnaXN0ZXIgYXV0aCBjb21wb25lbnQgZmFjdG9yaWVzXG4gICAgICAgIGNvbnN0IGF1dGhGb3JtSGFuZGxlciA9IGNyZWF0ZUF1dGhGb3JtSGFuZGxlcih7XG4gICAgICAgICAgICBkb21BUEksIHNhbml0aXplciwgZXZlbnRIYW5kbGVycywgbG9nZ2VyLCBzYWZlSGFuZGxlclxuICAgICAgICB9KTtcbiAgICAgICAgRGVwZW5kZW5jeVN5c3RlbS5yZWdpc3RlcignYXV0aEZvcm1IYW5kbGVyJywgYXV0aEZvcm1IYW5kbGVyKTtcblxuICAgICAgICAvLyBBdXRoQXBpU2VydmljZSByZXF1aXJlcyBhIGZ1bmN0aW9uYWwgYXBpQ2xpZW50IGFuZCBhcGlFbmRwb2ludHMuXG4gICAgICAgIC8vIFRoZXNlIGFyZSBvbmx5IGF2YWlsYWJsZSBhZnRlciBzZXJ2aWNlSW5pdCdzIGJhc2ljICYgYWR2YW5jZWRcbiAgICAgICAgLy8gcmVnaXN0cmF0aW9ucy4gIFRoZXJlZm9yZSB3ZSByZWdpc3RlciAqYSBmYWN0b3J5IHdyYXBwZXIqIHRoYXQgY2FuXG4gICAgICAgIC8vIGxhemlseSBjcmVhdGUgdGhlIHJlYWwgc2VydmljZSBvbiBmaXJzdCBhY2Nlc3MsIG9uY2UgdGhlXG4gICAgICAgIC8vIGRlcGVuZGVuY2llcyBleGlzdC4gIFRoaXMgcHJldmVudHMgYW4gZWFybHkgYm9vdCBmYWlsdXJlIHdoaWxlXG4gICAgICAgIC8vIGtlZXBpbmcgdGhlIG1vZHVsZSBuYW1lIHJlc2VydmVkIGluIHRoZSBESSBjb250YWluZXIuXG5cbiAgICAgICAgZnVuY3Rpb24gX3RyeUNyZWF0ZUF1dGhBcGlTZXJ2aWNlKCkge1xuICAgICAgICAgICAgbGV0IGluc3RhbmNlID0gRGVwZW5kZW5jeVN5c3RlbS5tb2R1bGVzLmdldCgnX19hdXRoQXBpU2VydmljZVJlYWwnKTtcbiAgICAgICAgICAgIGlmIChpbnN0YW5jZSkgcmV0dXJuIGluc3RhbmNlO1xuXG4gICAgICAgICAgICBjb25zdCBhcGlDbGllbnQgICAgPSBEZXBlbmRlbmN5U3lzdGVtLm1vZHVsZXMuZ2V0KCdhcGlSZXF1ZXN0JylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHx8IERlcGVuZGVuY3lTeXN0ZW0ubW9kdWxlcy5nZXQoJ2FwaUNsaWVudCcpO1xuICAgICAgICAgICAgY29uc3QgYXBpRW5kcG9pbnRzID0gRGVwZW5kZW5jeVN5c3RlbS5tb2R1bGVzLmdldCgnYXBpRW5kcG9pbnRzJykgfHwgb3B0cy5hcGlFbmRwb2ludHM7XG5cbiAgICAgICAgICAgIGlmICghYXBpQ2xpZW50IHx8ICFhcGlFbmRwb2ludHMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDsgLy8gZGVwZW5kZW5jaWVzIG5vdCByZWFkeSB5ZXRcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaW5zdGFuY2UgPSBjcmVhdGVBdXRoQXBpU2VydmljZSh7XG4gICAgICAgICAgICAgICAgYXBpQ2xpZW50LFxuICAgICAgICAgICAgICAgIGFwaUVuZHBvaW50cyxcbiAgICAgICAgICAgICAgICBsb2dnZXIsXG4gICAgICAgICAgICAgICAgYnJvd3NlclNlcnZpY2VcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBEZXBlbmRlbmN5U3lzdGVtLnJlZ2lzdGVyKCdfX2F1dGhBcGlTZXJ2aWNlUmVhbCcsIGluc3RhbmNlKTtcbiAgICAgICAgICAgIHJldHVybiBpbnN0YW5jZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGF1dGhBcGlTZXJ2aWNlUHJveHkgPSBuZXcgUHJveHkoe30sIHtcbiAgICAgICAgICAgIGdldChfdGFyZ2V0LCBwcm9wKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgaW5zdCA9IF90cnlDcmVhdGVBdXRoQXBpU2VydmljZSgpO1xuICAgICAgICAgICAgICAgIGlmIChpbnN0KSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gaW5zdFtwcm9wXTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICh0eXBlb2YgdmFsdWUgPT09ICdmdW5jdGlvbicpID8gdmFsdWUuYmluZChpbnN0KSA6IHZhbHVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBOb3QgcmVhZHkgeWV0IOKAkyByZXR1cm4gbm9vcCB0byBhdm9pZCBoYXJkIGNyYXNoXG4gICAgICAgICAgICAgICAgaWYgKHByb3AgPT09ICd0b1N0cmluZycgfHwgcHJvcCA9PT0gU3ltYm9sLnRvUHJpbWl0aXZlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAoKSA9PiAnW2F1dGhBcGlTZXJ2aWNlUHJveHk6dW5yZWFkeV0nO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1thdXRoQXBpU2VydmljZVByb3h5XSBBdXRoQXBpU2VydmljZSBub3QgcmVhZHkgeWV0Jyk7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzZXQoX3RhcmdldCwgcHJvcCwgdmFsdWUpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBpbnN0ID0gX3RyeUNyZWF0ZUF1dGhBcGlTZXJ2aWNlKCk7XG4gICAgICAgICAgICAgICAgaWYgKGluc3QpIHtcbiAgICAgICAgICAgICAgICAgICAgaW5zdFtwcm9wXSA9IHZhbHVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgRGVwZW5kZW5jeVN5c3RlbS5yZWdpc3RlcignYXV0aEFwaVNlcnZpY2UnLCBhdXRoQXBpU2VydmljZVByb3h5KTtcblxuICAgICAgICBjb25zdCBhdXRoU3RhdGVNYW5hZ2VyID0gY3JlYXRlQXV0aFN0YXRlTWFuYWdlcih7XG4gICAgICAgICAgICBldmVudFNlcnZpY2UsIGxvZ2dlciwgYnJvd3NlclNlcnZpY2UsXG4gICAgICAgICAgICBzdG9yYWdlU2VydmljZTogbnVsbCAvLyB3aWxsIGJlIHNldCBsYXRlclxuICAgICAgICB9KTtcbiAgICAgICAgRGVwZW5kZW5jeVN5c3RlbS5yZWdpc3RlcignYXV0aFN0YXRlTWFuYWdlcicsIGF1dGhTdGF0ZU1hbmFnZXIpO1xuXG4gICAgICAgIC8vIFJldHVybiBhbGwgY3JlYXRlZCBzZXJ2aWNlc1xuICAgICAgICAvLyBTdGFydCBiYWNrZ3JvdW5kIGZhY3RvcnkgcmVnaXN0cmF0aW9uIChub24tYmxvY2tpbmcpXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBJbnRlbnRpb25hbGx5IG5vdCBhd2FpdGVkIOKAkyBzaWRlLWVmZmVjdHMgb25seS5cbiAgICAgICAgICAgIHJlZ2lzdGVyRmFjdG9yaWVzKCk7XG4gICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgbG9nZ2VyLndhcm4oJ1tib290c3RyYXBDb3JlXSByZWdpc3RlckZhY3RvcmllcygpIGZhaWxlZCcsIGVyciwge1xuICAgICAgICAgICAgICAgIGNvbnRleHQ6ICdib290c3RyYXBDb3JlOnJlZ2lzdGVyRmFjdG9yaWVzJ1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbG9nZ2VyLFxuICAgICAgICAgICAgZXZlbnRIYW5kbGVycyxcbiAgICAgICAgICAgIGRvbUFQSSxcbiAgICAgICAgICAgIHNhZmVIYW5kbGVyLFxuICAgICAgICAgICAgc2FuaXRpemVyLFxuICAgICAgICAgICAgZG9tUmVhZGluZXNzU2VydmljZSxcbiAgICAgICAgICAgIHVpVXRpbHMsXG4gICAgICAgICAgICBnbG9iYWxVdGlscyxcbiAgICAgICAgICAgIGdldFNlc3Npb25JZDogY29yZUdldFNlc3Npb25JZCxcbiAgICAgICAgICAgIGV2ZW50U2VydmljZSxcbiAgICAgICAgICAgIGVycm9yUmVwb3J0ZXJcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZWdpc3RlciBmYWN0b3J5IGZ1bmN0aW9ucyBpbiBESSBjb250YWluZXJcbiAgICAgKi9cbiAgICBmdW5jdGlvbiByZWdpc3RlckZhY3RvcmllcygpIHtcbiAgICAgICAgY29uc3QgZmFjdG9yaWVzVG9SZWdpc3RlciA9IFtcbiAgICAgICAgICAgICdLQk1hbmFnZXJGYWN0b3J5JyxcbiAgICAgICAgICAgICdLQlNlYXJjaEhhbmRsZXJGYWN0b3J5JyxcbiAgICAgICAgICAgICdQb2xsaW5nU2VydmljZUZhY3RvcnknLFxuICAgICAgICAgICAgJ2NoYXRVSUVuaGFuY2VtZW50c0ZhY3RvcnknLFxuICAgICAgICAgICAgLy8gUGhhc2UtMiBmYWN0b3JpZXNcbiAgICAgICAgICAgICdjcmVhdGVDaGF0VUlDb250cm9sbGVyJyxcbiAgICAgICAgICAgICdjcmVhdGVDb252ZXJzYXRpb25NYW5hZ2VyJyxcbiAgICAgICAgICAgICdjcmVhdGVNZXNzYWdlSGFuZGxlcicsXG4gICAgICAgICAgICAnY3JlYXRlUHJvamVjdERldGFpbHNSZW5kZXJlcicsXG4gICAgICAgICAgICAnY3JlYXRlUHJvamVjdERhdGFDb29yZGluYXRvcicsXG4gICAgICAgICAgICAnY3JlYXRlUHJvamVjdEV2ZW50SGFuZGxlcnMnXG4gICAgICAgIF07XG5cbiAgICAgICAgLy8gSW1wb3J0IGFuZCByZWdpc3RlciBLQiBmYWN0b3JpZXNcbiAgICAgICAgaW1wb3J0KFwiLi4vLi4va25vd2xlZGdlQmFzZU1hbmFnZXIuanNcIikudGhlbihtID0+IHtcbiAgICAgICAgICAgIGlmICghRGVwZW5kZW5jeVN5c3RlbS5tb2R1bGVzLmdldCgnS0JNYW5hZ2VyRmFjdG9yeScpKSB7XG4gICAgICAgICAgICAgICAgRGVwZW5kZW5jeVN5c3RlbS5yZWdpc3RlcignS0JNYW5hZ2VyRmFjdG9yeScsIG0uY3JlYXRlS25vd2xlZGdlQmFzZU1hbmFnZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICBpbXBvcnQoXCIuLi8uLi9rbm93bGVkZ2VCYXNlU2VhcmNoSGFuZGxlci5qc1wiKS50aGVuKG0gPT4ge1xuICAgICAgICAgICAgaWYgKCFEZXBlbmRlbmN5U3lzdGVtLm1vZHVsZXMuZ2V0KCdLQlNlYXJjaEhhbmRsZXJGYWN0b3J5JykpIHtcbiAgICAgICAgICAgICAgICBEZXBlbmRlbmN5U3lzdGVtLnJlZ2lzdGVyKCdLQlNlYXJjaEhhbmRsZXJGYWN0b3J5JywgbS5jcmVhdGVLbm93bGVkZ2VCYXNlU2VhcmNoSGFuZGxlcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGltcG9ydChcIi4uLy4uL3BvbGxpbmdTZXJ2aWNlLmpzXCIpLnRoZW4obSA9PiB7XG4gICAgICAgICAgICBpZiAoIURlcGVuZGVuY3lTeXN0ZW0ubW9kdWxlcy5nZXQoJ1BvbGxpbmdTZXJ2aWNlRmFjdG9yeScpKSB7XG4gICAgICAgICAgICAgICAgRGVwZW5kZW5jeVN5c3RlbS5yZWdpc3RlcignUG9sbGluZ1NlcnZpY2VGYWN0b3J5JywgbS5jcmVhdGVQb2xsaW5nU2VydmljZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGltcG9ydChcIi4uLy4uL2NoYXRVSUVuaGFuY2VtZW50cy5qc1wiKS50aGVuKG0gPT4ge1xuICAgICAgICAgICAgaWYgKCFEZXBlbmRlbmN5U3lzdGVtLm1vZHVsZXMuZ2V0KCdjaGF0VUlFbmhhbmNlbWVudHNGYWN0b3J5JykpIHtcbiAgICAgICAgICAgICAgICBEZXBlbmRlbmN5U3lzdGVtLnJlZ2lzdGVyKCdjaGF0VUlFbmhhbmNlbWVudHNGYWN0b3J5JywgbS5jcmVhdGVDaGF0VUlFbmhhbmNlbWVudHMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgICBpbml0aWFsaXplQ29yZVNlcnZpY2VzLFxuICAgICAgICByZWdpc3RlckZhY3Rvcmllc1xuICAgIH07XG59XG4iXSwibWFwcGluZ3MiOiI7Ozs7OztBQVNBLElBQUFBLE9BQUEsR0FBQUMsT0FBQTtBQUNBLElBQUFDLGFBQUEsR0FBQUQsT0FBQTtBQUNBLElBQUFFLFlBQUEsR0FBQUYsT0FBQTtBQUNBLElBQUFHLG9CQUFBLEdBQUFILE9BQUE7QUFDQSxJQUFBSSxPQUFBLEdBQUFKLE9BQUE7QUFDQSxJQUFBSyxvQkFBQSxHQUFBTCxPQUFBO0FBQ0EsSUFBQU0sYUFBQSxHQUFBTixPQUFBO0FBQ0EsSUFBQU8sZUFBQSxHQUFBUCxPQUFBO0FBQ0EsSUFBQVEsUUFBQSxHQUFBUixPQUFBO0FBR0EsSUFBQVMsdUJBQUEsR0FBQVQsT0FBQTtBQUNBLElBQUFVLGdCQUFBLEdBQUFWLE9BQUE7QUFDQSxJQUFBVyxlQUFBLEdBQUFYLE9BQUE7QUFDQSxJQUFBWSxpQkFBQSxHQUFBWixPQUFBO0FBQW1FLFNBQUFhLHdCQUFBQyxDQUFBLEVBQUFDLENBQUEsNkJBQUFDLE9BQUEsTUFBQUMsQ0FBQSxPQUFBRCxPQUFBLElBQUFFLENBQUEsT0FBQUYsT0FBQSxZQUFBSCx1QkFBQSxZQUFBQSxDQUFBQyxDQUFBLEVBQUFDLENBQUEsU0FBQUEsQ0FBQSxJQUFBRCxDQUFBLElBQUFBLENBQUEsQ0FBQUssVUFBQSxTQUFBTCxDQUFBLE1BQUFNLENB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