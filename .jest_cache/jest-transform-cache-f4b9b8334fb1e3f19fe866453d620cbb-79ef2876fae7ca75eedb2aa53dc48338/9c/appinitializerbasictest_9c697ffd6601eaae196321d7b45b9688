e8f1b38e313b0b3544576e5419c3fa8b
"use strict";

var _appInitializer = require("../../static/js/init/appInitializer.js");
/**
 * Basic smoke test for createAppInitializer
 * ----------------------------------------------------------
 * Verifies that the bootstrap sequence resolves without
 * throwing given a minimal set of stubbed dependencies.
 * This is intended to detect regressions where new mandatory
 * DI parameters are added to appInitializer without updating
 * downstream boot scripts or tests.
 */

function createMockDependencySystem() {
  const modules = new Map();
  return {
    modules,
    register: (key, value) => modules.set(key, value),
    get: key => modules.get(key)
  };
}
function createStubBrowserService() {
  const win = {
    setTimeout: fn => fn && fn(),
    clearTimeout: () => {},
    EventTarget,
    performance: {
      now: () => 0
    },
    crypto: {
      randomUUID: () => '00000000-0000-4000-8000-000000000000'
    },
    DOMPurify: {
      sanitize: html => html
    }
  };
  const doc = {
    readyState: 'complete',
    addEventListener: () => {},
    removeEventListener: () => {},
    getElementById: () => null,
    querySelector: () => null,
    createElement: () => ({
      style: {}
    }),
    body: {
      appendChild: () => {},
      removeChild: () => {}
    }
  };
  win.document = doc;
  return {
    getWindow: () => win,
    getDocument: () => doc,
    setTimeout: win.setTimeout,
    clearTimeout: win.clearTimeout
  };
}
function createNoopFactory() {
  return () => ({
    cleanup() {}
  });
}
test('appInitializer completes bootstrap without error', async () => {
  const DependencySystem = createMockDependencySystem();
  const appInit = (0, _appInitializer.createAppInitializer)({
    DependencySystem,
    browserService: createStubBrowserService(),
    createChatManager: createNoopFactory(),
    createApiEndpoints: () => ({
      endpoints: {},
      cleanup() {}
    }),
    MODAL_MAPPINGS: {},
    APP_CONFIG: {
      TIMEOUTS: {
        DOM_READY: 1000
      }
    }
  });
  await expect(appInit.initializeApp()).resolves.not.toThrow();
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfYXBwSW5pdGlhbGl6ZXIiLCJyZXF1aXJlIiwiY3JlYXRlTW9ja0RlcGVuZGVuY3lTeXN0ZW0iLCJtb2R1bGVzIiwiTWFwIiwicmVnaXN0ZXIiLCJrZXkiLCJ2YWx1ZSIsInNldCIsImdldCIsImNyZWF0ZVN0dWJCcm93c2VyU2VydmljZSIsIndpbiIsInNldFRpbWVvdXQiLCJmbiIsImNsZWFyVGltZW91dCIsIkV2ZW50VGFyZ2V0IiwicGVyZm9ybWFuY2UiLCJub3ciLCJjcnlwdG8iLCJyYW5kb21VVUlEIiwiRE9NUHVyaWZ5Iiwic2FuaXRpemUiLCJodG1sIiwiZG9jIiwicmVhZHlTdGF0ZSIsImFkZEV2ZW50TGlzdGVuZXIiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiZ2V0RWxlbWVudEJ5SWQiLCJxdWVyeVNlbGVjdG9yIiwiY3JlYXRlRWxlbWVudCIsInN0eWxlIiwiYm9keSIsImFwcGVuZENoaWxkIiwicmVtb3ZlQ2hpbGQiLCJkb2N1bWVudCIsImdldFdpbmRvdyIsImdldERvY3VtZW50IiwiY3JlYXRlTm9vcEZhY3RvcnkiLCJjbGVhbnVwIiwidGVzdCIsIkRlcGVuZGVuY3lTeXN0ZW0iLCJhcHBJbml0IiwiY3JlYXRlQXBwSW5pdGlhbGl6ZXIiLCJicm93c2VyU2VydmljZSIsImNyZWF0ZUNoYXRNYW5hZ2VyIiwiY3JlYXRlQXBpRW5kcG9pbnRzIiwiZW5kcG9pbnRzIiwiTU9EQUxfTUFQUElOR1MiLCJBUFBfQ09ORklHIiwiVElNRU9VVFMiLCJET01fUkVBRFkiLCJleHBlY3QiLCJpbml0aWFsaXplQXBwIiwicmVzb2x2ZXMiLCJub3QiLCJ0b1Rocm93Il0sInNvdXJjZXMiOlsiYXBwaW5pdGlhbGl6ZXItYmFzaWMudGVzdC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEJhc2ljIHNtb2tlIHRlc3QgZm9yIGNyZWF0ZUFwcEluaXRpYWxpemVyXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBWZXJpZmllcyB0aGF0IHRoZSBib290c3RyYXAgc2VxdWVuY2UgcmVzb2x2ZXMgd2l0aG91dFxuICogdGhyb3dpbmcgZ2l2ZW4gYSBtaW5pbWFsIHNldCBvZiBzdHViYmVkIGRlcGVuZGVuY2llcy5cbiAqIFRoaXMgaXMgaW50ZW5kZWQgdG8gZGV0ZWN0IHJlZ3Jlc3Npb25zIHdoZXJlIG5ldyBtYW5kYXRvcnlcbiAqIERJIHBhcmFtZXRlcnMgYXJlIGFkZGVkIHRvIGFwcEluaXRpYWxpemVyIHdpdGhvdXQgdXBkYXRpbmdcbiAqIGRvd25zdHJlYW0gYm9vdCBzY3JpcHRzIG9yIHRlc3RzLlxuICovXG5cbmltcG9ydCB7IGNyZWF0ZUFwcEluaXRpYWxpemVyIH0gZnJvbSAnLi4vLi4vc3RhdGljL2pzL2luaXQvYXBwSW5pdGlhbGl6ZXIuanMnO1xuXG5mdW5jdGlvbiBjcmVhdGVNb2NrRGVwZW5kZW5jeVN5c3RlbSAoKSB7XG4gIGNvbnN0IG1vZHVsZXMgPSBuZXcgTWFwKCk7XG4gIHJldHVybiB7XG4gICAgbW9kdWxlcyxcbiAgICByZWdpc3RlcjogKGtleSwgdmFsdWUpID0+IG1vZHVsZXMuc2V0KGtleSwgdmFsdWUpLFxuICAgIGdldDogKGtleSkgPT4gbW9kdWxlcy5nZXQoa2V5KVxuICB9O1xufVxuXG5mdW5jdGlvbiBjcmVhdGVTdHViQnJvd3NlclNlcnZpY2UgKCkge1xuICBjb25zdCB3aW4gPSB7XG4gICAgc2V0VGltZW91dDogKGZuKSA9PiBmbiAmJiBmbigpLFxuICAgIGNsZWFyVGltZW91dDogKCkgPT4ge30sXG4gICAgRXZlbnRUYXJnZXQsXG4gICAgcGVyZm9ybWFuY2U6IHsgbm93OiAoKSA9PiAwIH0sXG4gICAgY3J5cHRvOiB7IHJhbmRvbVVVSUQ6ICgpID0+ICcwMDAwMDAwMC0wMDAwLTQwMDAtODAwMC0wMDAwMDAwMDAwMDAnIH0sXG4gICAgRE9NUHVyaWZ5OiB7IHNhbml0aXplOiAoaHRtbCkgPT4gaHRtbCB9XG4gIH07XG4gIGNvbnN0IGRvYyA9IHtcbiAgICByZWFkeVN0YXRlOiAnY29tcGxldGUnLFxuICAgIGFkZEV2ZW50TGlzdGVuZXI6ICgpID0+IHt9LFxuICAgIHJlbW92ZUV2ZW50TGlzdGVuZXI6ICgpID0+IHt9LFxuICAgIGdldEVsZW1lbnRCeUlkOiAoKSA9PiBudWxsLFxuICAgIHF1ZXJ5U2VsZWN0b3I6ICgpID0+IG51bGwsXG4gICAgY3JlYXRlRWxlbWVudDogKCkgPT4gKHsgc3R5bGU6IHt9IH0pLFxuICAgIGJvZHk6IHsgYXBwZW5kQ2hpbGQ6ICgpID0+IHt9LCByZW1vdmVDaGlsZDogKCkgPT4ge30gfVxuICB9O1xuICB3aW4uZG9jdW1lbnQgPSBkb2M7XG5cbiAgcmV0dXJuIHtcbiAgICBnZXRXaW5kb3c6ICgpID0+IHdpbixcbiAgICBnZXREb2N1bWVudDogKCkgPT4gZG9jLFxuICAgIHNldFRpbWVvdXQ6IHdpbi5zZXRUaW1lb3V0LFxuICAgIGNsZWFyVGltZW91dDogd2luLmNsZWFyVGltZW91dFxuICB9O1xufVxuXG5mdW5jdGlvbiBjcmVhdGVOb29wRmFjdG9yeSAoKSB7XG4gIHJldHVybiAoKSA9PiAoeyBjbGVhbnVwICgpIHt9IH0pO1xufVxuXG50ZXN0KCdhcHBJbml0aWFsaXplciBjb21wbGV0ZXMgYm9vdHN0cmFwIHdpdGhvdXQgZXJyb3InLCBhc3luYyAoKSA9PiB7XG4gIGNvbnN0IERlcGVuZGVuY3lTeXN0ZW0gPSBjcmVhdGVNb2NrRGVwZW5kZW5jeVN5c3RlbSgpO1xuXG4gIGNvbnN0IGFwcEluaXQgPSBjcmVhdGVBcHBJbml0aWFsaXplcih7XG4gICAgRGVwZW5kZW5jeVN5c3RlbSxcbiAgICBicm93c2VyU2VydmljZTogY3JlYXRlU3R1YkJyb3dzZXJTZXJ2aWNlKCksXG4gICAgY3JlYXRlQ2hhdE1hbmFnZXI6IGNyZWF0ZU5vb3BGYWN0b3J5KCksXG4gICAgY3JlYXRlQXBpRW5kcG9pbnRzOiAoKSA9PiAoe1xuICAgICAgZW5kcG9pbnRzOiB7fSxcbiAgICAgIGNsZWFudXAgKCkge31cbiAgICB9KSxcbiAgICBNT0RBTF9NQVBQSU5HUzoge30sXG4gICAgQVBQX0NPTkZJRzoge1xuICAgICAgVElNRU9VVFM6IHsgRE9NX1JFQURZOiAxMDAwIH1cbiAgICB9XG4gIH0pO1xuXG4gIGF3YWl0IGV4cGVjdChhcHBJbml0LmluaXRpYWxpemVBcHAoKSkucmVzb2x2ZXMubm90LnRvVGhyb3coKTtcbn0pO1xuIl0sIm1hcHBpbmdzIjoiOztBQVVBLElBQUFBLGVBQUEsR0FBQUMsT0FBQTtBQVZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFJQSxTQUFTQywwQkFBMEJBLENBQUEsRUFBSTtFQUNyQyxNQUFNQyxPQUFPLEdBQUcsSUFBSUMsR0FBRyxDQUFDLENBQUM7RUFDekIsT0FBTztJQUNMRCxPQUFPO0lBQ1BFLFFBQVEsRUFBRUEsQ0FBQ0MsR0FBRyxFQUFFQyxLQUFLLEtBQUtKLE9BQU8sQ0FBQ0ssR0FBRyxDQUFDRixHQUFHLEVBQUVDLEtBQUssQ0FBQztJQUNqREUsR0FBRyxFQUFHSCxHQUFHLElBQUtILE9BQU8sQ0FBQ00sR0FBRyxDQUFDSCxHQUFHO0VBQy9CLENBQUM7QUFDSDtBQUVBLFNBQVNJLHdCQUF3QkEsQ0FBQSxFQUFJO0VBQ25DLE1BQU1DLEdBQUcsR0FBRztJQUNWQyxVQUFVLEVBQUdDLEVBQUUsSUFBS0EsRUFBRSxJQUFJQSxFQUFFLENBQUMsQ0FBQztJQUM5QkMsWUFBWSxFQUFFQSxDQUFBLEtBQU0sQ0FBQyxDQUFDO0lBQ3RCQyxXQUFXO0lBQ1hDLFdBQVcsRUFBRTtNQUFFQyxHQUFHLEVBQUVBLENBQUEsS0FBTTtJQUFFLENBQUM7SUFDN0JDLE1BQU0sRUFBRTtNQUFFQyxVQUFVLEVBQUVBLENBQUEsS0FBTTtJQUF1QyxDQUFDO0lBQ3BFQyxTQUFTLEVBQUU7TUFBRUMsUUFBUSxFQUFHQyxJQUFJLElBQUtBO0lBQUs7RUFDeEMsQ0FBQztFQUNELE1BQU1DLEdBQUcsR0FBRztJQUNWQyxVQUFVLEVBQUUsVUFBVTtJQUN0QkMsZ0JBQWdCLEVBQUVBLENBQUEsS0FBTSxDQUFDLENBQUM7SUFDMUJDLG1CQUFtQixFQUFFQSxDQUFBLEtBQU0sQ0FBQyxDQUFDO0lBQzdCQyxjQUFjLEVBQUVBLENBQUEsS0FBTSxJQUFJO0lBQzFCQyxhQUFhLEVBQUVBLENBQUEsS0FBTSxJQUFJO0lBQ3pCQyxhQUFhLEVBQUVBLENBQUEsTUFBTztNQUFFQyxLQUFLLEVBQUUsQ0FBQztJQUFFLENBQUMsQ0FBQztJQUNwQ0MsSUFBSSxFQUFFO01BQUVDLFdBQVcsRUFBRUEsQ0FBQSxLQUFNLENBQUMsQ0FBQztNQUFFQyxXQUFXLEVBQUVBLENBQUEsS0FBTSxDQUFDO0lBQUU7RUFDdkQsQ0FBQztFQUNEdEIsR0FBRyxDQUFDdUIsUUFBUSxHQUFHWCxHQUFHO0VBRWxCLE9BQU87SUFDTFksU0FBUyxFQUFFQSxDQUFBLEtBQU14QixHQUFHO0lBQ3BCeUIsV0FBVyxFQUFFQSxDQUFBLEtBQU1iLEdBQUc7SUFDdEJYLFVBQVUsRUFBRUQsR0FBRyxDQUFDQyxVQUFVO0lBQzFCRSxZQUFZLEVBQUVILEdBQUcsQ0FBQ0c7RUFDcEIsQ0FBQztBQUNIO0FBRUEsU0FBU3VCLGlCQUFpQkEsQ0FBQSxFQUFJO0VBQzVCLE9BQU8sT0FBTztJQUFFQyxPQUFPQSxDQUFBLEVBQUksQ0FBQztFQUFFLENBQUMsQ0FBQztBQUNsQztBQUVBQyxJQUFJLENBQUMsa0RBQWtELEVBQUUsWUFBWTtFQUNuRSxNQUFNQyxnQkFBZ0IsR0FBR3RDLDBCQUEwQixDQUFDLENBQUM7RUFFckQsTUFBTXVDLE9BQU8sR0FBRyxJQUFBQyxvQ0FBb0IsRUFBQztJQUNuQ0YsZ0JBQWdCO0lBQ2hCRyxjQUFjLEVBQUVqQyx3QkFBd0IsQ0FBQyxDQUFDO0lBQzFDa0MsaUJBQWlCLEVBQUVQLGlCQUFpQixDQUFDLENBQUM7SUFDdENRLGtCQUFrQixFQUFFQSxDQUFBLE1BQU87TUFDekJDLFNBQVMsRUFBRSxDQUFDLENBQUM7TUFDYlIsT0FBT0EsQ0FBQSxFQUFJLENBQUM7SUFDZCxDQUFDLENBQUM7SUFDRlMsY0FBYyxFQUFFLENBQUMsQ0FBQztJQUNsQkMsVUFBVSxFQUFFO01BQ1ZDLFFBQVEsRUFBRTtRQUFFQyxTQUFTLEVBQUU7TUFBSztJQUM5QjtFQUNGLENBQUMsQ0FBQztFQUVGLE1BQU1DLE1BQU0sQ0FBQ1YsT0FBTyxDQUFDVyxhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUNDLFFBQVEsQ0FBQ0MsR0FBRyxDQUFDQyxPQUFPLENBQUMsQ0FBQztBQUM5RCxDQUFDLENBQUMiLCJpZ25vcmVMaXN0IjpbXX0=