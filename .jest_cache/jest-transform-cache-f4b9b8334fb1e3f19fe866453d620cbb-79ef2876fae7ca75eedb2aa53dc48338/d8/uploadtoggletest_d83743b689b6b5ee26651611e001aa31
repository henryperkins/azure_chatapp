562b78302e95d858e1681dcbf3a1f74a
"use strict";

var _FileUploadComponent = require("../../static/js/FileUploadComponent.js");
function createDependencySystem() {
  const modules = new Map();
  return {
    modules,
    register(n, v) {
      modules.set(n, v);
    }
  };
}

// Helper to create simple File stub (Node <18 may not support File API)
function createFakeFile(name = 'test.txt', size = 10, type = 'text/plain') {
  try {
    return new File(['x'.repeat(size)], name, {
      type
    });
  } catch {
    // Fallback stub
    return {
      name,
      size,
      type
    };
  }
}
describe('FileUploadComponent – index_kb flag', () => {
  test('passes index_kb=false when checkbox unchecked & emits filesUploaded event', async () => {
    // Make CustomEvent available in Node env
    if (typeof global.CustomEvent !== 'function') {
      global.CustomEvent = class CustomEvent {
        constructor(n, d) {
          this.type = n;
          this.detail = d?.detail;
        }
      };
    }
    const DS = createDependencySystem();
    const authBus = new EventTarget();
    const appBus = new EventTarget();
    DS.register('auth', {
      AuthBus: authBus
    });
    DS.register('AppBus', appBus);
    const capturedEvents = [];
    appBus.addEventListener('knowledgebase:filesUploaded', e => capturedEvents.push(e.detail));

    // Mock projectManager.uploadFileWithRetry – capture args
    const pm = {
      uploadFileWithRetry: jest.fn(() => Promise.resolve(true))
    };

    // DOM stub elements ---------------------------------------------------
    const indexCbEl = {
      checked: false
    };
    const fileInputEl = {
      disabled: false,
      classList: {
        add() {},
        remove() {}
      }
    };
    const uploadBtnEl = {
      disabled: false,
      classList: {
        add() {},
        remove() {}
      }
    };
    const dragZoneEl = {
      disabled: false,
      classList: {
        add() {},
        remove() {}
      }
    };
    const uploadProgressEl = {
      disabled: false,
      classList: {
        add() {},
        remove() {}
      }
    };
    const progressBarEl = {
      disabled: false,
      classList: {
        add() {},
        remove() {}
      }
    };
    const uploadStatusEl = {
      disabled: false,
      classList: {
        add() {},
        remove() {}
      }
    };
    let callIndex = 0;
    const elementsArr = [fileInputEl,
    // fileInput
    uploadBtnEl,
    // uploadBtn
    dragZoneEl,
    // dragZone
    uploadProgressEl,
    // uploadProgress
    progressBarEl,
    // progressBar
    uploadStatusEl,
    // uploadStatus
    indexCbEl // indexKbCheckbox
    ];
    const domAPI = {
      querySelector: sel => {
        if (sel === '#indexKbCheckbox') return indexCbEl;
        return elementsArr[callIndex++] || {
          disabled: false,
          classList: {
            add() {},
            remove() {}
          }
        };
      },
      getWindow: () => ({}),
      getDocument: () => ({
        addEventListener() {},
        removeEventListener() {}
      }),
      addClass() {},
      removeClass() {},
      setProperty() {},
      setInnerHTML() {},
      setTextContent() {},
      dispatchEvent(target, event) {
        // Actually dispatch the event for testing
        if (target && typeof target.dispatchEvent === 'function') {
          target.dispatchEvent(event);
        }
      }
    };
    const eh = {
      DependencySystem: DS,
      trackListener(target, event, handler, options) {
        // Actually register the event listener for testing
        if (target && typeof target.addEventListener === 'function') {
          target.addEventListener(event, handler, options);
        }
      },
      cleanupListeners() {},
      createCustomEvent: (n, d) => new CustomEvent(n, d)
    };
    const logger = {
      debug() {},
      info() {},
      warn() {},
      error() {}
    };
    const comp = (0, _FileUploadComponent.createFileUploadComponent)({
      app: {
        validateUUID: () => true,
        getProjectId: () => 'test-project-123'
      },
      eventHandlers: eh,
      projectManager: pm,
      // Provide minimal eventService stub required by component
      eventService: {
        emit: () => {},
        on: () => {},
        off: () => {}
      },
      domAPI,
      logger,
      domReadinessService: {
        dependenciesAndElements: () => Promise.resolve()
      },
      scheduler: {
        setTimeout: fn => fn(),
        clearTimeout() {}
      }
    });
    await comp.init();

    // Simulate selection event with checkbox unchecked
    const fileObj = createFakeFile();
    await comp._handleFileSelection({
      target: {
        files: [fileObj],
        value: null
      }
    });
    await new Promise(resolve => setTimeout(resolve, 0)); // Allow async operations

    expect(pm.uploadFileWithRetry).toHaveBeenCalledTimes(1);
    const [, opts] = pm.uploadFileWithRetry.mock.calls[0];
    expect(opts.index_kb).toBe(false);

    // Ensure filesUploaded dispatched
    expect(capturedEvents.length).toBe(1);
    expect(capturedEvents[0].count).toBe(1);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,