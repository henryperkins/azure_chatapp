1bd3ac7b27291b8ec5c7ea8ad347014f
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createSessionManager = createSessionManager;
exports.getSessionId = getSessionId;
exports.resetSessionId = resetSessionId;
exports.setBrowserService = setBrowserService;
/**
 * session.js - Generate and provide a session UUID for this app/browser tab.
 * Used for correlating frontend logs/errors across notifications.
 */
let sessionId = null;
let _browserService = null;
function setBrowserService(bs) {
  _browserService = bs;
}
function generateSessionId() {
  // Generate RFC4122v4 string; crypto randomUUID is required
  const cryptoObj = _browserService?.getWindow?.()?.crypto;
  if (cryptoObj?.randomUUID) return cryptoObj.randomUUID();
  throw new Error('[session.js] crypto.randomUUID is required; fallback UUID generation is forbidden.');
}
function getSessionId() {
  if (!sessionId) sessionId = generateSessionId();
  return sessionId;
}
function resetSessionId() {
  sessionId = null;
}
function createSessionManager({
  browserService,
  logger
} = {}) {
  if (!browserService) throw new Error('[session] browserService required');
  setBrowserService(browserService);
  const log = logger ?? {
    debug() {},
    error() {}
  };
  return {
    getSessionId,
    resetSessionId,
    cleanup() {
      resetSessionId();
      setBrowserService(null);
      log.debug('[session] cleaned up', {
        context: 'session:cleanup'
      });
    }
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJzZXNzaW9uSWQiLCJfYnJvd3NlclNlcnZpY2UiLCJzZXRCcm93c2VyU2VydmljZSIsImJzIiwiZ2VuZXJhdGVTZXNzaW9uSWQiLCJjcnlwdG9PYmoiLCJnZXRXaW5kb3ciLCJjcnlwdG8iLCJyYW5kb21VVUlEIiwiRXJyb3IiLCJnZXRTZXNzaW9uSWQiLCJyZXNldFNlc3Npb25JZCIsImNyZWF0ZVNlc3Npb25NYW5hZ2VyIiwiYnJvd3NlclNlcnZpY2UiLCJsb2dnZXIiLCJsb2ciLCJkZWJ1ZyIsImVycm9yIiwiY2xlYW51cCIsImNvbnRleHQiXSwic291cmNlcyI6WyJzZXNzaW9uLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogc2Vzc2lvbi5qcyAtIEdlbmVyYXRlIGFuZCBwcm92aWRlIGEgc2Vzc2lvbiBVVUlEIGZvciB0aGlzIGFwcC9icm93c2VyIHRhYi5cbiAqIFVzZWQgZm9yIGNvcnJlbGF0aW5nIGZyb250ZW5kIGxvZ3MvZXJyb3JzIGFjcm9zcyBub3RpZmljYXRpb25zLlxuICovXG5sZXQgc2Vzc2lvbklkID0gbnVsbDtcbmxldCBfYnJvd3NlclNlcnZpY2UgPSBudWxsO1xuZXhwb3J0IGZ1bmN0aW9uIHNldEJyb3dzZXJTZXJ2aWNlKGJzKSB7IF9icm93c2VyU2VydmljZSA9IGJzOyB9XG5mdW5jdGlvbiBnZW5lcmF0ZVNlc3Npb25JZCgpIHtcbiAgLy8gR2VuZXJhdGUgUkZDNDEyMnY0IHN0cmluZzsgY3J5cHRvIHJhbmRvbVVVSUQgaXMgcmVxdWlyZWRcbiAgY29uc3QgY3J5cHRvT2JqID0gX2Jyb3dzZXJTZXJ2aWNlPy5nZXRXaW5kb3c/LigpPy5jcnlwdG87XG4gIGlmIChjcnlwdG9PYmo/LnJhbmRvbVVVSUQpIHJldHVybiBjcnlwdG9PYmoucmFuZG9tVVVJRCgpO1xuICB0aHJvdyBuZXcgRXJyb3IoJ1tzZXNzaW9uLmpzXSBjcnlwdG8ucmFuZG9tVVVJRCBpcyByZXF1aXJlZDsgZmFsbGJhY2sgVVVJRCBnZW5lcmF0aW9uIGlzIGZvcmJpZGRlbi4nKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBnZXRTZXNzaW9uSWQoKSB7XG4gIGlmICghc2Vzc2lvbklkKSBzZXNzaW9uSWQgPSBnZW5lcmF0ZVNlc3Npb25JZCgpO1xuICByZXR1cm4gc2Vzc2lvbklkO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHJlc2V0U2Vzc2lvbklkKCl7IHNlc3Npb25JZD1udWxsOyB9XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVTZXNzaW9uTWFuYWdlcih7IGJyb3dzZXJTZXJ2aWNlLCBsb2dnZXIgfSA9IHt9KSB7XG4gIGlmICghYnJvd3NlclNlcnZpY2UpIHRocm93IG5ldyBFcnJvcignW3Nlc3Npb25dIGJyb3dzZXJTZXJ2aWNlIHJlcXVpcmVkJyk7XG4gIHNldEJyb3dzZXJTZXJ2aWNlKGJyb3dzZXJTZXJ2aWNlKTtcbiAgY29uc3QgbG9nID0gbG9nZ2VyID8/IHsgZGVidWcoKXt9LCBlcnJvcigpe30gfTtcbiAgcmV0dXJuIHtcbiAgICBnZXRTZXNzaW9uSWQsXG4gICAgcmVzZXRTZXNzaW9uSWQsXG4gICAgY2xlYW51cCAoKSB7XG4gICAgICByZXNldFNlc3Npb25JZCgpO1xuICAgICAgc2V0QnJvd3NlclNlcnZpY2UobnVsbCk7XG4gICAgICBsb2cuZGVidWcoJ1tzZXNzaW9uXSBjbGVhbmVkIHVwJywgeyBjb250ZXh0OiAnc2Vzc2lvbjpjbGVhbnVwJyB9KTtcbiAgICB9XG4gIH07XG59XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSUEsU0FBUyxHQUFHLElBQUk7QUFDcEIsSUFBSUMsZUFBZSxHQUFHLElBQUk7QUFDbkIsU0FBU0MsaUJBQWlCQSxDQUFDQyxFQUFFLEVBQUU7RUFBRUYsZUFBZSxHQUFHRSxFQUFFO0FBQUU7QUFDOUQsU0FBU0MsaUJBQWlCQSxDQUFBLEVBQUc7RUFDM0I7RUFDQSxNQUFNQyxTQUFTLEdBQUdKLGVBQWUsRUFBRUssU0FBUyxHQUFHLENBQUMsRUFBRUMsTUFBTTtFQUN4RCxJQUFJRixTQUFTLEVBQUVHLFVBQVUsRUFBRSxPQUFPSCxTQUFTLENBQUNHLFVBQVUsQ0FBQyxDQUFDO0VBQ3hELE1BQU0sSUFBSUMsS0FBSyxDQUFDLG9GQUFvRixDQUFDO0FBQ3ZHO0FBQ08sU0FBU0MsWUFBWUEsQ0FBQSxFQUFHO0VBQzdCLElBQUksQ0FBQ1YsU0FBUyxFQUFFQSxTQUFTLEdBQUdJLGlCQUFpQixDQUFDLENBQUM7RUFDL0MsT0FBT0osU0FBUztBQUNsQjtBQUNPLFNBQVNXLGNBQWNBLENBQUEsRUFBRTtFQUFFWCxTQUFTLEdBQUMsSUFBSTtBQUFFO0FBRTNDLFNBQVNZLG9CQUFvQkEsQ0FBQztFQUFFQyxjQUFjO0VBQUVDO0FBQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFO0VBQ3BFLElBQUksQ0FBQ0QsY0FBYyxFQUFFLE1BQU0sSUFBSUosS0FBSyxDQUFDLG1DQUFtQyxDQUFDO0VBQ3pFUCxpQkFBaUIsQ0FBQ1csY0FBYyxDQUFDO0VBQ2pDLE1BQU1FLEdBQUcsR0FBR0QsTUFBTSxJQUFJO0lBQUVFLEtBQUtBLENBQUEsRUFBRSxDQUFDLENBQUM7SUFBRUMsS0FBS0EsQ0FBQSxFQUFFLENBQUM7RUFBRSxDQUFDO0VBQzlDLE9BQU87SUFDTFAsWUFBWTtJQUNaQyxjQUFjO0lBQ2RPLE9BQU9BLENBQUEsRUFBSTtNQUNUUCxjQUFjLENBQUMsQ0FBQztNQUNoQlQsaUJBQWlCLENBQUMsSUFBSSxDQUFDO01BQ3ZCYSxHQUFHLENBQUNDLEtBQUssQ0FBQyxzQkFBc0IsRUFBRTtRQUFFRyxPQUFPLEVBQUU7TUFBa0IsQ0FBQyxDQUFDO0lBQ25FO0VBQ0YsQ0FBQztBQUNIIiwiaWdub3JlTGlzdCI6W119