2fc12c1f6317630d1336723cf3b5c91f
"use strict";

var _jsdom = require("jsdom");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (const t in e) "default" !== t && {}.hasOwnProperty.call(e, t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, t)) && (i.get || i.set) ? o(f, t, i) : f[t] = e[t]); return f; })(e, t); } /**
 * Regression test for skeleton UI cleanup in projectListComponent
 * Tests that skeleton elements are properly removed and never orphaned
 */
// Mock dependencies
const createMockDeps = () => {
  const dom = new _jsdom.JSDOM('<!DOCTYPE html><div id="projectListContainer"></div>', {
    url: "http://localhost",
    pretendToBeVisual: true,
    resources: "usable"
  });
  const document = dom.window.document;
  const window = dom.window;

  // Mock localStorage
  const localStorageMock = {
    getItem: jest.fn(() => null),
    setItem: jest.fn(),
    removeItem: jest.fn(),
    clear: jest.fn()
  };
  Object.defineProperty(window, 'localStorage', {
    value: localStorageMock
  });
  return {
    DependencySystem: {
      modules: {
        get: () => null
      }
    },
    eventHandlers: {
      trackListener: jest.fn(),
      cleanupListeners: jest.fn()
    },
    modalManager: {
      show: jest.fn()
    },
    app: {
      state: {
        isAuthenticated: true
      }
    },
    storage: {
      getItem: jest.fn(() => null)
    },
    sanitizer: {
      sanitize: html => html
    },
    apiClient: {},
    domAPI: {
      getDocument: () => document,
      getElementById: id => document.getElementById(id),
      querySelector: (sel, parent = document) => parent.querySelector(sel),
      querySelectorAll: (sel, parent = document) => parent.querySelectorAll(sel),
      createElement: tag => document.createElement(tag),
      setInnerHTML: (el, html) => {
        el.innerHTML = html;
      },
      dispatchEvent: jest.fn()
    },
    browserService: {
      getWindow: () => ({
        ...window,
        requestAnimationFrame: fn => setTimeout(fn, 0)
      }),
      setTimeout: (fn, delay) => setTimeout(fn, delay)
    },
    globalUtils: {},
    domReadinessService: {
      dependenciesAndElements: jest.fn().mockResolvedValue(true),
      waitForEvent: jest.fn().mockResolvedValue(true)
    },
    APP_CONFIG: {
      TIMEOUTS: {}
    },
    logger: {
      info: jest.fn(),
      warn: jest.fn(),
      error: jest.fn(),
      debug: jest.fn()
    }
  };
};
describe('ProjectListComponent Skeleton Cleanup', () => {
  let component;
  let deps;
  let document;
  beforeEach(async () => {
    // Import component dynamically to avoid module loading issues
    const {
      createProjectListComponent
    } = await Promise.resolve().then(() => _interopRequireWildcard(require('../static/js/projectListComponent.js')));
    deps = createMockDeps();
    document = deps.domAPI.getDocument();

    // Create container and grid elements
    const container = document.getElementById('projectListContainer');
    container.innerHTML = '<div class="mobile-grid" id="projectCardsPanel"></div>';
    component = createProjectListComponent(deps);
    await component.initialize();
  });
  afterEach(() => {
    if (component?.destroy) {
      component.destroy();
    }
  });
  test('should remove all skeleton elements when renderProjects is called', async () => {
    // Show loading state to create skeletons
    const gridElement = document.querySelector('.mobile-grid');
    expect(gridElement).toBeTruthy();

    // Manually create skeletons (simulating _showLoadingState)
    for (let i = 0; i < 6; i++) {
      const skeleton = document.createElement('div');
      skeleton.className = 'bg-base-200 animate-pulse rounded-box p-4 mb-2 max-w-full w-full';
      gridElement.appendChild(skeleton);
    }

    // Verify skeletons exist
    expect(document.querySelectorAll('.animate-pulse')).toHaveLength(6);

    // Call renderProjects with mock data
    const mockProjects = [{
      id: '1',
      name: 'Test Project 1'
    }, {
      id: '2',
      name: 'Test Project 2'
    }];
    component.renderProjects(mockProjects);

    // Verify all skeletons are removed
    expect(document.querySelectorAll('.animate-pulse')).toHaveLength(0);
  });
  test('should prevent skeleton duplication on multiple _showLoadingState calls', () => {
    const gridElement = document.querySelector('.mobile-grid');

    // Simulate calling _showLoadingState multiple times
    // (We'll manually create skeletons to test the cleanup logic)

    // First call - create initial skeletons
    for (let i = 0; i < 6; i++) {
      const skeleton = document.createElement('div');
      skeleton.className = 'bg-base-200 animate-pulse rounded-box p-4 mb-2 max-w-full w-full';
      gridElement.appendChild(skeleton);
    }
    expect(document.querySelectorAll('.animate-pulse')).toHaveLength(6);

    // Second call - should remove old skeletons before creating new ones
    // (This simulates the _removeAllSkeletons() call in _showLoadingState)
    document.querySelectorAll('.animate-pulse').forEach(el => el.remove());
    for (let i = 0; i < 6; i++) {
      const skeleton = document.createElement('div');
      skeleton.className = 'bg-base-200 animate-pulse rounded-box p-4 mb-2 max-w-full w-full';
      gridElement.appendChild(skeleton);
    }

    // Should still only have 6 skeletons, not 12
    expect(document.querySelectorAll('.animate-pulse')).toHaveLength(6);
  });
  test('should handle grid element reassignment without orphaning skeletons', () => {
    const container = document.getElementById('projectListContainer');
    const originalGrid = document.querySelector('.mobile-grid');

    // Add skeletons to original grid
    for (let i = 0; i < 3; i++) {
      const skeleton = document.createElement('div');
      skeleton.className = 'bg-base-200 animate-pulse rounded-box p-4 mb-2 max-w-full w-full';
      originalGrid.appendChild(skeleton);
    }
    expect(document.querySelectorAll('.animate-pulse')).toHaveLength(3);

    // Create new grid (simulating template injection)
    const newGrid = document.createElement('div');
    newGrid.className = 'mobile-grid';
    newGrid.id = 'projectCardsPanel-new';
    container.appendChild(newGrid);

    // Simulate the fix logic from projectListHtmlLoaded
    const oldSkeletons = originalGrid.querySelectorAll('.animate-pulse');
    oldSkeletons.forEach(skeleton => skeleton.remove());
    if (!originalGrid.parentNode) {
      originalGrid.remove();
    }

    // Verify skeletons are cleaned up
    expect(document.querySelectorAll('.animate-pulse')).toHaveLength(0);
  });
  test('should handle renderProjects with empty data gracefully', () => {
    // Create skeletons first
    const gridElement = document.querySelector('.mobile-grid');
    for (let i = 0; i < 6; i++) {
      const skeleton = document.createElement('div');
      skeleton.className = 'bg-base-200 animate-pulse rounded-box p-4 mb-2 max-w-full w-full';
      gridElement.appendChild(skeleton);
    }
    expect(document.querySelectorAll('.animate-pulse')).toHaveLength(6);

    // Call renderProjects with empty array
    component.renderProjects([]);

    // Skeletons should be removed even for empty results
    expect(document.querySelectorAll('.animate-pulse')).toHaveLength(0);
  });
  test('should handle renderProjects with auth error gracefully', () => {
    // Create skeletons first
    const gridElement = document.querySelector('.mobile-grid');
    for (let i = 0; i < 6; i++) {
      const skeleton = document.createElement('div');
      skeleton.className = 'bg-base-200 animate-pulse rounded-box p-4 mb-2 max-w-full w-full';
      gridElement.appendChild(skeleton);
    }
    expect(document.querySelectorAll('.animate-pulse')).toHaveLength(6);

    // Call renderProjects with auth error
    component.renderProjects({
      error: 'Unauthorized',
      reason: 'auth_required'
    });

    // Skeletons should be removed even for auth errors
    expect(document.querySelectorAll('.animate-pulse')).toHaveLength(0);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,