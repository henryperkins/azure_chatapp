3c0049eb5c9cfe875e9b5fabad1f6159
"use strict";

var _eventHandler = require("../../static/js/eventHandler.js");
function createDependencySystem() {
  const modules = new Map();
  return {
    modules,
    register(n, v) {
      modules.set(n, v);
    }
  };
}

/**
 * Minimal stubs required by createEventHandlers.
 */
function createStubDomAPI() {
  return {
    addEventListener(el, evt, handler, opts) {
      el.addEventListener(evt, handler, opts);
    },
    removeEventListener(el, evt, handler, opts) {
      el.removeEventListener(evt, handler, opts);
    },
    closest: () => null,
    getDocument: () => ({
      addEventListener() {},
      removeEventListener() {}
    }),
    setProperty() {},
    setInnerHTML() {},
    setTextContent() {},
    querySelector() {
      return null;
    },
    dispatchEvent() {}
  };
}
function createStubBrowserService() {
  return {
    setTimeout: (fn, t) => {
      const id = setTimeout(fn, t);
      return id;
    },
    clearTimeout: id => clearTimeout(id),
    getWindow: () => ({})
  };
}
describe('EventHandlers â€“ listener leak detection', () => {
  test('cleanupListeners removes all tracked listeners (no leaks)', () => {
    // Provide CustomEvent polyfill for Node
    if (typeof global.CustomEvent !== 'function') {
      global.CustomEvent = class CustomEvent {
        constructor(n, d) {
          this.type = n;
          this.detail = d?.detail;
        }
      };
    }
    const DS = createDependencySystem();
    const domAPI = createStubDomAPI();
    const browserService = createStubBrowserService();
    const logger = {
      debug() {},
      info() {},
      warn() {},
      error() {}
    };
    const errorReporter = {
      report() {}
    };
    const EH = (0, _eventHandler.createEventHandlers)({
      DependencySystem: DS,
      domAPI,
      browserService,
      APP_CONFIG: {},
      logger,
      errorReporter,
      safeHandler: fn => fn
    });

    // Track a couple of listeners
    const target = new EventTarget();
    const handler1 = jest.fn();
    const handler2 = jest.fn();
    EH.trackListener(target, 'testEvent', handler1, {
      context: 'leakTest'
    });
    EH.trackListener(target, 'testEvent', handler2, {
      context: 'leakTest'
    });
    expect(EH.getActiveListenerCount()).toBe(1); // Same element map, but still >0

    // Cleanup by context
    EH.cleanupListeners({
      context: 'leakTest'
    });
    expect(EH.getActiveListenerCount()).toBe(0);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZXZlbnRIYW5kbGVyIiwicmVxdWlyZSIsImNyZWF0ZURlcGVuZGVuY3lTeXN0ZW0iLCJtb2R1bGVzIiwiTWFwIiwicmVnaXN0ZXIiLCJuIiwidiIsInNldCIsImNyZWF0ZVN0dWJEb21BUEkiLCJhZGRFdmVudExpc3RlbmVyIiwiZWwiLCJldnQiLCJoYW5kbGVyIiwib3B0cyIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJjbG9zZXN0IiwiZ2V0RG9jdW1lbnQiLCJzZXRQcm9wZXJ0eSIsInNldElubmVySFRNTCIsInNldFRleHRDb250ZW50IiwicXVlcnlTZWxlY3RvciIsImRpc3BhdGNoRXZlbnQiLCJjcmVhdGVTdHViQnJvd3NlclNlcnZpY2UiLCJzZXRUaW1lb3V0IiwiZm4iLCJ0IiwiaWQiLCJjbGVhclRpbWVvdXQiLCJnZXRXaW5kb3ciLCJkZXNjcmliZSIsInRlc3QiLCJnbG9iYWwiLCJDdXN0b21FdmVudCIsImNvbnN0cnVjdG9yIiwiZCIsInR5cGUiLCJkZXRhaWwiLCJEUyIsImRvbUFQSSIsImJyb3dzZXJTZXJ2aWNlIiwibG9nZ2VyIiwiZGVidWciLCJpbmZvIiwid2FybiIsImVycm9yIiwiZXJyb3JSZXBvcnRlciIsInJlcG9ydCIsIkVIIiwiY3JlYXRlRXZlbnRIYW5kbGVycyIsIkRlcGVuZGVuY3lTeXN0ZW0iLCJBUFBfQ09ORklHIiwic2FmZUhhbmRsZXIiLCJ0YXJnZXQiLCJFdmVudFRhcmdldCIsImhhbmRsZXIxIiwiamVzdCIsImhhbmRsZXIyIiwidHJhY2tMaXN0ZW5lciIsImNvbnRleHQiLCJleHBlY3QiLCJnZXRBY3RpdmVMaXN0ZW5lckNvdW50IiwidG9CZSIsImNsZWFudXBMaXN0ZW5lcnMiXSwic291cmNlcyI6WyJ2aWV3LWxpZmVjeWNsZS1sZWFrLnRlc3QuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY3JlYXRlRXZlbnRIYW5kbGVycyB9IGZyb20gJy4uLy4uL3N0YXRpYy9qcy9ldmVudEhhbmRsZXIuanMnO1xuXG5mdW5jdGlvbiBjcmVhdGVEZXBlbmRlbmN5U3lzdGVtICgpIHtcbiAgY29uc3QgbW9kdWxlcyA9IG5ldyBNYXAoKTtcbiAgcmV0dXJuIHtcbiAgICBtb2R1bGVzLFxuICAgIHJlZ2lzdGVyIChuLCB2KSB7IG1vZHVsZXMuc2V0KG4sIHYpOyB9XG4gIH07XG59XG5cbi8qKlxuICogTWluaW1hbCBzdHVicyByZXF1aXJlZCBieSBjcmVhdGVFdmVudEhhbmRsZXJzLlxuICovXG5mdW5jdGlvbiBjcmVhdGVTdHViRG9tQVBJICgpIHtcbiAgcmV0dXJuIHtcbiAgICBhZGRFdmVudExpc3RlbmVyIChlbCwgZXZ0LCBoYW5kbGVyLCBvcHRzKSB7IGVsLmFkZEV2ZW50TGlzdGVuZXIoZXZ0LCBoYW5kbGVyLCBvcHRzKTsgfSxcbiAgICByZW1vdmVFdmVudExpc3RlbmVyIChlbCwgZXZ0LCBoYW5kbGVyLCBvcHRzKSB7IGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZ0LCBoYW5kbGVyLCBvcHRzKTsgfSxcbiAgICBjbG9zZXN0OiAoKSA9PiBudWxsLFxuICAgIGdldERvY3VtZW50OiAoKSA9PiAoeyBhZGRFdmVudExpc3RlbmVyICgpIHt9LCByZW1vdmVFdmVudExpc3RlbmVyICgpIHt9IH0pLFxuICAgIHNldFByb3BlcnR5ICgpIHt9LFxuICAgIHNldElubmVySFRNTCAoKSB7fSxcbiAgICBzZXRUZXh0Q29udGVudCAoKSB7fSxcbiAgICBxdWVyeVNlbGVjdG9yICgpIHsgcmV0dXJuIG51bGw7IH0sXG4gICAgZGlzcGF0Y2hFdmVudCAoKSB7fSxcbiAgfTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlU3R1YkJyb3dzZXJTZXJ2aWNlICgpIHtcbiAgcmV0dXJuIHtcbiAgICBzZXRUaW1lb3V0OiAoZm4sIHQpID0+IHsgY29uc3QgaWQgPSBzZXRUaW1lb3V0KGZuLCB0KTsgcmV0dXJuIGlkOyB9LFxuICAgIGNsZWFyVGltZW91dDogKGlkKSA9PiBjbGVhclRpbWVvdXQoaWQpLFxuICAgIGdldFdpbmRvdzogKCkgPT4gKHt9KVxuICB9O1xufVxuXG5kZXNjcmliZSgnRXZlbnRIYW5kbGVycyDigJMgbGlzdGVuZXIgbGVhayBkZXRlY3Rpb24nLCAoKSA9PiB7XG4gIHRlc3QoJ2NsZWFudXBMaXN0ZW5lcnMgcmVtb3ZlcyBhbGwgdHJhY2tlZCBsaXN0ZW5lcnMgKG5vIGxlYWtzKScsICgpID0+IHtcbiAgICAvLyBQcm92aWRlIEN1c3RvbUV2ZW50IHBvbHlmaWxsIGZvciBOb2RlXG4gICAgaWYgKHR5cGVvZiBnbG9iYWwuQ3VzdG9tRXZlbnQgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGdsb2JhbC5DdXN0b21FdmVudCA9IGNsYXNzIEN1c3RvbUV2ZW50IHsgY29uc3RydWN0b3IgKG4sIGQpIHsgdGhpcy50eXBlID0gbjsgdGhpcy5kZXRhaWwgPSBkPy5kZXRhaWw7IH0gfTtcbiAgICB9XG5cbiAgICBjb25zdCBEUyA9IGNyZWF0ZURlcGVuZGVuY3lTeXN0ZW0oKTtcblxuICAgIGNvbnN0IGRvbUFQSSA9IGNyZWF0ZVN0dWJEb21BUEkoKTtcbiAgICBjb25zdCBicm93c2VyU2VydmljZSA9IGNyZWF0ZVN0dWJCcm93c2VyU2VydmljZSgpO1xuXG4gICAgY29uc3QgbG9nZ2VyID0geyBkZWJ1ZyAoKSB7fSwgaW5mbyAoKSB7fSwgd2FybiAoKSB7fSwgZXJyb3IgKCkge30gfTtcbiAgICBjb25zdCBlcnJvclJlcG9ydGVyID0geyByZXBvcnQgKCkge30gfTtcblxuICAgIGNvbnN0IEVIID0gY3JlYXRlRXZlbnRIYW5kbGVycyh7XG4gICAgICBEZXBlbmRlbmN5U3lzdGVtOiBEUyxcbiAgICAgIGRvbUFQSSxcbiAgICAgIGJyb3dzZXJTZXJ2aWNlLFxuICAgICAgQVBQX0NPTkZJRzoge30sXG4gICAgICBsb2dnZXIsXG4gICAgICBlcnJvclJlcG9ydGVyLFxuICAgICAgc2FmZUhhbmRsZXI6IChmbikgPT4gZm5cbiAgICB9KTtcblxuICAgIC8vIFRyYWNrIGEgY291cGxlIG9mIGxpc3RlbmVyc1xuICAgIGNvbnN0IHRhcmdldCA9IG5ldyBFdmVudFRhcmdldCgpO1xuICAgIGNvbnN0IGhhbmRsZXIxID0gamVzdC5mbigpO1xuICAgIGNvbnN0IGhhbmRsZXIyID0gamVzdC5mbigpO1xuXG4gICAgRUgudHJhY2tMaXN0ZW5lcih0YXJnZXQsICd0ZXN0RXZlbnQnLCBoYW5kbGVyMSwgeyBjb250ZXh0OiAnbGVha1Rlc3QnIH0pO1xuICAgIEVILnRyYWNrTGlzdGVuZXIodGFyZ2V0LCAndGVzdEV2ZW50JywgaGFuZGxlcjIsIHsgY29udGV4dDogJ2xlYWtUZXN0JyB9KTtcblxuICAgIGV4cGVjdChFSC5nZXRBY3RpdmVMaXN0ZW5lckNvdW50KCkpLnRvQmUoMSk7IC8vIFNhbWUgZWxlbWVudCBtYXAsIGJ1dCBzdGlsbCA+MFxuXG4gICAgLy8gQ2xlYW51cCBieSBjb250ZXh0XG4gICAgRUguY2xlYW51cExpc3RlbmVycyh7IGNvbnRleHQ6ICdsZWFrVGVzdCcgfSk7XG5cbiAgICBleHBlY3QoRUguZ2V0QWN0aXZlTGlzdGVuZXJDb3VudCgpKS50b0JlKDApO1xuICB9KTtcbn0pO1xuIl0sIm1hcHBpbmdzIjoiOztBQUFBLElBQUFBLGFBQUEsR0FBQUMsT0FBQTtBQUVBLFNBQVNDLHNCQUFzQkEsQ0FBQSxFQUFJO0VBQ2pDLE1BQU1DLE9BQU8sR0FBRyxJQUFJQyxHQUFHLENBQUMsQ0FBQztFQUN6QixPQUFPO0lBQ0xELE9BQU87SUFDUEUsUUFBUUEsQ0FBRUMsQ0FBQyxFQUFFQyxDQUFDLEVBQUU7TUFBRUosT0FBTyxDQUFDSyxHQUFHLENBQUNGLENBQUMsRUFBRUMsQ0FBQyxDQUFDO0lBQUU7RUFDdkMsQ0FBQztBQUNIOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFNBQVNFLGdCQUFnQkEsQ0FBQSxFQUFJO0VBQzNCLE9BQU87SUFDTEMsZ0JBQWdCQSxDQUFFQyxFQUFFLEVBQUVDLEdBQUcsRUFBRUMsT0FBTyxFQUFFQyxJQUFJLEVBQUU7TUFBRUgsRUFBRSxDQUFDRCxnQkFBZ0IsQ0FBQ0UsR0FBRyxFQUFFQyxPQUFPLEVBQUVDLElB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