71cb50b40739129327c15725692db7f5
"use strict";

var _chat = require("../../static/js/chat.js");
function createDependencySystem() {
  const modules = new Map();
  return {
    modules,
    register(n, v) {
      modules.set(n, v);
    }
  };
}

// Minimal stub helpers -----------------------------------------------------
const stubDomAPI = {
  querySelector: () => null,
  getElementById: () => null,
  querySelectorAll: () => ({
    length: 0
  }),
  appendChild() {},
  replaceChildren() {},
  createElement: () => ({}),
  removeChild() {},
  setInnerHTML() {},
  setTextContent() {},
  getDocument: () => ({
    addEventListener() {},
    removeEventListener() {}
  }),
  addClass() {},
  removeClass() {},
  getWindow: () => ({
    addEventListener() {},
    removeEventListener() {}
  }),
  dispatchEvent() {}
};
const stubEventHandlers = {
  trackListener() {},
  cleanupListeners() {},
  createCustomEvent: (n, d) => ({
    type: n,
    detail: d
  })
};
const stubDomReadinessService = {
  documentReady: () => Promise.resolve(),
  dependenciesAndElements: () => Promise.resolve()
};
const stubBrowserService = {
  getWindow: () => ({
    CustomEvent: typeof global.CustomEvent === 'function' ? global.CustomEvent : function () {}
  }),
  URLSearchParams: URLSearchParams,
  getLocation: () => ({
    search: '',
    href: '',
    pathname: ''
  }),
  buildUrl: () => '/',
  pushState() {},
  replaceState() {}
};
describe('ChatManager regression â€“ bootstrap sanity', () => {
  test('initialize() resolves without throwing', async () => {
    if (typeof global.CustomEvent !== 'function') {
      global.CustomEvent = class CustomEvent {
        constructor(n, d) {
          this.type = n;
          this.detail = d?.detail;
        }
      };
    }
    const DS = createDependencySystem();
    DS.register('chatUIEnhancements', {}); // Skip actual enhancements
    DS.register('AppBus', new EventTarget());
    DS.register('auth', {
      AuthBus: new EventTarget()
    });
    const mgr = (0, _chat.createChatManager)({
      apiRequest: () => Promise.resolve({
        status: 'ok'
      }),
      app: {
        state: {
          isAuthenticated: true
        }
      },
      eventHandlers: stubEventHandlers,
      modelConfig: {
        getConfig: () => ({})
      },
      projectDetailsComponent: {},
      isValidProjectId: () => true,
      domAPI: stubDomAPI,
      navAPI: {
        getSearch: () => '',
        getHref: () => '',
        pushState: () => {},
        getPathname: () => ''
      },
      DOMPurify: {
        sanitize: h => h
      },
      apiEndpoints: {},
      domReadinessService: stubDomReadinessService,
      logger: {
        debug() {},
        info() {},
        warn() {},
        error() {}
      },
      DependencySystem: DS,
      APP_CONFIG: {},
      browserService: stubBrowserService,
      authenticationService: {
        isAuthenticated: () => true,
        getCurrentUser: () => ({
          id: 1
        })
      },
      projectContextService: {
        getCurrentProjectId: () => 'abc123',
        getCurrentProject: () => ({
          id: 'abc123'
        })
      },
      chatUIEnhancements: {
        appendMessage: () => {},
        clearConversation: () => {},
        showTypingIndicator: () => {},
        hideTypingIndicator: () => {}
      },
      kbReadinessService: {
        checkReadiness: () => Promise.resolve(true)
      },
      tokenStatsManager: {
        updateConversationStats: () => {},
        clearStats: () => {}
      },
      // Required Phase 2 modules
      conversationManager: {
        createConversation: () => Promise.resolve({
          id: 'conv1'
        }),
        loadConversation: () => Promise.resolve(),
        loadConversationHistory: () => Promise.resolve([]),
        getCurrentConversationId: () => 'conv1',
        setCurrentConversationId: () => {},
        cleanup: () => {}
      },
      messageHandler: {
        sendMessage: () => Promise.resolve(),
        estimateTokens: () => Promise.resolve(100),
        handleResponse: () => {},
        cleanup: () => {}
      },
      chatUIController: {
        attachUI: () => {},
        detachUI: () => {},
        updateInputState: () => {},
        cleanup: () => {}
      },
      eventService: {
        emit: () => {},
        on: () => () => {},
        off: () => {},
        once: () => {},
        waitFor: () => Promise.resolve(),
        getAppBus() {
          return new EventTarget();
        },
        _getBus() {
          return this.getAppBus();
        },
        cleanup: () => {}
      }
    });
    await expect(mgr.initialize({
      projectId: 'abc123'
    })).resolves.not.toThrow();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,