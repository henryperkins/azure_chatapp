ba5f55086cb4cb8cc384e84fdf382d1e
"use strict";

var _knowledgeBaseComponent = require("../../static/js/knowledgeBaseComponent.js");
function createDependencySystem() {
  const modules = new Map();
  return {
    modules,
    register(name, val) {
      modules.set(name, val);
    }
  };
}
describe('DI contract â€“ KnowledgeBaseComponent', () => {
  test('factory instantiates with required dependencies registered in DependencySystem', () => {
    const DS = createDependencySystem();
    DS.register('KBManagerFactory', () => ({
      cleanup() {}
    }));
    DS.register('KBSearchHandlerFactory', () => ({
      cleanup() {}
    }));
    DS.register('sanitizer', {
      sanitize: html => html
    });
    DS.register('appModule', {});
    DS.register('projectManager', {});
    DS.register('eventHandlers', {
      trackListener() {},
      cleanupListeners() {},
      createCustomEvent: (n, d) => ({
        type: n,
        detail: d
      })
    });
    DS.register('uiUtils', {});
    DS.register('modalManager', {
      closeModal() {}
    });
    DS.register('domAPI', {
      getWindow: () => ({
        CustomEvent: typeof global.CustomEvent === 'function' ? global.CustomEvent : class {
          constructor(n, d) {
            this.type = n;
            this.detail = d?.detail;
          }
        }
      }),
      getDocument: () => ({}),
      setInnerHTML() {},
      setTextContent() {},
      setProperty() {},
      addClass() {},
      removeClass() {},
      dispatchEvent() {}
    });
    DS.register('domReadinessService', {
      waitForEvent: () => Promise.resolve(),
      dependenciesAndElements: () => Promise.resolve()
    });
    DS.register('logger', {
      debug() {},
      info() {},
      warn() {},
      error() {}
    });
    expect(() => (0, _knowledgeBaseComponent.createKnowledgeBaseComponent)({
      DependencySystem: DS
    })).not.toThrow();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfa25vd2xlZGdlQmFzZUNvbXBvbmVudCIsInJlcXVpcmUiLCJjcmVhdGVEZXBlbmRlbmN5U3lzdGVtIiwibW9kdWxlcyIsIk1hcCIsInJlZ2lzdGVyIiwibmFtZSIsInZhbCIsInNldCIsImRlc2NyaWJlIiwidGVzdCIsIkRTIiwiY2xlYW51cCIsInNhbml0aXplIiwiaHRtbCIsInRyYWNrTGlzdGVuZXIiLCJjbGVhbnVwTGlzdGVuZXJzIiwiY3JlYXRlQ3VzdG9tRXZlbnQiLCJuIiwiZCIsInR5cGUiLCJkZXRhaWwiLCJjbG9zZU1vZGFsIiwiZ2V0V2luZG93IiwiQ3VzdG9tRXZlbnQiLCJnbG9iYWwiLCJjb25zdHJ1Y3RvciIsImdldERvY3VtZW50Iiwic2V0SW5uZXJIVE1MIiwic2V0VGV4dENvbnRlbnQiLCJzZXRQcm9wZXJ0eSIsImFkZENsYXNzIiwicmVtb3ZlQ2xhc3MiLCJkaXNwYXRjaEV2ZW50Iiwid2FpdEZvckV2ZW50IiwiUHJvbWlzZSIsInJlc29sdmUiLCJkZXBlbmRlbmNpZXNBbmRFbGVtZW50cyIsImRlYnVnIiwiaW5mbyIsIndhcm4iLCJlcnJvciIsImV4cGVjdCIsImNyZWF0ZUtub3dsZWRnZUJhc2VDb21wb25lbnQiLCJEZXBlbmRlbmN5U3lzdGVtIiwibm90IiwidG9UaHJvdyJdLCJzb3VyY2VzIjpbImRpLWNvbnRyYWN0cy50ZXN0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNyZWF0ZUtub3dsZWRnZUJhc2VDb21wb25lbnQgfSBmcm9tICcuLi8uLi9zdGF0aWMvanMva25vd2xlZGdlQmFzZUNvbXBvbmVudC5qcyc7XG5cbmZ1bmN0aW9uIGNyZWF0ZURlcGVuZGVuY3lTeXN0ZW0gKCkge1xuICBjb25zdCBtb2R1bGVzID0gbmV3IE1hcCgpO1xuICByZXR1cm4ge1xuICAgIG1vZHVsZXMsXG4gICAgcmVnaXN0ZXIgKG5hbWUsIHZhbCkge1xuICAgICAgbW9kdWxlcy5zZXQobmFtZSwgdmFsKTtcbiAgICB9XG4gIH07XG59XG5cbmRlc2NyaWJlKCdESSBjb250cmFjdCDigJMgS25vd2xlZGdlQmFzZUNvbXBvbmVudCcsICgpID0+IHtcbiAgdGVzdCgnZmFjdG9yeSBpbnN0YW50aWF0ZXMgd2l0aCByZXF1aXJlZCBkZXBlbmRlbmNpZXMgcmVnaXN0ZXJlZCBpbiBEZXBlbmRlbmN5U3lzdGVtJywgKCkgPT4ge1xuICAgIGNvbnN0IERTID0gY3JlYXRlRGVwZW5kZW5jeVN5c3RlbSgpO1xuXG4gICAgRFMucmVnaXN0ZXIoJ0tCTWFuYWdlckZhY3RvcnknLCAoKSA9PiAoeyBjbGVhbnVwICgpIHt9IH0pKTtcbiAgICBEUy5yZWdpc3RlcignS0JTZWFyY2hIYW5kbGVyRmFjdG9yeScsICgpID0+ICh7IGNsZWFudXAgKCkge30gfSkpO1xuICAgIERTLnJlZ2lzdGVyKCdzYW5pdGl6ZXInLCB7IHNhbml0aXplOiAoaHRtbCkgPT4gaHRtbCB9KTtcbiAgICBEUy5yZWdpc3RlcignYXBwTW9kdWxlJywge30pO1xuICAgIERTLnJlZ2lzdGVyKCdwcm9qZWN0TWFuYWdlcicsIHt9KTtcbiAgICBEUy5yZWdpc3RlcignZXZlbnRIYW5kbGVycycsIHtcbiAgICAgIHRyYWNrTGlzdGVuZXIgKCkge30sXG4gICAgICBjbGVhbnVwTGlzdGVuZXJzICgpIHt9LFxuICAgICAgY3JlYXRlQ3VzdG9tRXZlbnQ6IChuLCBkKSA9PiAoeyB0eXBlOiBuLCBkZXRhaWw6IGQgfSlcbiAgICB9KTtcbiAgICBEUy5yZWdpc3RlcigndWlVdGlscycsIHt9KTtcbiAgICBEUy5yZWdpc3RlcignbW9kYWxNYW5hZ2VyJywgeyBjbG9zZU1vZGFsICgpIHt9IH0pO1xuICAgIERTLnJlZ2lzdGVyKCdkb21BUEknLCB7XG4gICAgZ2V0V2luZG93OiAoKSA9PiAoeyBDdXN0b21FdmVudDogKHR5cGVvZiBnbG9iYWwuQ3VzdG9tRXZlbnQgPT09ICdmdW5jdGlvbicpID8gZ2xvYmFsLkN1c3RvbUV2ZW50IDogY2xhc3MgeyBjb25zdHJ1Y3RvcihuLGQpe3RoaXMudHlwZT1uOyB0aGlzLmRldGFpbD1kPy5kZXRhaWw7fSB9IH0pLFxuICAgICAgZ2V0RG9jdW1lbnQ6ICgpID0+ICh7fSksXG4gICAgICBzZXRJbm5lckhUTUwgKCkge30sXG4gICAgICBzZXRUZXh0Q29udGVudCAoKSB7fSxcbiAgICAgIHNldFByb3BlcnR5ICgpIHt9LFxuICAgICAgYWRkQ2xhc3MgKCkge30sXG4gICAgICByZW1vdmVDbGFzcyAoKSB7fSxcbiAgICAgIGRpc3BhdGNoRXZlbnQgKCkge31cbiAgICB9KTtcbiAgICBEUy5yZWdpc3RlcignZG9tUmVhZGluZXNzU2VydmljZScsIHtcbiAgICAgIHdhaXRGb3JFdmVudDogKCkgPT4gUHJvbWlzZS5yZXNvbHZlKCksXG4gICAgICBkZXBlbmRlbmNpZXNBbmRFbGVtZW50czogKCkgPT4gUHJvbWlzZS5yZXNvbHZlKClcbiAgICB9KTtcbiAgICBEUy5yZWdpc3RlcignbG9nZ2VyJywgeyBkZWJ1ZyAoKSB7fSwgaW5mbyAoKSB7fSwgd2FybiAoKSB7fSwgZXJyb3IgKCkge30gfSk7XG5cbiAgICBleHBlY3QoKCkgPT4gY3JlYXRlS25vd2xlZGdlQmFzZUNvbXBvbmVudCh7IERlcGVuZGVuY3lTeXN0ZW06IERTIH0pKS5ub3QudG9UaHJvdygpO1xuICB9KTtcbn0pO1xuIl0sIm1hcHBpbmdzIjoiOztBQUFBLElBQUFBLHVCQUFBLEdBQUFDLE9BQUE7QUFFQSxTQUFTQyxzQkFBc0JBLENBQUEsRUFBSTtFQUNqQyxNQUFNQyxPQUFPLEdBQUcsSUFBSUMsR0FBRyxDQUFDLENBQUM7RUFDekIsT0FBTztJQUNMRCxPQUFPO0lBQ1BFLFFBQVFBLENBQUVDLElBQUksRUFBRUMsR0FBRyxFQUFFO01BQ25CSixPQUFPLENBQUNLLEdBQUcsQ0FBQ0YsSUFBSSxFQUFFQyxHQUFHLENBQUM7SUFDeEI7RUFDRixDQUFDO0FBQ0g7QUFFQUUsUUFBUSxDQUFDLHNDQUFzQyxFQUFFLE1BQU07RUFDckRDLElBQUksQ0FBQyxnRkFBZ0YsRUFBRSxNQUFNO0lBQzNGLE1BQU1D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