5e6b1ab7705c0f068a594066310ce8aa
"use strict";

var _appInitializer = require("../../static/js/init/appInitializer.js");
/**
 * Basic smoke test for createAppInitializer
 * ----------------------------------------------------------
 * Verifies that the bootstrap sequence resolves without
 * throwing given a minimal set of stubbed dependencies.
 * This is intended to detect regressions where new mandatory
 * DI parameters are added to appInitializer without updating
 * downstream boot scripts or tests.
 */

function createMockDependencySystem() {
  const modules = new Map();
  return {
    modules,
    register: (key, value) => modules.set(key, value),
    get: key => modules.get(key)
  };
}
function createStubBrowserService() {
  const win = {
    setTimeout: fn => fn && fn(),
    clearTimeout: () => {},
    EventTarget,
    performance: {
      now: () => 0
    },
    crypto: {
      randomUUID: () => '00000000-0000-4000-8000-000000000000'
    },
    DOMPurify: {
      sanitize: html => html
    },
    Event: function () {}
  };
  const doc = {
    readyState: 'complete',
    addEventListener: () => {},
    removeEventListener: () => {},
    getElementById: () => null,
    querySelector: () => null,
    createEvent: () => ({
      initCustomEvent: () => {}
    }),
    createElement: () => ({
      style: {}
    }),
    body: {
      appendChild: () => {},
      removeChild: () => {}
    }
  };
  win.document = doc;
  return {
    getWindow: () => win,
    getDocument: () => doc,
    setTimeout: win.setTimeout,
    clearTimeout: win.clearTimeout
  };
}
function createNoopFactory() {
  return () => ({
    cleanup() {}
  });
}
test('appInitializer completes bootstrap without error', async () => {
  const DependencySystem = createMockDependencySystem();
  const appInit = (0, _appInitializer.createAppInitializer)({
    DependencySystem,
    browserService: createStubBrowserService(),
    createChatManager: createNoopFactory(),
    createApiEndpoints: () => ({
      endpoints: {
        PROJECTS: '/api/projects/',
        DETAIL: '/api/projects/{id}/'
      },
      cleanup() {}
    }),
    MODAL_MAPPINGS: {},
    APP_CONFIG: {
      TIMEOUTS: {
        DOM_READY: 1000
      }
    }
  });
  await expect(appInit.initializeApp()).resolves.not.toThrow();
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfYXBwSW5pdGlhbGl6ZXIiLCJyZXF1aXJlIiwiY3JlYXRlTW9ja0RlcGVuZGVuY3lTeXN0ZW0iLCJtb2R1bGVzIiwiTWFwIiwicmVnaXN0ZXIiLCJrZXkiLCJ2YWx1ZSIsInNldCIsImdldCIsImNyZWF0ZVN0dWJCcm93c2VyU2VydmljZSIsIndpbiIsInNldFRpbWVvdXQiLCJmbiIsImNsZWFyVGltZW91dCIsIkV2ZW50VGFyZ2V0IiwicGVyZm9ybWFuY2UiLCJub3ciLCJjcnlwdG8iLCJyYW5kb21VVUlEIiwiRE9NUHVyaWZ5Iiwic2FuaXRpemUiLCJodG1sIiwiRXZlbnQiLCJkb2MiLCJyZWFkeVN0YXRlIiwiYWRkRXZlbnRMaXN0ZW5lciIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJnZXRFbGVtZW50QnlJZCIsInF1ZXJ5U2VsZWN0b3IiLCJjcmVhdGVFdmVudCIsImluaXRDdXN0b21FdmVudCIsImNyZWF0ZUVsZW1lbnQiLCJzdHlsZSIsImJvZHkiLCJhcHBlbmRDaGlsZCIsInJlbW92ZUNoaWxkIiwiZG9jdW1lbnQiLCJnZXRXaW5kb3ciLCJnZXREb2N1bWVudCIsImNyZWF0ZU5vb3BGYWN0b3J5IiwiY2xlYW51cCIsInRlc3QiLCJEZXBlbmRlbmN5U3lzdGVtIiwiYXBwSW5pdCIsImNyZWF0ZUFwcEluaXRpYWxpemVyIiwiYnJvd3NlclNlcnZpY2UiLCJjcmVhdGVDaGF0TWFuYWdlciIsImNyZWF0ZUFwaUVuZHBvaW50cyIsImVuZHBvaW50cyIsIlBST0pFQ1RTIiwiREVUQUlMIiwiTU9EQUxfTUFQUElOR1MiLCJBUFBfQ09ORklHIiwiVElNRU9VVFMiLCJET01fUkVBRFkiLCJleHBlY3QiLCJpbml0aWFsaXplQXBwIiwicmVzb2x2ZXMiLCJub3QiLCJ0b1Rocm93Il0sInNvdXJjZXMiOlsiYXBwaW5pdGlhbGl6ZXItYmFzaWMudGVzdC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEJhc2ljIHNtb2tlIHRlc3QgZm9yIGNyZWF0ZUFwcEluaXRpYWxpemVyXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBWZXJpZmllcyB0aGF0IHRoZSBib290c3RyYXAgc2VxdWVuY2UgcmVzb2x2ZXMgd2l0aG91dFxuICogdGhyb3dpbmcgZ2l2ZW4gYSBtaW5pbWFsIHNldCBvZiBzdHViYmVkIGRlcGVuZGVuY2llcy5cbiAqIFRoaXMgaXMgaW50ZW5kZWQgdG8gZGV0ZWN0IHJlZ3Jlc3Npb25zIHdoZXJlIG5ldyBtYW5kYXRvcnlcbiAqIERJIHBhcmFtZXRlcnMgYXJlIGFkZGVkIHRvIGFwcEluaXRpYWxpemVyIHdpdGhvdXQgdXBkYXRpbmdcbiAqIGRvd25zdHJlYW0gYm9vdCBzY3JpcHRzIG9yIHRlc3RzLlxuICovXG5cbmltcG9ydCB7IGNyZWF0ZUFwcEluaXRpYWxpemVyIH0gZnJvbSAnLi4vLi4vc3RhdGljL2pzL2luaXQvYXBwSW5pdGlhbGl6ZXIuanMnO1xuXG5mdW5jdGlvbiBjcmVhdGVNb2NrRGVwZW5kZW5jeVN5c3RlbSAoKSB7XG4gIGNvbnN0IG1vZHVsZXMgPSBuZXcgTWFwKCk7XG4gIHJldHVybiB7XG4gICAgbW9kdWxlcyxcbiAgICByZWdpc3RlcjogKGtleSwgdmFsdWUpID0+IG1vZHVsZXMuc2V0KGtleSwgdmFsdWUpLFxuICAgIGdldDogKGtleSkgPT4gbW9kdWxlcy5nZXQoa2V5KVxuICB9O1xufVxuXG5mdW5jdGlvbiBjcmVhdGVTdHViQnJvd3NlclNlcnZpY2UgKCkge1xuICBjb25zdCB3aW4gPSB7XG4gICAgc2V0VGltZW91dDogKGZuKSA9PiBmbiAmJiBmbigpLFxuICAgIGNsZWFyVGltZW91dDogKCkgPT4ge30sXG4gICAgRXZlbnRUYXJnZXQsXG4gICAgcGVyZm9ybWFuY2U6IHsgbm93OiAoKSA9PiAwIH0sXG4gICAgY3J5cHRvOiB7IHJhbmRvbVVVSUQ6ICgpID0+ICcwMDAwMDAwMC0wMDAwLTQwMDAtODAwMC0wMDAwMDAwMDAwMDAnIH0sXG4gICAgRE9NUHVyaWZ5OiB7IHNhbml0aXplOiAoaHRtbCkgPT4gaHRtbCB9LFxuICAgIEV2ZW50OiBmdW5jdGlvbiAoKSB7fVxuICB9O1xuICBjb25zdCBkb2MgPSB7XG4gICAgcmVhZHlTdGF0ZTogJ2NvbXBsZXRlJyxcbiAgICBhZGRFdmVudExpc3RlbmVyOiAoKSA9PiB7fSxcbiAgICByZW1vdmVFdmVudExpc3RlbmVyOiAoKSA9PiB7fSxcbiAgICBnZXRFbGVtZW50QnlJZDogKCkgPT4gbnVsbCxcbiAgICBxdWVyeVNlbGVjdG9yOiAoKSA9PiBudWxsLFxuICAgIGNyZWF0ZUV2ZW50OiAoKSA9PiAoeyBpbml0Q3VzdG9tRXZlbnQ6ICgpID0+IHt9IH0pLFxuICAgIGNyZWF0ZUVsZW1lbnQ6ICgpID0+ICh7IHN0eWxlOiB7fSB9KSxcbiAgICBib2R5OiB7IGFwcGVuZENoaWxkOiAoKSA9PiB7fSwgcmVtb3ZlQ2hpbGQ6ICgpID0+IHt9IH1cbiAgfTtcbiAgd2luLmRvY3VtZW50ID0gZG9jO1xuXG4gIHJldHVybiB7XG4gICAgZ2V0V2luZG93OiAoKSA9PiB3aW4sXG4gICAgZ2V0RG9jdW1lbnQ6ICgpID0+IGRvYyxcbiAgICBzZXRUaW1lb3V0OiB3aW4uc2V0VGltZW91dCxcbiAgICBjbGVhclRpbWVvdXQ6IHdpbi5jbGVhclRpbWVvdXRcbiAgfTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlTm9vcEZhY3RvcnkgKCkge1xuICByZXR1cm4gKCkgPT4gKHsgY2xlYW51cCAoKSB7fSB9KTtcbn1cblxudGVzdCgnYXBwSW5pdGlhbGl6ZXIgY29tcGxldGVzIGJvb3RzdHJhcCB3aXRob3V0IGVycm9yJywgYXN5bmMgKCkgPT4ge1xuICBjb25zdCBEZXBlbmRlbmN5U3lzdGVtID0gY3JlYXRlTW9ja0RlcGVuZGVuY3lTeXN0ZW0oKTtcblxuICBjb25zdCBhcHBJbml0ID0gY3JlYXRlQXBwSW5pdGlhbGl6ZXIoe1xuICAgIERlcGVuZGVuY3lTeXN0ZW0sXG4gICAgYnJvd3NlclNlcnZpY2U6IGNyZWF0ZVN0dWJCcm93c2VyU2VydmljZSgpLFxuICAgIGNyZWF0ZUNoYXRNYW5hZ2VyOiBjcmVhdGVOb29wRmFjdG9yeSgpLFxuICAgIGNyZWF0ZUFwaUVuZHBvaW50czogKCkgPT4gKHtcbiAgICAgIGVuZHBvaW50czoge1xuICAgICAgICBQUk9KRUNUUzogJy9hcGkvcHJvamVjdHMvJyxcbiAgICAgICAgREVUQUlMOiAnL2FwaS9wcm9qZWN0cy97aWR9LydcbiAgICAgIH0sXG4gICAgICBjbGVhbnVwICgpIHt9XG4gICAgfSksXG4gICAgTU9EQUxfTUFQUElOR1M6IHt9LFxuICAgIEFQUF9DT05GSUc6IHtcbiAgICAgIFRJTUVPVVRTOiB7IERPTV9SRUFEWTogMTAwMCB9XG4gICAgfVxuICB9KTtcblxuICBhd2FpdCBleHBlY3QoYXBwSW5pdC5pbml0aWFsaXplQXBwKCkpLnJlc29sdmVzLm5vdC50b1Rocm93KCk7XG59KTtcbiJdLCJtYXBwaW5ncyI6Ijs7QUFVQSxJQUFBQSxlQUFBLEdBQUFDLE9BQUE7QUFWQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBSUEsU0FBU0MsMEJBQTBCQSxDQUFBLEVBQUk7RUFDckMsTUFBTUMsT0FBTyxHQUFHLElBQUlDLEdBQUcsQ0FBQyxDQUFDO0VBQ3pCLE9BQU87SUFDTEQsT0FBTztJQUNQRSxRQUFRLEVBQUVBLENBQUNDLEdBQUcsRUFBRUMsS0FBSyxLQUFLSixPQUFPLENBQUNLLEdBQUcsQ0FBQ0YsR0FBRyxFQUFFQyxLQUFLLENBQUM7SUFDakRFLEdBQUcsRUFBR0gsR0FBRyxJQUFLSCxPQUFPLENBQUNNLEdBQUcsQ0FBQ0gsR0FBRztFQUMvQixDQUFDO0FBQ0g7QUFFQSxTQUFTSSx3QkFBd0JBLENBQUEsRUFBSTtFQUNuQyxNQUFNQyxHQUFHLEdBQUc7SUFDVkMsVUFBVSxFQUFHQyxFQUFFLElBQUtBLEVBQUUsSUFBSUEsRUFBRSxDQUFDLENBQUM7SUFDOUJDLFlBQVksRUFBRUEsQ0FBQSxLQUFNLENBQUMsQ0FBQztJQUN0QkMsV0FBVztJQUNY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