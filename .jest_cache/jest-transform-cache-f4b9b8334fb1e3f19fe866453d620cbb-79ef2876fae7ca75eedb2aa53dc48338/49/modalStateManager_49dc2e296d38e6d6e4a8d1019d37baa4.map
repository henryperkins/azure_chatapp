{"version":3,"names":["createModalStateManager","eventService","logger","modalMappings","MODULE","Error","_log","msg","extra","debug","context","_logError","err","error","stack","activeModal","modalStack","modalHistory","modalStates","Map","currentModalMappings","setActiveModal","modalName","previousModal","includes","push","modal","timestamp","Date","now","action","set","isOpen","openedAt","zIndex","length","index","indexOf","splice","closedAt","emit","stackDepth","getActiveModal","isModalOpen","state","get","getModalState","getAllModalStates","Object","fromEntries","getModalStack","getModalHistory","limit","slice","clearModalHistory","getTopModal","getModalId","getModalName","modalId","name","id","entries","registerModal","options","registeredAt","unregisterModal","delete","updateModalMappings","newMappings","allMappings","newCount","keys","totalCount","getModalMappings","canOpenModal","canCloseModal","closeAllModals","openModals","forEach","closedModals","closedCount","getZIndex","setZIndex","cleanup","clear","_default","exports","default"],"sources":["modalStateManager.js"],"sourcesContent":["/**\n * ModalStateManager - extracted modal state and lifecycle (Phase-2)\n * ----------------------------------------------------------------\n * Handles modal state tracking, lifecycle events, modal mapping,\n * and coordination between modals. Extracted from oversized modalManager.js.\n */\n\nexport function createModalStateManager({\n  eventService,\n  logger,\n  modalMappings = {}\n} = {}) {\n  const MODULE = 'ModalStateManager';\n\n  if (!eventService || !logger) {\n    throw new Error(`[${MODULE}] Required dependencies missing: eventService, logger`);\n  }\n\n  const _log = (msg, extra = {}) => logger?.debug?.(`[${MODULE}] ${msg}`, {\n    context: MODULE,\n    ...extra\n  });\n\n  const _logError = (msg, err, extra = {}) => {\n    logger?.error?.(`[${MODULE}] ${msg}`, err?.stack || err, {\n      context: MODULE,\n      ...extra\n    });\n  };\n\n  // Modal state tracking\n  let activeModal = null;\n  let modalStack = [];\n  let modalHistory = [];\n  const modalStates = new Map();\n\n  // Modal configuration\n  let currentModalMappings = { ...modalMappings };\n\n  function setActiveModal(modalName) {\n    const previousModal = activeModal;\n    activeModal = modalName;\n\n    if (modalName) {\n      // Add to stack if not already present\n      if (!modalStack.includes(modalName)) {\n        modalStack.push(modalName);\n      }\n      \n      // Add to history\n      modalHistory.push({\n        modal: modalName,\n        timestamp: Date.now(),\n        action: 'opened'\n      });\n\n      // Update modal state\n      modalStates.set(modalName, {\n        isOpen: true,\n        openedAt: Date.now(),\n        zIndex: modalStack.length + 1000\n      });\n    } else {\n      // Remove from stack\n      if (previousModal) {\n        const index = modalStack.indexOf(previousModal);\n        if (index > -1) {\n          modalStack.splice(index, 1);\n        }\n\n        // Add to history\n        modalHistory.push({\n          modal: previousModal,\n          timestamp: Date.now(),\n          action: 'closed'\n        });\n\n        // Update modal state\n        modalStates.set(previousModal, {\n          isOpen: false,\n          closedAt: Date.now(),\n          zIndex: null\n        });\n      }\n    }\n\n    // Emit state change event\n    eventService.emit('modal:stateChanged', {\n      activeModal,\n      previousModal,\n      modalStack: [...modalStack],\n      timestamp: Date.now()\n    });\n\n    _log('Active modal changed', { \n      activeModal, \n      previousModal, \n      stackDepth: modalStack.length \n    });\n  }\n\n  function getActiveModal() {\n    return activeModal;\n  }\n\n  function isModalOpen(modalName) {\n    if (!modalName) return false;\n    const state = modalStates.get(modalName);\n    return state?.isOpen || false;\n  }\n\n  function getModalState(modalName) {\n    if (!modalName) return null;\n    return modalStates.get(modalName) || null;\n  }\n\n  function getAllModalStates() {\n    return Object.fromEntries(modalStates);\n  }\n\n  function getModalStack() {\n    return [...modalStack];\n  }\n\n  function getModalHistory(limit = 10) {\n    return modalHistory.slice(-limit);\n  }\n\n  function clearModalHistory() {\n    modalHistory = [];\n    _log('Modal history cleared');\n  }\n\n  function getTopModal() {\n    return modalStack.length > 0 ? modalStack[modalStack.length - 1] : null;\n  }\n\n  function getModalId(modalName) {\n    if (!modalName) return null;\n    return currentModalMappings[modalName] || modalName;\n  }\n\n  function getModalName(modalId) {\n    if (!modalId) return null;\n    \n    for (const [name, id] of Object.entries(currentModalMappings)) {\n      if (id === modalId) {\n        return name;\n      }\n    }\n    \n    return modalId; // Return original if no mapping found\n  }\n\n  function registerModal(modalName, modalId, options = {}) {\n    if (!modalName || !modalId) {\n      _logError('registerModal: modalName and modalId required');\n      return false;\n    }\n\n    try {\n      currentModalMappings[modalName] = modalId;\n      \n      // Initialize modal state\n      modalStates.set(modalName, {\n        isOpen: false,\n        registeredAt: Date.now(),\n        options: { ...options },\n        zIndex: null\n      });\n\n      eventService.emit('modal:registered', {\n        modalName,\n        modalId,\n        options,\n        timestamp: Date.now()\n      });\n\n      _log('Modal registered', { modalName, modalId, options });\n      return true;\n    } catch (err) {\n      _logError('Failed to register modal', err, { modalName, modalId });\n      return false;\n    }\n  }\n\n  function unregisterModal(modalName) {\n    if (!modalName) return false;\n\n    try {\n      const modalId = currentModalMappings[modalName];\n      \n      if (modalId) {\n        delete currentModalMappings[modalName];\n        modalStates.delete(modalName);\n\n        // Remove from stack if present\n        const index = modalStack.indexOf(modalName);\n        if (index > -1) {\n          modalStack.splice(index, 1);\n        }\n\n        // Clear as active if it was active\n        if (activeModal === modalName) {\n          activeModal = null;\n        }\n\n        eventService.emit('modal:unregistered', {\n          modalName,\n          modalId,\n          timestamp: Date.now()\n        });\n\n        _log('Modal unregistered', { modalName, modalId });\n        return true;\n      }\n      \n      return false;\n    } catch (err) {\n      _logError('Failed to unregister modal', err, { modalName });\n      return false;\n    }\n  }\n\n  function updateModalMappings(newMappings) {\n    if (!newMappings || typeof newMappings !== 'object') {\n      _logError('updateModalMappings: valid mappings object required');\n      return false;\n    }\n\n    try {\n      currentModalMappings = { ...currentModalMappings, ...newMappings };\n      \n      eventService.emit('modal:mappingsUpdated', {\n        newMappings,\n        allMappings: { ...currentModalMappings },\n        timestamp: Date.now()\n      });\n\n      _log('Modal mappings updated', { \n        newCount: Object.keys(newMappings).length,\n        totalCount: Object.keys(currentModalMappings).length \n      });\n      return true;\n    } catch (err) {\n      _logError('Failed to update modal mappings', err);\n      return false;\n    }\n  }\n\n  function getModalMappings() {\n    return { ...currentModalMappings };\n  }\n\n  function canOpenModal(modalName) {\n    if (!modalName) return false;\n\n    // Check if modal is registered\n    if (!currentModalMappings[modalName]) {\n      _log('Cannot open modal - not registered', { modalName });\n      return false;\n    }\n\n    // Check if already open\n    if (isModalOpen(modalName)) {\n      _log('Cannot open modal - already open', { modalName });\n      return false;\n    }\n\n    return true;\n  }\n\n  function canCloseModal(modalName) {\n    if (!modalName) return false;\n\n    // Check if modal is open\n    if (!isModalOpen(modalName)) {\n      _log('Cannot close modal - not open', { modalName });\n      return false;\n    }\n\n    return true;\n  }\n\n  function closeAllModals() {\n    const openModals = [...modalStack];\n    \n    try {\n      modalStack = [];\n      modalStates.forEach((state, modalName) => {\n        if (state.isOpen) {\n          modalStates.set(modalName, {\n            ...state,\n            isOpen: false,\n            closedAt: Date.now(),\n            zIndex: null\n          });\n        }\n      });\n\n      activeModal = null;\n\n      eventService.emit('modal:allClosed', {\n        closedModals: openModals,\n        timestamp: Date.now()\n      });\n\n      _log('All modals closed', { closedCount: openModals.length });\n      return openModals;\n    } catch (err) {\n      _logError('Failed to close all modals', err);\n      return [];\n    }\n  }\n\n  function getZIndex(modalName) {\n    if (!modalName) return null;\n    const state = modalStates.get(modalName);\n    return state?.zIndex || null;\n  }\n\n  function setZIndex(modalName, zIndex) {\n    if (!modalName || typeof zIndex !== 'number') return false;\n\n    try {\n      const state = modalStates.get(modalName);\n      if (state) {\n        modalStates.set(modalName, { ...state, zIndex });\n        _log('Modal z-index updated', { modalName, zIndex });\n        return true;\n      }\n      return false;\n    } catch (err) {\n      _logError('Failed to set modal z-index', err, { modalName, zIndex });\n      return false;\n    }\n  }\n\n  return {\n    // Active modal management\n    setActiveModal,\n    getActiveModal,\n    getTopModal,\n\n    // Modal state queries\n    isModalOpen,\n    getModalState,\n    getAllModalStates,\n    canOpenModal,\n    canCloseModal,\n\n    // Modal stack management\n    getModalStack,\n    closeAllModals,\n\n    // Modal registration\n    registerModal,\n    unregisterModal,\n\n    // Modal mapping\n    getModalId,\n    getModalName,\n    getModalMappings,\n    updateModalMappings,\n\n    // History and tracking\n    getModalHistory,\n    clearModalHistory,\n\n    // Z-index management\n    getZIndex,\n    setZIndex,\n\n    cleanup() {\n      _log('cleanup()');\n      closeAllModals();\n      modalStates.clear();\n      modalHistory = [];\n      currentModalMappings = {};\n    }\n  };\n}\n\nexport default createModalStateManager;"],"mappings":"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","ignoreList":[]}