358acaa4eb024baa426755fec9cc256d
"use strict";

var _appInitializer = require("../init/appInitializer.js");
/**
 * Regression test – ensures that a placeholder implementation for
 * `tokenStatsManager` is present in the DependencySystem **before** the
 * core bootstrap phase (specifically before `coreInit` would attempt to
 * resolve the dependency via `createMessageHandler`).  The placeholder is
 * provided by `tokenStatsManagerProxy` during the early DI setup inside
 * `createAppInitializer`.
 *
 * The test only executes the Basic & Advanced service registration phases
 * (matching the order that runs before `coreInit`).  It does **not** fully
 * initialize the app – keeping the scope minimal while still catching
 * regressions where the proxy registration might be removed or renamed.
 */

function createMockDependencySystem() {
  const DS = {
    modules: new Map(),
    register(key, value) {
      this.modules.set(key, value);
    }
  };
  return DS;
}
function createStubBrowserService({
  documentObject,
  windowObject
} = {}) {
  const win = windowObject ?? {
    DOMPurify: {},
    EventTarget: class {
      addEventListener() {}
      removeEventListener() {}
      dispatchEvent() {
        return false;
      }
    },
    setTimeout(fn) {
      if (typeof fn === 'function') fn();
      return 0;
    },
    clearTimeout() {},
    performance: {
      now: () => 0
    },
    URL: {
      createObjectURL: () => '',
      revokeObjectURL: () => ''
    },
    Event: function () {},
    crypto: {
      randomUUID: () => '00000000-0000-4000-8000-000000000000'
    },
    document: documentObject
  };
  const doc = documentObject ?? {
    readyState: 'complete',
    getElementById: () => null,
    querySelector: () => null,
    addEventListener: () => {},
    removeEventListener: () => {},
    createElement: () => ({
      style: {}
    }),
    body: {
      appendChild: () => {},
      removeChild: () => {}
    }
  };
  win.document = doc;
  return {
    getWindow: () => win,
    getDocument: () => doc,
    setTimeout: win.setTimeout,
    clearTimeout: win.clearTimeout
  };
}
function createStubApiEndpoints() {
  return {
    endpoints: {
      AUTH_CSRF: '/api/csrf',
      AUTH_LOGIN: '/api/login',
      AUTH_LOGOUT: '/api/logout',
      AUTH_REGISTER: '/api/register',
      AUTH_VERIFY: '/api/verify',
      AUTH_REFRESH: '/api/refresh'
    },
    resolveApiEndpoints: () => ({}),
    cleanup: () => {}
  };
}
test('tokenStatsManager placeholder exists before coreInit', async () => {
  const DependencySystem = createMockDependencySystem();
  const appInit = (0, _appInitializer.createAppInitializer)({
    DependencySystem,
    browserService: createStubBrowserService(),
    createChatManager: () => ({}),
    createApiEndpoints: () => createStubApiEndpoints(),
    APP_CONFIG: {
      TIMEOUTS: {
        DOM_READY: 1000
      }
    },
    MODAL_MAPPINGS: {}
    // The remaining optional config/factories are left undefined intentionally
  });

  // Execute only the DI service registration phases that precede coreInit
  await appInit.serviceInit.registerBasicServices();
  await appInit.serviceInit.registerAdvancedServices();
  expect(DependencySystem.modules.get('tokenStatsManager')).toBeDefined();
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfYXBwSW5pdGlhbGl6ZXIiLCJyZXF1aXJlIiwiY3JlYXRlTW9ja0RlcGVuZGVuY3lTeXN0ZW0iLCJEUyIsIm1vZHVsZXMiLCJNYXAiLCJyZWdpc3RlciIsImtleSIsInZhbHVlIiwic2V0IiwiY3JlYXRlU3R1YkJyb3dzZXJTZXJ2aWNlIiwiZG9jdW1lbnRPYmplY3QiLCJ3aW5kb3dPYmplY3QiLCJ3aW4iLCJET01QdXJpZnkiLCJFdmVudFRhcmdldCIsImFkZEV2ZW50TGlzdGVuZXIiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiZGlzcGF0Y2hFdmVudCIsInNldFRpbWVvdXQiLCJmbiIsImNsZWFyVGltZW91dCIsInBlcmZvcm1hbmNlIiwibm93IiwiVVJMIiwiY3JlYXRlT2JqZWN0VVJMIiwicmV2b2tlT2JqZWN0VVJMIiwiRXZlbnQiLCJjcnlwdG8iLCJyYW5kb21VVUlEIiwiZG9jdW1lbnQiLCJkb2MiLCJyZWFkeVN0YXRlIiwiZ2V0RWxlbWVudEJ5SWQiLCJxdWVyeVNlbGVjdG9yIiwiY3JlYXRlRWxlbWVudCIsInN0eWxlIiwiYm9keSIsImFwcGVuZENoaWxkIiwicmVtb3ZlQ2hpbGQiLCJnZXRXaW5kb3ciLCJnZXREb2N1bWVudCIsImNyZWF0ZVN0dWJBcGlFbmRwb2ludHMiLCJlbmRwb2ludHMiLCJBVVRIX0NTUkYiLCJBVVRIX0xPR0lOIiwiQVVUSF9MT0dPVVQiLCJBVVRIX1JFR0lTVEVSIiwiQVVUSF9WRVJJRlkiLCJBVVRIX1JFRlJFU0giLCJyZXNvbHZlQXBpRW5kcG9pbnRzIiwiY2xlYW51cCIsInRlc3QiLCJEZXBlbmRlbmN5U3lzdGVtIiwiYXBwSW5pdCIsImNyZWF0ZUFwcEluaXRpYWxpemVyIiwiYnJvd3NlclNlcnZpY2UiLCJjcmVhdGVDaGF0TWFuYWdlciIsImNyZWF0ZUFwaUVuZHBvaW50cyIsIkFQUF9DT05GSUciLCJUSU1FT1VUUyIsIkRPTV9SRUFEWSIsIk1PREFMX01BUFBJTkdTIiwic2VydmljZUluaXQiLCJyZWdpc3RlckJhc2ljU2VydmljZXMiLCJyZWdpc3RlckFkdmFuY2VkU2VydmljZXMiLCJleHBlY3QiLCJnZXQiLCJ0b0JlRGVmaW5lZCJdLCJzb3VyY2VzIjpbInRva2VuLXN0YXRzLWRpLnRlc3QuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBSZWdyZXNzaW9uIHRlc3Qg4oCTIGVuc3VyZXMgdGhhdCBhIHBsYWNlaG9sZGVyIGltcGxlbWVudGF0aW9uIGZvclxuICogYHRva2VuU3RhdHNNYW5hZ2VyYCBpcyBwcmVzZW50IGluIHRoZSBEZXBlbmRlbmN5U3lzdGVtICoqYmVmb3JlKiogdGhlXG4gKiBjb3JlIGJvb3RzdHJhcCBwaGFzZSAoc3BlY2lmaWNhbGx5IGJlZm9yZSBgY29yZUluaXRgIHdvdWxkIGF0dGVtcHQgdG9cbiAqIHJlc29sdmUgdGhlIGRlcGVuZGVuY3kgdmlhIGBjcmVhdGVNZXNzYWdlSGFuZGxlcmApLiAgVGhlIHBsYWNlaG9sZGVyIGlzXG4gKiBwcm92aWRlZCBieSBgdG9rZW5TdGF0c01hbmFnZXJQcm94eWAgZHVyaW5nIHRoZSBlYXJseSBESSBzZXR1cCBpbnNpZGVcbiAqIGBjcmVhdGVBcHBJbml0aWFsaXplcmAuXG4gKlxuICogVGhlIHRlc3Qgb25seSBleGVjdXRlcyB0aGUgQmFzaWMgJiBBZHZhbmNlZCBzZXJ2aWNlIHJlZ2lzdHJhdGlvbiBwaGFzZXNcbiAqIChtYXRjaGluZyB0aGUgb3JkZXIgdGhhdCBydW5zIGJlZm9yZSBgY29yZUluaXRgKS4gIEl0IGRvZXMgKipub3QqKiBmdWxseVxuICogaW5pdGlhbGl6ZSB0aGUgYXBwIOKAkyBrZWVwaW5nIHRoZSBzY29wZSBtaW5pbWFsIHdoaWxlIHN0aWxsIGNhdGNoaW5nXG4gKiByZWdyZXNzaW9ucyB3aGVyZSB0aGUgcHJveHkgcmVnaXN0cmF0aW9uIG1pZ2h0IGJlIHJlbW92ZWQgb3IgcmVuYW1lZC5cbiAqL1xuXG5pbXBvcnQgeyBjcmVhdGVBcHBJbml0aWFsaXplciB9IGZyb20gJy4uL2luaXQvYXBwSW5pdGlhbGl6ZXIuanMnO1xuXG5mdW5jdGlvbiBjcmVhdGVNb2NrRGVwZW5kZW5jeVN5c3RlbSgpIHtcbiAgY29uc3QgRFMgPSB7XG4gICAgbW9kdWxlczogbmV3IE1hcCgpLFxuICAgIHJlZ2lzdGVyKGtleSwgdmFsdWUpIHtcbiAgICAgIHRoaXMubW9kdWxlcy5zZXQoa2V5LCB2YWx1ZSk7XG4gICAgfVxuICB9O1xuICByZXR1cm4gRFM7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVN0dWJCcm93c2VyU2VydmljZSh7IGRvY3VtZW50T2JqZWN0LCB3aW5kb3dPYmplY3QgfSA9IHt9KSB7XG4gIGNvbnN0IHdpbiA9IHdpbmRvd09iamVjdCA/PyB7XG4gICAgRE9NUHVyaWZ5OiB7fSxcbiAgICBFdmVudFRhcmdldDogY2xhc3Mge1xuICAgICAgYWRkRXZlbnRMaXN0ZW5lcigpIHt9XG4gICAgICByZW1vdmVFdmVudExpc3RlbmVyKCkge31cbiAgICAgIGRpc3BhdGNoRXZlbnQoKSB7IHJldHVybiBmYWxzZTsgfVxuICAgIH0sXG4gICAgc2V0VGltZW91dChmbikgeyBpZiAodHlwZW9mIGZuID09PSAnZnVuY3Rpb24nKSBmbigpOyByZXR1cm4gMDsgfSxcbiAgICBjbGVhclRpbWVvdXQoKSB7fSxcbiAgICBwZXJmb3JtYW5jZTogeyBub3c6ICgpID0+IDAgfSxcbiAgICBVUkw6IHsgY3JlYXRlT2JqZWN0VVJMOiAoKSA9PiAnJywgcmV2b2tlT2JqZWN0VVJMOiAoKSA9PiAnJyB9LFxuICAgIEV2ZW50OiBmdW5jdGlvbiAoKSB7fSxcbiAgICBjcnlwdG86IHtcbiAgICAgIHJhbmRvbVVVSUQ6ICgpID0+ICcwMDAwMDAwMC0wMDAwLTQwMDAtODAwMC0wMDAwMDAwMDAwMDAnXG4gICAgfSxcbiAgICBkb2N1bWVudCA6IGRvY3VtZW50T2JqZWN0XG4gIH07XG5cbiAgY29uc3QgZG9jID0gZG9jdW1lbnRPYmplY3QgPz8ge1xuICAgIHJlYWR5U3RhdGU6ICdjb21wbGV0ZScsXG4gICAgZ2V0RWxlbWVudEJ5SWQ6ICgpID0+IG51bGwsXG4gICAgcXVlcnlTZWxlY3RvciA6ICgpID0+IG51bGwsXG4gICAgYWRkRXZlbnRMaXN0ZW5lcjogKCkgPT4ge30sXG4gICAgcmVtb3ZlRXZlbnRMaXN0ZW5lcjogKCkgPT4ge30sXG4gICAgY3JlYXRlRWxlbWVudDogKCkgPT4gKHsgc3R5bGU6IHt9IH0pLFxuICAgIGJvZHk6IHsgYXBwZW5kQ2hpbGQ6ICgpID0+IHt9LCByZW1vdmVDaGlsZDogKCkgPT4ge30gfVxuICB9O1xuXG4gIHdpbi5kb2N1bWVudCA9IGRvYztcblxuICByZXR1cm4ge1xuICAgIGdldFdpbmRvdzogKCkgPT4gd2luLFxuICAgIGdldERvY3VtZW50OiAoKSA9PiBkb2MsXG4gICAgc2V0VGltZW91dDogd2luLnNldFRpbWVvdXQsXG4gICAgY2xlYXJUaW1lb3V0OiB3aW4uY2xlYXJUaW1lb3V0XG4gIH07XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVN0dWJBcGlFbmRwb2ludHMoKSB7XG4gIHJldHVybiB7XG4gICAgZW5kcG9pbnRzOiB7XG4gICAgICBBVVRIX0NTUkY6ICcvYXBpL2NzcmYnLFxuICAgICAgQVVUSF9MT0dJTjogJy9hcGkvbG9naW4nLFxuICAgICAgQVVUSF9MT0dPVVQ6ICcvYXBpL2xvZ291dCcsXG4gICAgICBBVVRIX1JFR0lTVEVSOiAnL2FwaS9yZWdpc3RlcicsXG4gICAgICBBVVRIX1ZFUklGWTogJy9hcGkvdmVyaWZ5JyxcbiAgICAgIEFVVEhfUkVGUkVTSDogJy9hcGkvcmVmcmVzaCdcbiAgICB9LFxuICAgIHJlc29sdmVBcGlFbmRwb2ludHM6ICgpID0+ICh7fSksXG4gICAgY2xlYW51cDogKCkgPT4ge31cbiAgfTtcbn1cblxudGVzdCgndG9rZW5TdGF0c01hbmFnZXIgcGxhY2Vob2xkZXIgZXhpc3RzIGJlZm9yZSBjb3JlSW5pdCcsIGFzeW5jICgpID0+IHtcbiAgY29uc3QgRGVwZW5kZW5jeVN5c3RlbSA9IGNyZWF0ZU1vY2tEZXBlbmRlbmN5U3lzdGVtKCk7XG5cbiAgY29uc3QgYXBwSW5pdCA9IGNyZWF0ZUFwcEluaXRpYWxpemVyKHtcbiAgICBEZXBlbmRlbmN5U3lzdGVtLFxuICAgIGJyb3dzZXJTZXJ2aWNlOiBjcmVhdGVTdHViQnJvd3NlclNlcnZpY2UoKSxcbiAgICBjcmVhdGVDaGF0TWFuYWdlcjogKCkgPT4gKHt9KSxcbiAgICBjcmVhdGVBcGlFbmRwb2ludHM6ICgpID0+IGNyZWF0ZVN0dWJBcGlFbmRwb2ludHMoKSxcbiAgICBBUFBfQ09ORklHOiB7XG4gICAgICBUSU1FT1VUUzogeyBET01fUkVBRFk6IDEwMDAgfVxuICAgIH0sXG4gICAgTU9EQUxfTUFQUElOR1M6IHt9LFxuICAgIC8vIFRoZSByZW1haW5pbmcgb3B0aW9uYWwgY29uZmlnL2ZhY3RvcmllcyBhcmUgbGVmdCB1bmRlZmluZWQgaW50ZW50aW9uYWxseVxuICB9KTtcblxuICAvLyBFeGVjdXRlIG9ubHkgdGhlIERJIHNlcnZpY2UgcmVnaXN0cmF0aW9uIHBoYXNlcyB0aGF0IHByZWNlZGUgY29yZUluaXRcbiAgYXdhaXQgYXBwSW5pdC5zZXJ2aWNlSW5pdC5yZWdpc3RlckJhc2ljU2VydmljZXMoKTtcbiAgYXdhaXQgYXBwSW5pdC5zZXJ2aWNlSW5pdC5yZWdpc3RlckFkdmFuY2VkU2VydmljZXMoKTtcblxuICBleHBlY3QoRGVwZW5kZW5jeVN5c3RlbS5tb2R1bGVzLmdldCgndG9rZW5TdGF0c01hbmFnZXInKSkudG9CZURlZmluZWQoKTtcbn0pO1xuIl0sIm1hcHBpbmdzIjoiOztBQWNBLElBQUFBLGVBQUEsR0FBQUMsT0FBQTtBQWRBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUlBLFNBQVNDLDBCQUEwQkEsQ0FBQSxFQUFHO0VBQ3BDLE1BQU1DLEVBQUUsR0FBRztJQUNUQyxPQUFPLEVBQUUsSUFBSUMsR0FBRyxDQUFDLENBQUM7SUFDbEJDLFFBQVFBLENBQUNDLEdBQUcsRUFBRUMsS0FBSyxFQUFFO01BQ25CLElBQUksQ0FBQ0osT0FBTyxDQUFD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