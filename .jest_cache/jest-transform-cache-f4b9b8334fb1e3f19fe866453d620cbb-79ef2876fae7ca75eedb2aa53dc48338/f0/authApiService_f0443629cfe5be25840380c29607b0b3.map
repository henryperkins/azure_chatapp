{"version":3,"names":["createAuthApiService","apiClient","apiEndpoints","logger","browserService","MODULE","Error","requiredEndpoints","missingEndpoints","filter","key","length","join","_log","msg","extra","debug","context","_logError","err","error","stack","csrfTokenCache","csrfTokenExpiry","getCSRFToken","Date","now","fetchCSRFToken","response","AUTH_CSRF","method","headers","ok","status","statusText","data","json","csrf_token","getCSRFTokenAsync","forceFetch","cached","extendErrorWithStatus","message","extendedError","originalError","authRequest","endpoint","body","hasBody","csrfToken","config","JSON","stringify","errorMessage","errorData","detail","warn","login","username","password","AUTH_LOGIN","trim","success","user","userId","id","logout","AUTH_LOGOUT","register","email","AUTH_REGISTER","verifySession","AUTH_VERIFY","authenticated","refreshSession","AUTH_REFRESH","clearTokenCache","cleanup","_default","exports","default"],"sources":["authApiService.js"],"sourcesContent":["/**\n * AuthApiService - extracted API and CSRF management (Phase-2)\n * -----------------------------------------------------------\n * Handles all authentication API calls, CSRF token management,\n * and network-related authentication logic. Extracted from oversized auth.js.\n */\n\nexport function createAuthApiService({\n  apiClient,\n  apiEndpoints,\n  logger,\n  browserService\n} = {}) {\n  const MODULE = 'AuthApiService';\n\n  if (!apiClient || !apiEndpoints || !logger || !browserService) {\n    throw new Error(`[${MODULE}] Required dependencies missing: apiClient, apiEndpoints, logger, browserService`);\n  }\n\n  // Validate required endpoints\n  const requiredEndpoints = ['AUTH_CSRF', 'AUTH_LOGIN', 'AUTH_LOGOUT', 'AUTH_REGISTER', 'AUTH_VERIFY', 'AUTH_REFRESH'];\n  const missingEndpoints = requiredEndpoints.filter(key => !apiEndpoints[key]);\n  if (missingEndpoints.length > 0) {\n    throw new Error(`[${MODULE}] Missing required auth endpoints: ${missingEndpoints.join(', ')}`);\n  }\n\n  const _log = (msg, extra = {}) => logger?.debug?.(`[${MODULE}] ${msg}`, {\n    context: MODULE,\n    ...extra\n  });\n\n  const _logError = (msg, err, extra = {}) => {\n    logger?.error?.(`[${MODULE}] ${msg}`, err?.stack || err, {\n      context: MODULE,\n      ...extra\n    });\n  };\n\n  // CSRF token cache\n  let csrfTokenCache = null;\n  let csrfTokenExpiry = null;\n\n  function getCSRFToken() {\n    if (!csrfTokenCache || (csrfTokenExpiry && Date.now() > csrfTokenExpiry)) {\n      return null;\n    }\n    return csrfTokenCache;\n  }\n\n  async function fetchCSRFToken() {\n    try {\n      _log('Fetching CSRF token from server');\n      const response = await apiClient(apiEndpoints.AUTH_CSRF, {\n        method: 'GET',\n        headers: { 'Accept': 'application/json' }\n      });\n\n      if (!response.ok) {\n        throw new Error(`CSRF fetch failed: ${response.status} ${response.statusText}`);\n      }\n\n      const data = await response.json();\n      if (!data.csrf_token) {\n        throw new Error('CSRF token missing from server response');\n      }\n\n      csrfTokenCache = data.csrf_token;\n      // Set expiry to 55 minutes (assuming 1-hour server expiry)\n      csrfTokenExpiry = Date.now() + (55 * 60 * 1000);\n\n      _log('CSRF token fetched successfully');\n      return csrfTokenCache;\n    } catch (err) {\n      logger.error('[AuthApiService] Failed to fetch CSRF token', err, { context: MODULE });\n      csrfTokenCache = null;\n      csrfTokenExpiry = null;\n      throw err;\n    }\n  }\n\n  async function getCSRFTokenAsync(forceFetch = false) {\n    if (!forceFetch) {\n      const cached = getCSRFToken();\n      if (cached) {\n        return cached;\n      }\n    }\n    return await fetchCSRFToken();\n  }\n\n  function extendErrorWithStatus(error, message) {\n    const extendedError = new Error(message);\n    extendedError.originalError = error;\n    extendedError.status = error.status || 'unknown';\n    extendedError.statusText = error.statusText || 'Unknown error';\n    return extendedError;\n  }\n\n  async function authRequest(endpoint, method, body = null) {\n    try {\n      _log('Making auth request', { endpoint, method, hasBody: !!body });\n\n      // Get CSRF token for non-GET requests\n      let headers = { 'Accept': 'application/json' };\n      if (method !== 'GET') {\n        const csrfToken = await getCSRFTokenAsync();\n        headers['X-CSRFToken'] = csrfToken;\n        headers['Content-Type'] = 'application/json';\n      }\n\n      const config = { method, headers };\n      if (body && method !== 'GET') {\n        config.body = JSON.stringify(body);\n      }\n\n      const response = await apiClient(endpoint, config);\n      \n      if (!response.ok) {\n        let errorMessage = `Request failed: ${response.status} ${response.statusText}`;\n        try {\n          const errorData = await response.json();\n          if (errorData.detail) {\n            errorMessage = errorData.detail;\n          } else if (errorData.message) {\n            errorMessage = errorData.message;\n          } else if (errorData.error) {\n            errorMessage = errorData.error;\n          }\n        } catch (err) {\n          logger.warn(`[${MODULE}] Failed to parse error response JSON`, err, { context: MODULE, endpoint });\n        }\n        \n        const error = new Error(errorMessage);\n        error.status = response.status;\n        error.statusText = response.statusText;\n        throw error;\n      }\n\n      const data = await response.json();\n      _log('Auth request successful', { endpoint, method, status: response.status });\n      return data;\n    } catch (err) {\n      logger.error('[AuthApiService] Auth request failed', err, { context: MODULE, endpoint, method });\n      throw extendErrorWithStatus(err, err.message || 'Authentication request failed');\n    }\n  }\n\n  async function login(username, password) {\n    _log('Attempting login', { username });\n    \n    try {\n      const response = await authRequest(apiEndpoints.AUTH_LOGIN, 'POST', {\n        username: username.trim(),\n        password\n      });\n\n      if (response.success && response.user) {\n        _log('Login successful', { userId: response.user.id, username: response.user.username });\n        return response;\n      } else {\n        throw new Error(response.message || 'Login failed - invalid response format');\n      }\n    } catch (err) {\n      logger.error('[AuthApiService] Login failed', err, { context: MODULE, username });\n      throw err;\n    }\n  }\n\n  async function logout() {\n    _log('Attempting logout');\n    \n    try {\n      const response = await authRequest(apiEndpoints.AUTH_LOGOUT, 'POST');\n      \n      // Clear CSRF token on logout\n      csrfTokenCache = null;\n      csrfTokenExpiry = null;\n      \n      _log('Logout successful');\n      return response;\n    } catch (err) {\n      logger.error('[AuthApiService] Logout failed', err, { context: MODULE });\n      // Clear tokens even if logout request failed\n      csrfTokenCache = null;\n      csrfTokenExpiry = null;\n      throw err;\n    }\n  }\n\n  async function register(username, email, password) {\n    _log('Attempting registration', { username, email });\n    \n    try {\n      const response = await authRequest(apiEndpoints.AUTH_REGISTER, 'POST', {\n        username: username.trim(),\n        email: email.trim(),\n        password\n      });\n\n      if (response.success) {\n        _log('Registration successful', { username, email });\n        return response;\n      } else {\n        throw new Error(response.message || 'Registration failed - invalid response format');\n      }\n    } catch (err) {\n      logger.error('[AuthApiService] Registration failed', err, { context: MODULE, username, email });\n      throw err;\n    }\n  }\n\n  async function verifySession() {\n    _log('Verifying session');\n    \n    try {\n      const response = await authRequest(apiEndpoints.AUTH_VERIFY, 'GET');\n      \n      if (response.authenticated && response.user) {\n        _log('Session verification successful', { \n          userId: response.user.id, \n          username: response.user.username \n        });\n        return response;\n      } else {\n        _log('Session verification failed - not authenticated');\n        return { authenticated: false, user: null };\n      }\n    } catch (err) {\n      logger.error('[AuthApiService] Session verification failed', err, { context: MODULE });\n      // Don't throw on verification failure - just return unauthenticated state\n      return { authenticated: false, user: null };\n    }\n  }\n\n  async function refreshSession() {\n    _log('Attempting session refresh');\n    \n    try {\n      const response = await authRequest(apiEndpoints.AUTH_REFRESH, 'POST');\n      \n      if (response.success && response.user) {\n        _log('Session refresh successful', { \n          userId: response.user.id, \n          username: response.user.username \n        });\n        return response;\n      } else {\n        throw new Error(response.message || 'Session refresh failed');\n      }\n    } catch (err) {\n      logger.error('[AuthApiService] Session refresh failed', err, { context: MODULE });\n      throw err;\n    }\n  }\n\n  function clearTokenCache() {\n    _log('Clearing token cache');\n    csrfTokenCache = null;\n    csrfTokenExpiry = null;\n  }\n\n  return {\n    // CSRF management\n    getCSRFToken,\n    getCSRFTokenAsync,\n    fetchCSRFToken,\n\n    // Authentication operations\n    login,\n    logout,\n    register,\n    verifySession,\n    refreshSession,\n\n    // Generic auth request helper\n    authRequest,\n\n    // Cache management\n    clearTokenCache,\n\n    cleanup() {\n      _log('cleanup()');\n      clearTokenCache();\n    }\n  };\n}\n\nexport default createAuthApiService;"],"mappings":"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","ignoreList":[]}