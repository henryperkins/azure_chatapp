{"version":3,"names":["createAuthStateManager","eventService","logger","browserService","storageService","MODULE","Error","_log","msg","extra","debug","context","_logError","err","error","stack","authState","isAuthenticated","currentUser","lastVerification","sessionStartTime","SESSION_CHECK_INTERVAL","SESSION_WARNING_THRESHOLD","sessionCheckTimer","getAuthState","setAuthenticatedState","user","id","previousState","Date","now","userId","username","previouslyAuthenticated","startSessionMonitoring","broadcastAuthStateChange","setItem","JSON","stringify","lastLogin","setUnauthenticatedState","wasAuthenticated","previousUser","stopSessionMonitoring","removeItem","updateLastVerification","newState","eventData","authenticated","timestamp","emit","eventTimestamp","clearInterval","setInterval","timeSinceLastVerification","sessionAge","getCurrentUser","getCurrentUserId","getCurrentUsername","getSessionAge","getTimeSinceLastVerification","Infinity","shouldVerifySession","threshold","initializeFromStorage","storedUser","getItem","userData","parse","cleanup","_default","exports","default"],"sources":["authStateManager.js"],"sourcesContent":["/**\n * AuthStateManager - extracted state and event management (Phase-2)\n * ----------------------------------------------------------------\n * Handles authentication state management, event broadcasting,\n * and session management. Extracted from oversized auth.js.\n */\n\nexport function createAuthStateManager({\n  eventService,\n  logger,\n  browserService,\n  storageService\n} = {}) {\n  const MODULE = 'AuthStateManager';\n\n  if (!eventService || !logger || !browserService) {\n    throw new Error(`[${MODULE}] Required dependencies missing: eventService, logger, browserService`);\n  }\n\n  const _log = (msg, extra = {}) => logger?.debug?.(`[${MODULE}] ${msg}`, {\n    context: MODULE,\n    ...extra\n  });\n\n  const _logError = (msg, err, extra = {}) => {\n    logger?.error?.(`[${MODULE}] ${msg}`, err?.stack || err, {\n      context: MODULE,\n      ...extra\n    });\n  };\n\n  // Internal state\n  let authState = {\n    isAuthenticated: false,\n    currentUser: null,\n    lastVerification: null,\n    sessionStartTime: null\n  };\n\n  // Session management constants\n  const SESSION_CHECK_INTERVAL = 5 * 60 * 1000; // 5 minutes\n  const SESSION_WARNING_THRESHOLD = 10 * 60 * 1000; // 10 minutes before expiry\n  let sessionCheckTimer = null;\n\n  function getAuthState() {\n    return {\n      isAuthenticated: authState.isAuthenticated,\n      currentUser: authState.currentUser ? { ...authState.currentUser } : null,\n      lastVerification: authState.lastVerification,\n      sessionStartTime: authState.sessionStartTime\n    };\n  }\n\n  function setAuthenticatedState(user) {\n    if (!user || !user.id) {\n      _logError('setAuthenticatedState called with invalid user object', null, { user });\n      return;\n    }\n\n    const previousState = getAuthState();\n    \n    authState.isAuthenticated = true;\n    authState.currentUser = { ...user };\n    authState.lastVerification = Date.now();\n    \n    if (!authState.sessionStartTime) {\n      authState.sessionStartTime = Date.now();\n    }\n\n    _log('Authentication state updated', {\n      userId: user.id,\n      username: user.username,\n      previouslyAuthenticated: previousState.isAuthenticated\n    });\n\n    // Start session monitoring\n    startSessionMonitoring();\n\n    // Broadcast state change\n    broadcastAuthStateChange(previousState, getAuthState());\n\n    // Store user info if storage service available\n    if (storageService) {\n      try {\n        storageService.setItem('lastUser', JSON.stringify({\n          id: user.id,\n          username: user.username,\n          lastLogin: Date.now()\n        }));\n      } catch (err) {\n        _logError('Failed to store user info', err);\n      }\n    }\n  }\n\n  function setUnauthenticatedState() {\n    const previousState = getAuthState();\n    \n    authState.isAuthenticated = false;\n    authState.currentUser = null;\n    authState.lastVerification = null;\n    authState.sessionStartTime = null;\n\n    _log('Authentication state cleared', {\n      wasAuthenticated: previousState.isAuthenticated,\n      previousUser: previousState.currentUser?.username\n    });\n\n    // Stop session monitoring\n    stopSessionMonitoring();\n\n    // Broadcast state change\n    broadcastAuthStateChange(previousState, getAuthState());\n\n    // Clear stored user info if storage service available\n    if (storageService) {\n      try {\n        storageService.removeItem('lastUser');\n      } catch (err) {\n        _logError('Failed to clear stored user info', err);\n      }\n    }\n  }\n\n  function updateLastVerification() {\n    authState.lastVerification = Date.now();\n    _log('Last verification timestamp updated');\n  }\n\n  function broadcastAuthStateChange(previousState, newState) {\n    try {\n      const eventData = {\n        authenticated: newState.isAuthenticated,\n        user: newState.currentUser,\n        previouslyAuthenticated: previousState.isAuthenticated,\n        timestamp: Date.now()\n      };\n\n      // Emit on multiple event names for compatibility\n      eventService.emit('authStateChanged', eventData);\n      eventService.emit('auth:stateChanged', eventData);\n      \n      // Legacy event for backward compatibility\n      if (newState.isAuthenticated && !previousState.isAuthenticated) {\n        eventService.emit('user:loggedIn', eventData);\n      } else if (!newState.isAuthenticated && previousState.isAuthenticated) {\n        eventService.emit('user:loggedOut', eventData);\n      }\n\n      _log('Auth state change broadcasted', {\n        authenticated: newState.isAuthenticated,\n        userId: newState.currentUser?.id,\n        eventTimestamp: eventData.timestamp\n      });\n    } catch (err) {\n      _logError('Failed to broadcast auth state change', err);\n    }\n  }\n\n  function startSessionMonitoring() {\n    if (sessionCheckTimer) {\n      clearInterval(sessionCheckTimer);\n    }\n\n    sessionCheckTimer = setInterval(() => {\n      if (!authState.isAuthenticated) {\n        stopSessionMonitoring();\n        return;\n      }\n\n      const now = Date.now();\n      const timeSinceLastVerification = now - (authState.lastVerification || 0);\n      \n      // Emit session warning if approaching timeout\n      if (timeSinceLastVerification > SESSION_WARNING_THRESHOLD) {\n        eventService.emit('auth:sessionWarning', {\n          timeSinceLastVerification,\n          user: authState.currentUser\n        });\n      }\n\n      _log('Session monitoring check', {\n        timeSinceLastVerification,\n        sessionAge: now - (authState.sessionStartTime || 0)\n      });\n    }, SESSION_CHECK_INTERVAL);\n\n    _log('Session monitoring started');\n  }\n\n  function stopSessionMonitoring() {\n    if (sessionCheckTimer) {\n      clearInterval(sessionCheckTimer);\n      sessionCheckTimer = null;\n      _log('Session monitoring stopped');\n    }\n  }\n\n  function isAuthenticated() {\n    return authState.isAuthenticated;\n  }\n\n  function getCurrentUser() {\n    return authState.currentUser ? { ...authState.currentUser } : null;\n  }\n\n  function getCurrentUserId() {\n    return authState.currentUser?.id || null;\n  }\n\n  function getCurrentUsername() {\n    return authState.currentUser?.username || null;\n  }\n\n  function getSessionAge() {\n    if (!authState.sessionStartTime) return 0;\n    return Date.now() - authState.sessionStartTime;\n  }\n\n  function getTimeSinceLastVerification() {\n    if (!authState.lastVerification) return Infinity;\n    return Date.now() - authState.lastVerification;\n  }\n\n  function shouldVerifySession(threshold = 5 * 60 * 1000) { // 5 minutes default\n    if (!authState.isAuthenticated) return false;\n    return getTimeSinceLastVerification() > threshold;\n  }\n\n  // Initialize from stored data if available\n  function initializeFromStorage() {\n    if (!storageService) return;\n\n    try {\n      const storedUser = storageService.getItem('lastUser');\n      if (storedUser) {\n        const userData = JSON.parse(storedUser);\n        _log('Found stored user data', { username: userData.username });\n        // Don't automatically set as authenticated - will verify with server\n        return userData;\n      }\n    } catch (err) {\n      _logError('Failed to initialize from storage', err);\n    }\n    return null;\n  }\n\n  return {\n    // State queries\n    isAuthenticated,\n    getCurrentUser,\n    getCurrentUserId,\n    getCurrentUsername,\n    getAuthState,\n    \n    // Session info\n    getSessionAge,\n    getTimeSinceLastVerification,\n    shouldVerifySession,\n\n    // State management\n    setAuthenticatedState,\n    setUnauthenticatedState,\n    updateLastVerification,\n\n    // Session monitoring\n    startSessionMonitoring,\n    stopSessionMonitoring,\n\n    // Initialization\n    initializeFromStorage,\n\n    // Event broadcasting (for manual triggers)\n    broadcastAuthStateChange,\n\n    cleanup() {\n      _log('cleanup()');\n      stopSessionMonitoring();\n      setUnauthenticatedState();\n    }\n  };\n}\n\nexport default createAuthStateManager;"],"mappings":"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","ignoreList":[]}