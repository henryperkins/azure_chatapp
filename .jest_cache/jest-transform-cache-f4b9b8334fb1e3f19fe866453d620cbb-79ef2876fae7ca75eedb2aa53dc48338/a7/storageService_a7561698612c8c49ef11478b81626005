eb6e8eb303cd468ae5f3dec9057dc7a1
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createStorageService = createStorageService;
/**
 * storageService.js â€” DI-safe localStorage wrapper (from globalUtils).
 * Uses browserService for access.
 *
 * Usage:
 *   import { createStorageService } from './storageService.js';
 *   const storage = createStorageService({ browserService, APP_CONFIG });
 */

function createStorageService({
  browserService,
  APP_CONFIG,
  logger,
  DependencySystem
}) {
  if (!browserService) throw new Error('[storageService] browserService required');
  if (!logger) throw new Error('[storageService] logger required');
  function safe(fn, _fallback, ctx) {
    try {
      return fn();
    } catch (err) {
      logger.error(`[storageService] ${ctx} failed`, err, {
        context: `storageService:${ctx}`
      });
      throw new Error(`[storageService] ${ctx} failed and fallback is forbidden: ${err?.message || err}`);
    }
  }
  return {
    getItem: k => safe(() => browserService.getItem(k), null, "getItem"),
    setItem: (k, v) => safe(() => browserService.setItem(k, v), undefined, "setItem"),
    removeItem: k => safe(() => browserService.removeItem(k), undefined, "removeItem"),
    clear: () => safe(() => browserService.clear?.(), undefined, "clear"),
    key: n => safe(() => browserService.key?.(n), null, "key"),
    get length() {
      return safe(() => browserService.length ?? 0, 0, "length");
    },
    cleanup() {}
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjcmVhdGVTdG9yYWdlU2VydmljZSIsImJyb3dzZXJTZXJ2aWNlIiwiQVBQX0NPTkZJRyIsImxvZ2dlciIsIkRlcGVuZGVuY3lTeXN0ZW0iLCJFcnJvciIsInNhZmUiLCJmbiIsIl9mYWxsYmFjayIsImN0eCIsImVyciIsImVycm9yIiwiY29udGV4dCIsIm1lc3NhZ2UiLCJnZXRJdGVtIiwiayIsInNldEl0ZW0iLCJ2IiwidW5kZWZpbmVkIiwicmVtb3ZlSXRlbSIsImNsZWFyIiwia2V5IiwibiIsImxlbmd0aCIsImNsZWFudXAiXSwic291cmNlcyI6WyJzdG9yYWdlU2VydmljZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIHN0b3JhZ2VTZXJ2aWNlLmpzIOKAlCBESS1zYWZlIGxvY2FsU3RvcmFnZSB3cmFwcGVyIChmcm9tIGdsb2JhbFV0aWxzKS5cbiAqIFVzZXMgYnJvd3NlclNlcnZpY2UgZm9yIGFjY2Vzcy5cbiAqXG4gKiBVc2FnZTpcbiAqICAgaW1wb3J0IHsgY3JlYXRlU3RvcmFnZVNlcnZpY2UgfSBmcm9tICcuL3N0b3JhZ2VTZXJ2aWNlLmpzJztcbiAqICAgY29uc3Qgc3RvcmFnZSA9IGNyZWF0ZVN0b3JhZ2VTZXJ2aWNlKHsgYnJvd3NlclNlcnZpY2UsIEFQUF9DT05GSUcgfSk7XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVN0b3JhZ2VTZXJ2aWNlKHsgYnJvd3NlclNlcnZpY2UsIEFQUF9DT05GSUcsIGxvZ2dlciwgRGVwZW5kZW5jeVN5c3RlbSB9KSB7XG4gIGlmICghYnJvd3NlclNlcnZpY2UpIHRocm93IG5ldyBFcnJvcignW3N0b3JhZ2VTZXJ2aWNlXSBicm93c2VyU2VydmljZSByZXF1aXJlZCcpO1xuICBpZiAoIWxvZ2dlcikgdGhyb3cgbmV3IEVycm9yKCdbc3RvcmFnZVNlcnZpY2VdIGxvZ2dlciByZXF1aXJlZCcpO1xuICBmdW5jdGlvbiBzYWZlKGZuLCBfZmFsbGJhY2ssIGN0eCkge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gZm4oKTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIGxvZ2dlci5lcnJvcihgW3N0b3JhZ2VTZXJ2aWNlXSAke2N0eH0gZmFpbGVkYCwgZXJyLFxuICAgICAgICAgICAgICAgICAgIHsgY29udGV4dDogYHN0b3JhZ2VTZXJ2aWNlOiR7Y3R4fWAgfSk7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYFtzdG9yYWdlU2VydmljZV0gJHtjdHh9IGZhaWxlZCBhbmQgZmFsbGJhY2sgaXMgZm9yYmlkZGVuOiAke2Vycj8ubWVzc2FnZSB8fCBlcnJ9YCk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBnZXRJdGVtOiAoaykgPT4gc2FmZSgoKSA9PiBicm93c2VyU2VydmljZS5nZXRJdGVtKGspLCBudWxsLCBcImdldEl0ZW1cIiksXG4gICAgc2V0SXRlbTogKGssIHYpID0+IHNhZmUoKCkgPT4gYnJvd3NlclNlcnZpY2Uuc2V0SXRlbShrLCB2KSwgdW5kZWZpbmVkLCBcInNldEl0ZW1cIiksXG4gICAgcmVtb3ZlSXRlbTogKGspID0+IHNhZmUoKCkgPT4gYnJvd3NlclNlcnZpY2UucmVtb3ZlSXRlbShrKSwgdW5kZWZpbmVkLCBcInJlbW92ZUl0ZW1cIiksXG4gICAgY2xlYXI6ICgpID0+IHNhZmUoKCkgPT4gYnJvd3NlclNlcnZpY2UuY2xlYXI/LigpLCB1bmRlZmluZWQsIFwiY2xlYXJcIiksXG4gICAga2V5OiAobikgPT4gc2FmZSgoKSA9PiBicm93c2VyU2VydmljZS5rZXk/LihuKSwgbnVsbCwgXCJrZXlcIiksXG4gICAgZ2V0IGxlbmd0aCgpIHtcbiAgICAgIHJldHVybiBzYWZlKCgpID0+IGJyb3dzZXJTZXJ2aWNlLmxlbmd0aCA/PyAwLCAwLCBcImxlbmd0aFwiKTtcbiAgICB9LFxuICAgIGNsZWFudXAgKCkge31cbiAgfTtcbn1cbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFTyxTQUFTQSxvQkFBb0JBLENBQUM7RUFBRUMsY0FBYztFQUFFQyxVQUFVO0VBQUVDLE1BQU07RUFBRUM7QUFBaUIsQ0FBQyxFQUFFO0VBQzdGLElBQUksQ0FBQ0gsY0FBYyxFQUFFLE1BQU0sSUFBSUksS0FBSyxDQUFDLDBDQUEwQyxDQUFDO0VBQ2hGLElBQUksQ0FBQ0YsTUFBTSxFQUFFLE1BQU0sSUFBSUUsS0FBSyxDQUFDLGtDQUFrQyxDQUFDO0VBQ2hFLFNBQVNDLElBQUlBLENBQUNDLEVBQUUsRUFBRUMsU0FBUyxFQUFFQyxHQUFHLEVBQUU7SUFDaEMsSUFBSTtNQUNGLE9BQU9GLEVBQUUsQ0FBQyxDQUFDO0lBQ2IsQ0FBQyxDQUFDLE9BQU9HLEdBQUcsRUFBRTtNQUNaUCxNQUFNLENBQUNRLEtBQUssQ0FBQyxvQkFBb0JGLEdBQUcsU0FBUyxFQUFFQyxHQUFHLEVBQ3JDO1FBQUVFLE9BQU8sRUFBRSxrQkFBa0JILEdBQUc7TUFBRyxDQUFDLENBQUM7TUFDbEQsTUFBTSxJQUFJSixLQUFLLENBQUMsb0JBQW9CSSxHQUFHLHNDQUFzQ0MsR0FBRyxFQUFFRyxPQUFPLElBQUlILEdBQUcsRUFBRSxDQUFDO0lBQ3JHO0VBQ0Y7RUFFQSxPQUFPO0lBQ0xJLE9BQU8sRUFBR0MsQ0FBQyxJQUFLVCxJQUFJLENBQUMsTUFBTUwsY0FBYyxDQUFDYSxPQUFPLENBQUNDLENBQUMsQ0FBQyxFQUFFLElBQUksRUFBRSxTQUFTLENBQUM7SUFDdEVDLE9BQU8sRUFBRUEsQ0FBQ0QsQ0FBQyxFQUFFRSxDQUFDLEtBQUtYLElBQUksQ0FBQyxNQUFNTCxjQUFjLENBQUNlLE9BQU8sQ0FBQ0QsQ0FBQyxFQUFFRSxDQUFDLENBQUMsRUFBRUMsU0FBUyxFQUFFLFNBQVMsQ0FBQztJQUNqRkMsVUFBVSxFQUFHSixDQUFDLElBQUtULElBQUksQ0FBQyxNQUFNTCxjQUFjLENBQUNrQixVQUFVLENBQUNKLENBQUMsQ0FBQyxFQUFFRyxTQUFTLEVBQUUsWUFBWSxDQUFDO0lBQ3BGRSxLQUFLLEVBQUVBLENBQUEsS0FBTWQsSUFBSSxDQUFDLE1BQU1MLGNBQWMsQ0FBQ21CLEtBQUssR0FBRyxDQUFDLEVBQUVGLFNBQVMsRUFBRSxPQUFPLENBQUM7SUFDckVHLEdBQUcsRUFBR0MsQ0FBQyxJQUFLaEIsSUFBSSxDQUFDLE1BQU1MLGNBQWMsQ0FBQ29CLEdBQUcsR0FBR0MsQ0FBQyxDQUFDLEVBQUUsSUFBSSxFQUFFLEtBQUssQ0FBQztJQUM1RCxJQUFJQyxNQUFNQSxDQUFBLEVBQUc7TUFDWCxPQUFPakIsSUFBSSxDQUFDLE1BQU1MLGNBQWMsQ0FBQ3NCLE1BQU0sSUFBSSxDQUFDLEVBQUUsQ0FBQyxFQUFFLFFBQVEsQ0FBQztJQUM1RCxDQUFDO0lBQ0RDLE9BQU9BLENBQUEsRUFBSSxDQUFDO0VBQ2QsQ0FBQztBQUNIIiwiaWdub3JlTGlzdCI6W119