7ba4648183ed83de7289548931f925fc
"use strict";

var _appInitializer = require("../../static/js/init/appInitializer.js");
/**
 * Basic smoke test for createAppInitializer
 * ----------------------------------------------------------
 * Verifies that the bootstrap sequence resolves without
 * throwing given a minimal set of stubbed dependencies.
 * This is intended to detect regressions where new mandatory
 * DI parameters are added to appInitializer without updating
 * downstream boot scripts or tests.
 */

function createMockDependencySystem() {
  const modules = new Map();
  return {
    modules,
    register: (key, value) => modules.set(key, value),
    get: key => modules.get(key)
  };
}
function createStubBrowserService() {
  const win = {
    setTimeout: fn => fn && fn(),
    clearTimeout: () => {},
    EventTarget,
    performance: {
      now: () => 0
    },
    crypto: {
      randomUUID: () => '00000000-0000-4000-8000-000000000000'
    }
  };
  const doc = {
    readyState: 'complete',
    addEventListener: () => {},
    removeEventListener: () => {},
    getElementById: () => null,
    querySelector: () => null,
    createElement: () => ({
      style: {}
    }),
    body: {
      appendChild: () => {},
      removeChild: () => {}
    }
  };
  win.document = doc;
  return {
    getWindow: () => win,
    getDocument: () => doc,
    setTimeout: win.setTimeout,
    clearTimeout: win.clearTimeout
  };
}
function createNoopFactory() {
  return () => ({
    cleanup() {}
  });
}
test('appInitializer completes bootstrap without error', async () => {
  const DependencySystem = createMockDependencySystem();
  const appInit = (0, _appInitializer.createAppInitializer)({
    DependencySystem,
    browserService: createStubBrowserService(),
    createChatManager: createNoopFactory(),
    createApiEndpoints: () => ({
      endpoints: {},
      cleanup() {}
    }),
    MODAL_MAPPINGS: {},
    APP_CONFIG: {
      TIMEOUTS: {
        DOM_READY: 1000
      }
    }
  });
  await expect(appInit.initializeApp()).resolves.not.toThrow();
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfYXBwSW5pdGlhbGl6ZXIiLCJyZXF1aXJlIiwiY3JlYXRlTW9ja0RlcGVuZGVuY3lTeXN0ZW0iLCJtb2R1bGVzIiwiTWFwIiwicmVnaXN0ZXIiLCJrZXkiLCJ2YWx1ZSIsInNldCIsImdldCIsImNyZWF0ZVN0dWJCcm93c2VyU2VydmljZSIsIndpbiIsInNldFRpbWVvdXQiLCJmbiIsImNsZWFyVGltZW91dCIsIkV2ZW50VGFyZ2V0IiwicGVyZm9ybWFuY2UiLCJub3ciLCJjcnlwdG8iLCJyYW5kb21VVUlEIiwiZG9jIiwicmVhZHlTdGF0ZSIsImFkZEV2ZW50TGlzdGVuZXIiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiZ2V0RWxlbWVudEJ5SWQiLCJxdWVyeVNlbGVjdG9yIiwiY3JlYXRlRWxlbWVudCIsInN0eWxlIiwiYm9keSIsImFwcGVuZENoaWxkIiwicmVtb3ZlQ2hpbGQiLCJkb2N1bWVudCIsImdldFdpbmRvdyIsImdldERvY3VtZW50IiwiY3JlYXRlTm9vcEZhY3RvcnkiLCJjbGVhbnVwIiwidGVzdCIsIkRlcGVuZGVuY3lTeXN0ZW0iLCJhcHBJbml0IiwiY3JlYXRlQXBwSW5pdGlhbGl6ZXIiLCJicm93c2VyU2VydmljZSIsImNyZWF0ZUNoYXRNYW5hZ2VyIiwiY3JlYXRlQXBpRW5kcG9pbnRzIiwiZW5kcG9pbnRzIiwiTU9EQUxfTUFQUElOR1MiLCJBUFBfQ09ORklHIiwiVElNRU9VVFMiLCJET01fUkVBRFkiLCJleHBlY3QiLCJpbml0aWFsaXplQXBwIiwicmVzb2x2ZXMiLCJub3QiLCJ0b1Rocm93Il0sInNvdXJjZXMiOlsiYXBwaW5pdGlhbGl6ZXItYmFzaWMudGVzdC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEJhc2ljIHNtb2tlIHRlc3QgZm9yIGNyZWF0ZUFwcEluaXRpYWxpemVyXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBWZXJpZmllcyB0aGF0IHRoZSBib290c3RyYXAgc2VxdWVuY2UgcmVzb2x2ZXMgd2l0aG91dFxuICogdGhyb3dpbmcgZ2l2ZW4gYSBtaW5pbWFsIHNldCBvZiBzdHViYmVkIGRlcGVuZGVuY2llcy5cbiAqIFRoaXMgaXMgaW50ZW5kZWQgdG8gZGV0ZWN0IHJlZ3Jlc3Npb25zIHdoZXJlIG5ldyBtYW5kYXRvcnlcbiAqIERJIHBhcmFtZXRlcnMgYXJlIGFkZGVkIHRvIGFwcEluaXRpYWxpemVyIHdpdGhvdXQgdXBkYXRpbmdcbiAqIGRvd25zdHJlYW0gYm9vdCBzY3JpcHRzIG9yIHRlc3RzLlxuICovXG5cbmltcG9ydCB7IGNyZWF0ZUFwcEluaXRpYWxpemVyIH0gZnJvbSAnLi4vLi4vc3RhdGljL2pzL2luaXQvYXBwSW5pdGlhbGl6ZXIuanMnO1xuXG5mdW5jdGlvbiBjcmVhdGVNb2NrRGVwZW5kZW5jeVN5c3RlbSAoKSB7XG4gIGNvbnN0IG1vZHVsZXMgPSBuZXcgTWFwKCk7XG4gIHJldHVybiB7XG4gICAgbW9kdWxlcyxcbiAgICByZWdpc3RlcjogKGtleSwgdmFsdWUpID0+IG1vZHVsZXMuc2V0KGtleSwgdmFsdWUpLFxuICAgIGdldDogKGtleSkgPT4gbW9kdWxlcy5nZXQoa2V5KVxuICB9O1xufVxuXG5mdW5jdGlvbiBjcmVhdGVTdHViQnJvd3NlclNlcnZpY2UgKCkge1xuICBjb25zdCB3aW4gPSB7XG4gICAgc2V0VGltZW91dDogKGZuKSA9PiBmbiAmJiBmbigpLFxuICAgIGNsZWFyVGltZW91dDogKCkgPT4ge30sXG4gICAgRXZlbnRUYXJnZXQsXG4gICAgcGVyZm9ybWFuY2U6IHsgbm93OiAoKSA9PiAwIH0sXG4gICAgY3J5cHRvOiB7IHJhbmRvbVVVSUQ6ICgpID0+ICcwMDAwMDAwMC0wMDAwLTQwMDAtODAwMC0wMDAwMDAwMDAwMDAnIH1cbiAgfTtcbiAgY29uc3QgZG9jID0ge1xuICAgIHJlYWR5U3RhdGU6ICdjb21wbGV0ZScsXG4gICAgYWRkRXZlbnRMaXN0ZW5lcjogKCkgPT4ge30sXG4gICAgcmVtb3ZlRXZlbnRMaXN0ZW5lcjogKCkgPT4ge30sXG4gICAgZ2V0RWxlbWVudEJ5SWQ6ICgpID0+IG51bGwsXG4gICAgcXVlcnlTZWxlY3RvcjogKCkgPT4gbnVsbCxcbiAgICBjcmVhdGVFbGVtZW50OiAoKSA9PiAoeyBzdHlsZToge30gfSksXG4gICAgYm9keTogeyBhcHBlbmRDaGlsZDogKCkgPT4ge30sIHJlbW92ZUNoaWxkOiAoKSA9PiB7fSB9XG4gIH07XG4gIHdpbi5kb2N1bWVudCA9IGRvYztcblxuICByZXR1cm4ge1xuICAgIGdldFdpbmRvdzogKCkgPT4gd2luLFxuICAgIGdldERvY3VtZW50OiAoKSA9PiBkb2MsXG4gICAgc2V0VGltZW91dDogd2luLnNldFRpbWVvdXQsXG4gICAgY2xlYXJUaW1lb3V0OiB3aW4uY2xlYXJUaW1lb3V0XG4gIH07XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZU5vb3BGYWN0b3J5ICgpIHtcbiAgcmV0dXJuICgpID0+ICh7IGNsZWFudXAgKCkge30gfSk7XG59XG5cbnRlc3QoJ2FwcEluaXRpYWxpemVyIGNvbXBsZXRlcyBib290c3RyYXAgd2l0aG91dCBlcnJvcicsIGFzeW5jICgpID0+IHtcbiAgY29uc3QgRGVwZW5kZW5jeVN5c3RlbSA9IGNyZWF0ZU1vY2tEZXBlbmRlbmN5U3lzdGVtKCk7XG5cbiAgY29uc3QgYXBwSW5pdCA9IGNyZWF0ZUFwcEluaXRpYWxpemVyKHtcbiAgICBEZXBlbmRlbmN5U3lzdGVtLFxuICAgIGJyb3dzZXJTZXJ2aWNlOiBjcmVhdGVTdHViQnJvd3NlclNlcnZpY2UoKSxcbiAgICBjcmVhdGVDaGF0TWFuYWdlcjogY3JlYXRlTm9vcEZhY3RvcnkoKSxcbiAgICBjcmVhdGVBcGlFbmRwb2ludHM6ICgpID0+ICh7XG4gICAgICBlbmRwb2ludHM6IHt9LFxuICAgICAgY2xlYW51cCAoKSB7fVxuICAgIH0pLFxuICAgIE1PREFMX01BUFBJTkdTOiB7fSxcbiAgICBBUFBfQ09ORklHOiB7XG4gICAgICBUSU1FT1VUUzogeyBET01fUkVBRFk6IDEwMDAgfVxuICAgIH1cbiAgfSk7XG5cbiAgYXdhaXQgZXhwZWN0KGFwcEluaXQuaW5pdGlhbGl6ZUFwcCgpKS5yZXNvbHZlcy5ub3QudG9UaHJvdygpO1xufSk7XG4iXSwibWFwcGluZ3MiOiI7O0FBVUEsSUFBQUEsZUFBQSxHQUFBQyxPQUFBO0FBVkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUlBLFNBQVNDLDBCQUEwQkEsQ0FBQSxFQUFJO0VBQ3JDLE1BQU1DLE9BQU8sR0FBRyxJQUFJQyxHQUFHLENBQUMsQ0FBQztFQUN6QixPQUFPO0lBQ0xELE9BQU87SUFDUEUsUUFBUSxFQUFFQSxDQUFDQyxHQUFHLEVBQUVDLEtBQUssS0FBS0osT0FBTyxDQUFDSyxHQUFHLENBQUNGLEdBQUcsRUFBRUMsS0FBSyxDQUFDO0lBQ2pERSxHQUFHLEVBQUdILEdBQUcsSUFBS0gsT0FBTyxDQUFDTSxHQUFHLENBQUNILEdBQUc7RUFDL0IsQ0FBQztBQUNIO0FBRUEsU0FBU0ksd0JBQXdCQSxDQUFBLEVBQUk7RUFDbkMsTUFBTUMsR0FBRyxHQUFHO0lBQ1ZDLFVBQVUsRUFBR0MsRUFBRSxJQUFLQSxFQUFFLElBQUlBLEVBQUUsQ0FBQyxDQUFDO0lBQzlCQyxZQUFZLEVBQUVBLENBQUEsS0FBTSxDQUFDLENBQUM7SUFDdEJDLFdBQVc7SUFDWEMsV0FBVyxFQUFFO01BQUVDLEdBQUcsRUFBRUEsQ0FBQSxLQUFNO0lBQUUsQ0FBQztJQUM3QkMsTUFBTSxFQUFFO01BQUVDLFVBQVUsRUFBRUEsQ0FBQSxLQUFNO0lBQXVDO0VBQ3JFLENBQUM7RUFDRCxNQUFNQyxHQUFHLEdBQUc7SUFDVkMsVUFBVSxFQUFFLFVBQVU7SUFDdEJDLGdCQUFnQixFQUFFQSxDQUFBLEtBQU0sQ0FBQyxDQUFDO0lBQzFCQyxtQkFBbUIsRUFBRUEsQ0FBQSxLQUFNLENBQUMsQ0FBQztJQUM3QkMsY0FBYyxFQUFFQSxDQUFBLEtBQU0sSUFBSTtJQUMxQkMsYUFBYSxFQUFFQSxDQUFBLEtBQU0sSUFBSTtJQUN6QkMsYUFBYSxFQUFFQSxDQUFBLE1BQU87TUFBRUMsS0FBSyxFQUFFLENBQUM7SUFBRSxDQUFDLENBQUM7SUFDcENDLElBQUksRUFBRTtNQUFFQyxXQUFXLEVBQUVBLENBQUEsS0FBTSxDQUFDLENBQUM7TUFBRUMsV0FBVyxFQUFFQSxDQUFBLEtBQU0sQ0FBQztJQUFFO0VBQ3ZELENBQUM7RUFDRG5CLEdBQUcsQ0FBQ29CLFFBQVEsR0FBR1gsR0FBRztFQUVsQixPQUFPO0lBQ0xZLFNBQVMsRUFBRUEsQ0FBQSxLQUFNckIsR0FBRztJQUNwQnNCLFdBQVcsRUFBRUEsQ0FBQSxLQUFNYixHQUFHO0lBQ3RCUixVQUFVLEVBQUVELEdBQUcsQ0FBQ0MsVUFBVTtJQUMxQkUsWUFBWSxFQUFFSCxHQUFHLENBQUNHO0VBQ3BCLENBQUM7QUFDSDtBQUVBLFNBQVNvQixpQkFBaUJBLENBQUEsRUFBSTtFQUM1QixPQUFPLE9BQU87SUFBRUMsT0FBT0EsQ0FBQSxFQUFJLENBQUM7RUFBRSxDQUFDLENBQUM7QUFDbEM7QUFFQUMsSUFBSSxDQUFDLGtEQUFrRCxFQUFFLFlBQVk7RUFDbkUsTUFBTUMsZ0JBQWdCLEdBQUduQywwQkFBMEIsQ0FBQyxDQUFDO0VBRXJELE1BQU1vQyxPQUFPLEdBQUcsSUFBQUMsb0NBQW9CLEVBQUM7SUFDbkNGLGdCQUFnQjtJQUNoQkcsY0FBYyxFQUFFOUIsd0JBQXdCLENBQUMsQ0FBQztJQUMxQytCLGlCQUFpQixFQUFFUCxpQkFBaUIsQ0FBQyxDQUFDO0lBQ3RDUSxrQkFBa0IsRUFBRUEsQ0FBQSxNQUFPO01BQ3pCQyxTQUFTLEVBQUUsQ0FBQyxDQUFDO01BQ2JSLE9BQU9BLENBQUEsRUFBSSxDQUFDO0lBQ2QsQ0FBQyxDQUFDO0lBQ0ZTLGNBQWMsRUFBRSxDQUFDLENBQUM7SUFDbEJDLFVBQVUsRUFBRTtNQUNWQyxRQUFRLEVBQUU7UUFBRUMsU0FBUyxFQUFFO01BQUs7SUFDOUI7RUFDRixDQUFDLENBQUM7RUFFRixNQUFNQyxNQUFNLENBQUNWLE9BQU8sQ0FBQ1csYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDQyxRQUFRLENBQUNDLEdBQUcsQ0FBQ0MsT0FBTyxDQUFDLENBQUM7QUFDOUQsQ0FBQyxDQUFDIiwiaWdub3JlTGlzdCI6W119