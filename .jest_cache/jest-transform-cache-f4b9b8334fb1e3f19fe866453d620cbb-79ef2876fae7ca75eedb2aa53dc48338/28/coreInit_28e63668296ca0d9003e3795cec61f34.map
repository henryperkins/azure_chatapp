{"version":3,"names":["_modalManager","require","_projectManager","createCoreInit","deps","DependencySystem","logger","domAPI","browserService","eventHandlers","domReadinessService","sanitizer","createChatManager","injectedCreateChatManager","Error","_instances","Map","registerInstance","name","instance","set","modules","has","register","initializeCoreSystems","info","context","get","modalMgr","createModalManager","domPurify","errorReporter","eventService","initialize","err","error","projectMgr","createProjectManager","timer","createConversationManager","createMessageHandler","createChatUIController","chatMgr","conversationManager","apiRequest","apiEndpoints","projectContextService","authenticationService","tokenStatsManager","modelConfig","eventBus","messageHandler","chatUIController","catch","debug","cleanup","inst","entries","warn","cleanupListeners"],"sources":["coreInit.js"],"sourcesContent":["// ========================================\n// FILE: /initialization/phases/coreInit.js\n// ========================================\n/**\n * Core-system bootstrap phase\n * ----------------------------------------\n * The original monolithic `appInitializer.js` contained ~300 lines of logic\n * that instantiated and registered the application-wide managers such as\n * ModalManager, ProjectManager and (optionally) ChatManager.  During the\n * refactor these lines were removed and a temporary stub that threw an error\n * was left behind to remind maintainers that the extraction was pending.\n *\n * This file supplies a *minimal* but fully-functional implementation of that\n * logic so that the new initialization pipeline can complete without\n * blowing up.  The implementation purposefully focuses on wiring and DI – it\n * does **not** try to re-introduce all historical side-effects.  Any heavy\n * lifting remains the responsibility of the dedicated feature factories\n * (`createModalManager`, `createProjectManager`, `createChatManager`, …).\n *\n * Key goals:\n *   1. No thrown \"Not implemented\" error anymore ➜ boot sequence succeeds.\n *   2. Instantiate the core managers if the corresponding factory functions\n *      are available.\n *   3. Register the created instances with the DependencySystem using the\n *      canonical module names expected by downstream code.\n *   4. Provide a cleanup() that tears down event listeners of the created\n *      instances (best-effort – only if the instance exposes a cleanup\n *      method).\n */\n\n// External factories (resolved at *runtime* to avoid circular deps)\nimport { createModalManager }       from \"../../modalManager.js\";\nimport { createProjectManager }     from \"../../projectManager.js\";\n\n// Optional factories live outside the initialization tree and are therefore\n// injected via the argument object.  Falling back to dynamic import would\n// re-introduce the circular-dependency maze we just got rid of.\n\nexport function createCoreInit(deps = {}) {\n  const {\n    // Mandatory core services\n    DependencySystem,\n    logger,\n    domAPI,\n    browserService,\n    eventHandlers,\n    domReadinessService,\n    sanitizer,\n\n    // Injected factory helpers (may be undefined)\n    createChatManager : injectedCreateChatManager,\n  } = deps;\n\n  if (!DependencySystem) throw new Error('[coreInit] Missing DependencySystem');\n  if (!logger)          throw new Error('[coreInit] Missing logger');\n  if (!domAPI)          throw new Error('[coreInit] Missing domAPI');\n  if (!browserService)  throw new Error('[coreInit] Missing browserService');\n  if (!eventHandlers)   throw new Error('[coreInit] Missing eventHandlers');\n  if (!domReadinessService) throw new Error('[coreInit] Missing domReadinessService');\n  if (!sanitizer)       throw new Error('[coreInit] Missing sanitizer');\n\n  // Instance holders so that cleanup() can iterate over them later.\n  const _instances = new Map();\n\n  /* ------------------------------------------------------------------ */\n  /* Helpers                                                             */\n  /* ------------------------------------------------------------------ */\n\n  const registerInstance = (name, instance) => {\n    if (!instance) return;\n    _instances.set(name, instance);\n    if (!DependencySystem.modules.has(name)) {\n      DependencySystem.register(name, instance);\n    } else {\n      DependencySystem.modules.set(name, instance);\n    }\n  };\n\n  /* ------------------------------------------------------------------ */\n  /* Public API                                                          */\n  /* ------------------------------------------------------------------ */\n\n  async function initializeCoreSystems() {\n    logger.info('[coreInit] Initializing core systems…', { context: 'coreInit' });\n\n    /* ---------------- Modal Manager ---------------- */\n    try {\n      if (!DependencySystem.modules.get('modalManager')) {\n        const modalMgr = createModalManager({\n          eventHandlers,\n          domAPI,\n          browserService,\n          DependencySystem,\n          domPurify: sanitizer,\n          domReadinessService,\n          logger,\n          errorReporter : DependencySystem.modules.get('errorReporter'),\n          eventService  : DependencySystem.modules.get('eventService'),\n          sanitizer,\n        });\n\n        registerInstance('modalManager', modalMgr);\n\n        if (typeof modalMgr.initialize === 'function') {\n          await modalMgr.initialize();\n        }\n      }\n    } catch (err) {\n      logger.error('[coreInit] Failed to bootstrap ModalManager', err, { context: 'coreInit:modalManager' });\n      throw err;\n    }\n\n    /* ---------------- Project Manager ---------------- */\n    try {\n      if (!DependencySystem.modules.get('projectManager')) {\n        const projectMgr = createProjectManager({\n          DependencySystem,\n          domReadinessService,\n          logger,\n          timer         : browserService,\n          eventHandlers,\n          eventService  : DependencySystem.modules.get('eventService'),\n        });\n\n        registerInstance('projectManager', projectMgr);\n      }\n    } catch (err) {\n      logger.error('[coreInit] Failed to bootstrap ProjectManager', err, { context: 'coreInit:projectManager' });\n      throw err;\n    }\n\n    /* ---------------- Chat Manager (optional) ---------------- */\n    try {\n      if (typeof injectedCreateChatManager === 'function' && !DependencySystem.modules.get('chatManager')) {\n\n        // Resolve dependent factories from DI.  If any are missing we skip\n        // chat bootstrapping instead of throwing.\n        const createConversationManager = DependencySystem.modules.get('createConversationManager');\n        const createMessageHandler      = DependencySystem.modules.get('createMessageHandler');\n        const createChatUIController    = DependencySystem.modules.get('createChatUIController');\n\n        if (createConversationManager && createMessageHandler && createChatUIController) {\n\n          const chatMgr = injectedCreateChatManager({\n            DependencySystem,\n            logger,\n            eventHandlers,\n            domReadinessService,\n            domAPI,\n            eventService : DependencySystem.modules.get('eventService'),\n\n            conversationManager : createConversationManager({\n              DependencySystem,\n              logger,\n              apiRequest        : DependencySystem.modules.get('apiRequest'),\n              apiEndpoints      : DependencySystem.modules.get('apiEndpoints'),\n              projectContextService : DependencySystem.modules.get('projectContextService'),\n              authenticationService : DependencySystem.modules.get('authenticationService')\n                  || DependencySystem.modules.get('authStateManager'),\n              browserService,\n              tokenStatsManager : DependencySystem.modules.get('tokenStatsManagerProxy'),\n              modelConfig       : DependencySystem.modules.get('modelConfig'),\n              eventService      : DependencySystem.modules.get('eventService'),\n              eventBus          : DependencySystem.modules.get('AppBus'),\n            }),\n\n            messageHandler : createMessageHandler({\n              DependencySystem,\n              logger,\n              apiRequest   : DependencySystem.modules.get('apiRequest'),\n              apiEndpoints : DependencySystem.modules.get('apiEndpoints'),\n              browserService,\n            }),\n\n            chatUIController : createChatUIController({\n              DependencySystem,\n              domAPI,\n              browserService,\n              logger,\n              eventHandlers,\n              sanitizer,\n            }),\n          });\n\n          registerInstance('chatManager', chatMgr);\n\n          if (chatMgr.initialize) {\n            chatMgr.initialize().catch((err) => {\n              logger.error('[coreInit] chatManager.initialize() failed', err, { context: 'coreInit:chatManager' });\n            });\n          }\n        } else {\n          logger.debug('[coreInit] Skipping ChatManager bootstrap – dependent factories not available', { context: 'coreInit:chatManager' });\n        }\n      }\n    } catch (err) {\n      logger.error('[coreInit] Failed to bootstrap ChatManager', err, { context: 'coreInit:chatManager' });\n      // Do *not* re-throw – chat is optional.\n    }\n\n    logger.info('[coreInit] Core systems initialised', { context: 'coreInit' });\n    return true;\n  }\n\n  /* ------------------------------------------------------------------ */\n  /* Cleanup                                                             */\n  /* ------------------------------------------------------------------ */\n\n  function cleanup() {\n    for (const [name, inst] of _instances.entries()) {\n      try {\n        if (typeof inst.cleanup === 'function') {\n          inst.cleanup();\n        }\n      } catch (err) {\n        logger.warn(`[coreInit] ${name}.cleanup() threw`, err, { context: 'coreInit:cleanup' });\n      }\n    }\n\n    eventHandlers.cleanupListeners({ context: 'coreInit' });\n    logger.debug('[coreInit] Cleanup completed', { context: 'coreInit' });\n  }\n\n  return {\n    initializeCoreSystems,\n    cleanup,\n  };\n}\n"],"mappings":"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","ignoreList":[]}