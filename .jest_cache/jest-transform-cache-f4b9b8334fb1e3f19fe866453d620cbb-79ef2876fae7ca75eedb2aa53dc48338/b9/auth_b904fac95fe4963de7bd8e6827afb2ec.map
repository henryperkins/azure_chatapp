{"version":3,"names":["_authFormHandler","require","_authApiService","_authStateManager","createAuth","deps","Error","requiredDeps","dep","apiClient","eventHandlers","domAPI","sanitizer","modalManager","apiEndpoints","DependencySystem","logger","domReadinessService","safeHandler","browserService","eventService","storageService","appModule","APP_CONFIG","MODULE_CONTEXT","formHandler","createAuthFormHandler","apiService","createAuthApiService","stateManager","createAuthStateManager","AuthBus","getAuthBus","EventTarget","getAppState","state","warn","context","isAuthenticated","currentUser","isReady","updateAppState","authData","setAuthState","login","username","password","info","usernameValidation","validateUsername","passwordValidation","validatePassword","valid","message","response","value","setAuthenticatedState","user","userId","id","err","error","logout","setUnauthenticatedState","register","email","emailValidation","validateEmail","verifySession","debug","authenticated","updateLastVerification","refreshSession","success","getAccessToken","getItem","getAccessTokenAsync","Promise","resolve","bindLoginForm","formElement","bindFormSubmission","data","form","submitBtn","querySelector","setButtonLoading","hideError","clearForm","hide","showError","usernameInput","passwordInput","bindInputValidation","bindRegisterForm","emailInput","initialize","storedUser","initializeFromStorage","appReadyTimeout","TIMEOUTS","APP_READY_WAIT","waitForEvent","timeout","shouldVerifySession","setInterval","catch","getCurrentUser","getCurrentUserId","getCurrentUsername","getAuthState","getCSRFToken","getCSRFTokenAsync","force","init","args","u","p","e","getSessionAge","threshold","cleanup","cleanupListeners","_default","exports","default"],"sources":["auth.js"],"sourcesContent":["/**\n * auth.js - Refactored Authentication Module (Phase-2)\n * ---------------------------------------------------\n * Slim coordinator that orchestrates authentication using extracted modules:\n * - AuthFormHandler: Form validation and UI interactions\n * - AuthApiService: API calls and CSRF management\n * - AuthStateManager: State management and events\n * \n * Reduced from 1232 â†’ ~400 lines through separation of concerns.\n */\n\nimport { createAuthFormHandler } from './authFormHandler.js';\nimport { createAuthApiService } from './authApiService.js';\nimport { createAuthStateManager } from './authStateManager.js';\n\nexport function createAuth(deps) {\n  // === FACTORY GUARDRAIL: STRICT DI VALIDATION ===\n  if (!deps || typeof deps !== \"object\") {\n    throw new Error(\"[AuthModule] 'deps' DI object is required as argument to createAuth\");\n  }\n  \n  const requiredDeps = [\n    'apiClient', 'logger', 'domReadinessService', 'eventHandlers',\n    'domAPI', 'sanitizer', 'apiEndpoints', 'safeHandler', 'browserService',\n    'eventService', 'appModule', 'APP_CONFIG'\n  ];\n  \n  for (const dep of requiredDeps) {\n    if (!deps[dep]) {\n      throw new Error(`[AuthModule] DI param '${dep}' is required.`);\n    }\n  }\n\n  const {\n    apiClient, eventHandlers, domAPI, sanitizer, modalManager,\n    apiEndpoints, DependencySystem, logger, domReadinessService,\n    safeHandler, browserService, eventService, storageService,\n    appModule,\n    APP_CONFIG\n  } = deps;\n\n  const MODULE_CONTEXT = 'AuthModule';\n\n  // === EXTRACTED MODULE INSTANCES ===\n  const formHandler = createAuthFormHandler({\n    domAPI, sanitizer, eventHandlers, logger, safeHandler\n  });\n\n  const apiService = createAuthApiService({\n    apiClient, apiEndpoints, logger, browserService\n  });\n\n  const stateManager = createAuthStateManager({\n    eventService,\n    logger,\n    browserService,\n    storageService\n  });\n\n  // === LEGACY EVENT BUS SUPPORT ===\n  const AuthBus = eventService.getAuthBus ? eventService.getAuthBus() : new EventTarget();\n\n  // === APP STATE INTEGRATION ===\n  function getAppState() {\n    if (!appModule?.state) {\n      logger.warn('[AuthModule] appModule.state not available. Using fallback empty state.', {\n        context: MODULE_CONTEXT\n      });\n      return { isAuthenticated: false, currentUser: null, isReady: false };\n    }\n    return appModule.state;\n  }\n\n  function updateAppState(authData) {\n    if (typeof appModule?.setAuthState === 'function') {\n      appModule.setAuthState(authData);\n    }\n  }\n\n  // === CORE AUTHENTICATION METHODS ===\n  async function login(username, password) {\n    logger.info('[AuthModule] Login attempt', { \n      username, \n      context: MODULE_CONTEXT + ':login' \n    });\n\n    try {\n      // Validate inputs using form handler\n      const usernameValidation = formHandler.validateUsername(username);\n      const passwordValidation = formHandler.validatePassword(password);\n\n      if (!usernameValidation.valid) {\n        throw new Error(usernameValidation.message);\n      }\n      if (!passwordValidation.valid) {\n        throw new Error(passwordValidation.message);\n      }\n\n      // Perform login via API service\n      const response = await apiService.login(usernameValidation.value, passwordValidation.value);\n\n      // Update state managers\n      stateManager.setAuthenticatedState(response.user);\n      updateAppState({\n        isAuthenticated: true,\n        currentUser: response.user\n      });\n\n      logger.info('[AuthModule] Login successful', { \n        userId: response.user.id,\n        username: response.user.username,\n        context: MODULE_CONTEXT + ':login' \n      });\n\n      return response;\n    } catch (err) {\n      logger.error('[AuthModule] Login failed', err, { \n        username, \n        context: MODULE_CONTEXT + ':login' \n      });\n      throw err;\n    }\n  }\n\n  async function logout() {\n    logger.info('[AuthModule] Logout attempt', { context: MODULE_CONTEXT + ':logout' });\n\n    try {\n      // Perform logout via API service\n      await apiService.logout();\n\n      // Update state managers\n      stateManager.setUnauthenticatedState();\n      updateAppState({\n        isAuthenticated: false,\n        currentUser: null\n      });\n\n      logger.info('[AuthModule] Logout successful', { context: MODULE_CONTEXT + ':logout' });\n    } catch (err) {\n      logger.error('[AuthModule] Logout failed', err, { context: MODULE_CONTEXT + ':logout' });\n      // Update state even if API call failed (cleanup local state)\n      stateManager.setUnauthenticatedState();\n      updateAppState({\n        isAuthenticated: false,\n        currentUser: null\n      });\n      throw err;\n    }\n  }\n\n  async function register(username, email, password) {\n    logger.info('[AuthModule] Registration attempt', { \n      username, email, \n      context: MODULE_CONTEXT + ':register' \n    });\n\n    try {\n      // Validate inputs using form handler\n      const usernameValidation = formHandler.validateUsername(username);\n      const emailValidation = formHandler.validateEmail(email);\n      const passwordValidation = formHandler.validatePassword(password);\n\n      if (!usernameValidation.valid) {\n        throw new Error(usernameValidation.message);\n      }\n      if (!emailValidation.valid) {\n        throw new Error(emailValidation.message);\n      }\n      if (!passwordValidation.valid) {\n        throw new Error(passwordValidation.message);\n      }\n\n      // Perform registration via API service\n      const response = await apiService.register(\n        usernameValidation.value, \n        emailValidation.value, \n        passwordValidation.value\n      );\n\n      logger.info('[AuthModule] Registration successful', { \n        username, email,\n        context: MODULE_CONTEXT + ':register' \n      });\n\n      return response;\n    } catch (err) {\n      logger.error('[AuthModule] Registration failed', err, { \n        username, email,\n        context: MODULE_CONTEXT + ':register' \n      });\n      throw err;\n    }\n  }\n\n  async function verifySession() {\n    logger.debug('[AuthModule] Verifying session', { context: MODULE_CONTEXT + ':verify' });\n\n    try {\n      const response = await apiService.verifySession();\n\n      if (response.authenticated && response.user) {\n        // Update state managers\n        stateManager.setAuthenticatedState(response.user);\n        stateManager.updateLastVerification();\n        updateAppState({\n          isAuthenticated: true,\n          currentUser: response.user\n        });\n\n        logger.debug('[AuthModule] Session verification successful', { \n          userId: response.user.id,\n          context: MODULE_CONTEXT + ':verify' \n        });\n      } else {\n        // Update to unauthenticated state\n        stateManager.setUnauthenticatedState();\n        updateAppState({\n          isAuthenticated: false,\n          currentUser: null\n        });\n\n        logger.debug('[AuthModule] Session verification failed - not authenticated', { \n          context: MODULE_CONTEXT + ':verify' \n        });\n      }\n\n      return response;\n    } catch (err) {\n      logger.error('[AuthModule] Session verification error', err, { \n        context: MODULE_CONTEXT + ':verify' \n      });\n      \n      // Set unauthenticated state on error\n      stateManager.setUnauthenticatedState();\n      updateAppState({\n        isAuthenticated: false,\n        currentUser: null\n      });\n\n      return { authenticated: false, user: null };\n    }\n  }\n\n  async function refreshSession() {\n    logger.info('[AuthModule] Refreshing session', { context: MODULE_CONTEXT + ':refresh' });\n\n    try {\n      const response = await apiService.refreshSession();\n\n      if (response.success && response.user) {\n        stateManager.setAuthenticatedState(response.user);\n        stateManager.updateLastVerification();\n        updateAppState({\n          isAuthenticated: true,\n          currentUser: response.user\n        });\n\n        logger.info('[AuthModule] Session refresh successful', { \n          userId: response.user.id,\n          context: MODULE_CONTEXT + ':refresh' \n        });\n      }\n\n      return response;\n    } catch (err) {\n      logger.error('[AuthModule] Session refresh failed', err, { \n        context: MODULE_CONTEXT + ':refresh' \n      });\n      throw err;\n    }\n  }\n\n  // === ACCESS TOKEN HELPERS (legacy compatibility) ===\n  function getAccessToken() {\n    try {\n      if (storageService && typeof storageService.getItem === 'function') {\n        return storageService.getItem('access_token');\n      }\n      return null;\n    } catch (err) {\n      logger.error('[AuthModule] getAccessToken failed', err,\n        { context: MODULE_CONTEXT + ':getAccessToken' });\n      return null;\n    }\n  }\n\n  function getAccessTokenAsync() {\n    return Promise.resolve(getAccessToken());\n  }\n\n  // === FORM INTEGRATION ===\n  function bindLoginForm(formElement) {\n    if (!formElement) {\n      logger.warn('[AuthModule] bindLoginForm called with null form element',\n                  { context: MODULE_CONTEXT + ':bindLoginForm' });\n      return;\n    }\n\n    formHandler.bindFormSubmission(formElement, async (data, form) => {\n      const submitBtn = form.querySelector('button[type=\"submit\"]');\n      \n      try {\n        formHandler.setButtonLoading(submitBtn, true, 'Signing in...');\n        formHandler.hideError(form);\n\n        await login(data.username, data.password);\n        \n        // Clear form on success\n        formHandler.clearForm(form);\n        \n        // Close modal if it exists\n        if (modalManager?.hide) {\n          modalManager.hide();\n        }\n        \n      } catch (err) {\n        logger.error('[AuthModule] Login form submission failed', err,\n          { context: MODULE_CONTEXT + ':LoginForm' });\n        formHandler.showError(form, err.message || 'Login failed. Please try again.');\n      } finally {\n        formHandler.setButtonLoading(submitBtn, false);\n      }\n    }, { context: MODULE_CONTEXT + ':LoginForm' });\n\n    // Bind input validation\n    const usernameInput = formElement.querySelector('input[name=\"username\"]');\n    const passwordInput = formElement.querySelector('input[name=\"password\"]');\n    \n    if (usernameInput) {\n      formHandler.bindInputValidation(usernameInput, formHandler.validateUsername, {\n        context: MODULE_CONTEXT + ':LoginForm'\n      });\n    }\n    \n    if (passwordInput) {\n      formHandler.bindInputValidation(passwordInput, formHandler.validatePassword, {\n        context: MODULE_CONTEXT + ':LoginForm'\n      });\n    }\n  }\n\n  function bindRegisterForm(formElement) {\n    if (!formElement) {\n      logger.warn('[AuthModule] bindRegisterForm called with null form element',\n                  { context: MODULE_CONTEXT + ':bindRegisterForm' });\n      return;\n    }\n\n    formHandler.bindFormSubmission(formElement, async (data, form) => {\n      const submitBtn = form.querySelector('button[type=\"submit\"]');\n      \n      try {\n        formHandler.setButtonLoading(submitBtn, true, 'Creating account...');\n        formHandler.hideError(form);\n\n        await register(data.username, data.email, data.password);\n        \n        // Clear form on success\n        formHandler.clearForm(form);\n        \n        // Show success message\n        formHandler.showError(form, 'Account created successfully! You can now sign in.');\n        \n      } catch (err) {\n        logger.error('[AuthModule] Registration form submission failed', err,\n          { context: MODULE_CONTEXT + ':RegisterForm' });\n        formHandler.showError(form, err.message || 'Registration failed. Please try again.');\n      } finally {\n        formHandler.setButtonLoading(submitBtn, false);\n      }\n    }, { context: MODULE_CONTEXT + ':RegisterForm' });\n\n    // Bind input validation\n    const usernameInput = formElement.querySelector('input[name=\"username\"]');\n    const emailInput = formElement.querySelector('input[name=\"email\"]');\n    const passwordInput = formElement.querySelector('input[name=\"password\"]');\n    \n    if (usernameInput) {\n      formHandler.bindInputValidation(usernameInput, formHandler.validateUsername, {\n        context: MODULE_CONTEXT + ':RegisterForm'\n      });\n    }\n    \n    if (emailInput) {\n      formHandler.bindInputValidation(emailInput, formHandler.validateEmail, {\n        context: MODULE_CONTEXT + ':RegisterForm'\n      });\n    }\n    \n    if (passwordInput) {\n      formHandler.bindInputValidation(passwordInput, formHandler.validatePassword, {\n        context: MODULE_CONTEXT + ':RegisterForm'\n      });\n    }\n  }\n\n  // === INITIALIZATION ===\n  async function initialize() {\n    logger.info('[AuthModule] Initializing', { context: MODULE_CONTEXT + ':initialize' });\n\n    try {\n      // Initialize from stored data\n      const storedUser = stateManager.initializeFromStorage();\n      if (storedUser) {\n        logger.debug('[AuthModule] Found stored user data, will verify session', {\n          username: storedUser.username,\n          context : MODULE_CONTEXT + ':initialize'\n        });\n      }\n\n      // Wait for global \"app:ready\" event with extended timeout. Use configurable\n      // APP_READY_WAIT so slower devices/network conditions do not cause a\n      // bootstrap dead-letter. Falls back to 30 s if the config key is missing.\n      const appReadyTimeout = APP_CONFIG?.TIMEOUTS?.APP_READY_WAIT ?? 30000;\n      await domReadinessService.waitForEvent('app:ready', { timeout: appReadyTimeout, context: MODULE_CONTEXT + ':initialize' });\n\n      // Verify current session\n      await verifySession();\n\n      // Set up periodic session verification\n      if (stateManager.isAuthenticated() && stateManager.shouldVerifySession(60000)) {\n        // Verify every minute if no recent verification\n        setInterval(() => {\n          if (stateManager.shouldVerifySession()) {\n            verifySession().catch(err => {\n              logger.warn('[AuthModule] Periodic session verification failed', err,\n                          { context: MODULE_CONTEXT + ':periodicVerify' });\n            });\n          }\n        }, 60000);\n      }\n\n      logger.info('[AuthModule] Initialization complete', { \n        authenticated: stateManager.isAuthenticated(),\n        context: MODULE_CONTEXT + ':initialize' \n      });\n\n    } catch (err) {\n      logger.error('[AuthModule] Initialization failed', err, { \n        context: MODULE_CONTEXT + ':initialize' \n      });\n      throw err;\n    }\n  }\n\n  // === PUBLIC API ===\n  return {\n    // Authentication methods\n    login,\n    logout,\n    register,\n    verifySession,\n    refreshSession,\n\n    // State queries (delegate to state manager)\n    isAuthenticated: () => stateManager.isAuthenticated(),\n    getCurrentUser: () => stateManager.getCurrentUser(),\n    getCurrentUserId: () => stateManager.getCurrentUserId(),\n    getCurrentUsername: () => stateManager.getCurrentUsername(),\n    getAuthState: () => stateManager.getAuthState(),\n\n    // Form binding\n    bindLoginForm,\n    bindRegisterForm,\n\n    // CSRF management (delegate to API service)\n    getCSRFToken: () => apiService.getCSRFToken(),\n    getCSRFTokenAsync: (force) => apiService.getCSRFTokenAsync(force),\n\n    // Access token helpers (legacy)\n    getAccessToken,\n    getAccessTokenAsync,\n\n    // Initialization\n    initialize,\n    // Alias for backward-compatibility with appInitializer expectations\n    init: (...args) => initialize(...args),\n\n    // Legacy compatibility\n    AuthBus, // For backward compatibility\n    getAppState, // For legacy access patterns\n\n    // Utility methods (delegate to form handler)\n    validateUsername: (u) => formHandler.validateUsername(u),\n    validatePassword: (p) => formHandler.validatePassword(p),\n    validateEmail: (e) => formHandler.validateEmail(e),\n\n    // Session management\n    getSessionAge: () => stateManager.getSessionAge(),\n    shouldVerifySession: (threshold) => stateManager.shouldVerifySession(threshold),\n\n    cleanup() {\n      logger.debug('[AuthModule] cleanup()', { context: MODULE_CONTEXT });\n      \n      // Cleanup extracted modules\n      formHandler.cleanup();\n      apiService.cleanup();\n      stateManager.cleanup();\n      \n      // Cleanup event listeners\n      eventHandlers.cleanupListeners({ context: MODULE_CONTEXT });\n    }\n  };\n}\n\nexport default createAuth;\n\n// Provide legacy alias for DI registration compatibility\nexport { createAuth as createAuthModule };\n"],"mappings":"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","ignoreList":[]}