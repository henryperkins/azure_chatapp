b43778ea19f8e3fe5e2f9b27f7744838
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createBootstrapCore = createBootstrapCore;
var _domAPI = require("../../utils/domAPI.js");
var _eventHandler = require("../../eventHandler.js");
var _safeHandler = require("../../safeHandler.js");
var _domReadinessService = require("../../utils/domReadinessService.js");
var _logger = require("../../logger.js");
var _polyfillCustomEvent = require("../../utils/polyfillCustomEvent.js");
var _eventService = require("../../services/eventService.js");
var _uiStateService = require("../../uiStateService.js");
var _session = require("../../utils/session.js");
var _tokenStatsManagerProxy = require("../../tokenStatsManagerProxy.js");
var _authFormHandler = require("../../authFormHandler.js");
var _authApiService = require("../../authApiService.js");
var _authStateManager = require("../../authStateManager.js");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (const t in e) "default" !== t && {}.hasOwnProperty.call(e, t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, t)) && (i.get || i.set) ? o(f, t, i) : f[t] = e[t]); return f; })(e, t); } // ========================================
// FILE: /initialization/bootstrap/bootstrapCore.js
// ========================================
/**
 * Core Bootstrap Logic
 * Handles circular dependency resolution and early service setup
 * Extracted from initialDISetup()
 */ // Statically import modules that were previously loaded with dynamic `import()`.
function createBootstrapCore(opts) {
  const {
    DependencySystem,
    browserService,
    APP_CONFIG
  } = opts;

  /**
   * Bootstrap core services with circular dependency resolution
   */
  function initializeCoreServices() {
    // 1. Attach browserService to session for backward-compatibility
    (0, _session.setBrowserService)(browserService);

    // 2. Ensure DOMPurify (sanitizer) is available.
    // If it does not exist yet, attempt to lazily create it using the
    // injected `createDOMPurifyGlobal` factory (added to opts by
    // app.js).  This preserves the original safety check while avoiding
    // a hard-failure during early bootstrap ordering.

    let sanitizer = browserService?.getWindow?.()?.DOMPurify;
    if (!sanitizer) {
      const {
        createDOMPurifyGlobal
      } = opts;
      if (typeof createDOMPurifyGlobal === 'function') {
        try {
          createDOMPurifyGlobal({
            browserService
          });
          sanitizer = browserService?.getWindow?.()?.DOMPurify;
        } catch (err) {
          /* eslint-disable no-empty */
        }
      }
    }
    if (!sanitizer) {
      throw new Error('[appInitializer] DOMPurify not found â€” cannot proceed (security requirement).');
    }

    // 3. Create domAPI BEFORE logger/eventHandlers
    const domAPI = (0, _domAPI.createDomAPI)({
      documentObject: browserService.getDocument(),
      windowObject: browserService.getWindow(),
      debug: APP_CONFIG?.DEBUG === true,
      sanitizer
    });

    // 4. Bootstrap logger with stub pattern for circular dependency

    // Bootstrap minimal safeHandler stub for pre-logger DI
    function stubSafeHandler(fn, _description) {
      if (typeof fn !== 'function') return () => {};
      return function (...args) {
        try {
          return fn.apply(this, args);
        } catch {/* intentionally ignored */}
      };
    }
    let logger;

    // Create eventHandlers with stub logger
    const eventHandlers = (0, _eventHandler.createEventHandlers)({
      DependencySystem,
      domAPI,
      browserService,
      APP_CONFIG,
      safeHandler: stubSafeHandler,
      sanitizer,
      errorReporter: {
        report: (...args) => logger ? logger.error('[errorReporter]', ...args) : undefined
      },
      logger: {
        debug: () => {},
        info: () => {},
        warn: () => {},
        error: () => {},
        log: () => {}
      }
    });

    // Create real logger
    logger = (0, _logger.createLogger)({
      context: 'App',
      debug: APP_CONFIG?.DEBUG === true,
      minLevel: APP_CONFIG?.LOGGING?.MIN_LEVEL || 'info',
      consoleEnabled: APP_CONFIG?.LOGGING?.CONSOLE_ENABLED !== false,
      sessionIdProvider: _session.getSessionId,
      domAPI,
      browserService,
      eventHandlers
    });

    // Create custom event polyfill
    const {
      cleanup: customEventPolyfillCleanup
    } = (0, _polyfillCustomEvent.createCustomEventPolyfill)({
      browserService,
      logger
    });
    DependencySystem.register('customEventPolyfill', {
      cleanup: customEventPolyfillCleanup
    });

    // Wire logger into eventHandlers
    if (typeof eventHandlers.setLogger === 'function') {
      eventHandlers.setLogger(logger);
    }

    // Create error reporter
    const errorReporter = {
      report(error, ctx = {}) {
        if (logger) {
          logger.error('[errorReporter] reported', error, {
            context: 'errorReporter',
            ...ctx
          });
        } else if (typeof console !== 'undefined') {
          console.error('[errorReporter] reported', error, ctx);
        }
      }
    };

    // Wire logger into domAPI
    if (typeof domAPI.setLogger === 'function') {
      domAPI.setLogger(logger);
    }

    // Create real safeHandler with logger
    const {
      safeHandler
    } = (0, _safeHandler.createSafeHandler)({
      logger
    });

    // Upgrade eventHandlers with real safeHandler
    if (typeof eventHandlers.setSafeHandler === 'function') {
      eventHandlers.setSafeHandler(safeHandler);
    }

    // Register core objects into DependencySystem
    DependencySystem.register('browserService', browserService);
    DependencySystem.register('logger', logger);
    DependencySystem.register('sanitizer', sanitizer);
    DependencySystem.register('domPurify', sanitizer); // legacy alias
    DependencySystem.register('safeHandler', safeHandler);
    DependencySystem.register('createChatManager', opts.createChatManager);
    DependencySystem.register('domAPI', domAPI);
    DependencySystem.register('eventHandlers', eventHandlers);
    DependencySystem.register('errorReporter', errorReporter);

    // Setup domReadinessService
    const domReadinessService = (0, _domReadinessService.createDomReadinessService)({
      DependencySystem,
      domAPI,
      browserService,
      eventHandlers,
      APP_CONFIG,
      logger
    });
    DependencySystem.register('domReadinessService', domReadinessService);
    eventHandlers.setDomReadinessService(domReadinessService);

    // Create event bus and services
    const AppBus = new EventTarget();
    DependencySystem.register('AppBus', AppBus);
    const eventService = (0, _eventService.createEventService)({
      DependencySystem,
      logger,
      eventHandlers,
      existingBus: AppBus
    });
    DependencySystem.register('eventService', eventService);

    // Legacy aliases
    if (!DependencySystem.modules.get('eventBus')) {
      DependencySystem.register('eventBus', AppBus);
    }
    if (!DependencySystem.modules.get('AuthBus')) {
      DependencySystem.register('AuthBus', AppBus);
    }

    // UI utilities
    const uiUtils = {
      formatBytes: opts.globalFormatBytes,
      formatDate: opts.globalFormatDate,
      fileIcon: opts.globalFileIcon
    };
    const globalUtils = {
      shouldSkipDedup: opts.shouldSkipDedup,
      stableStringify: opts.stableStringify,
      normaliseUrl: browserService.normaliseUrl || null,
      isAbsoluteUrl: opts.isAbsoluteUrl,
      isValidProjectId: opts.isValidProjectId
    };

    // Register token stats proxy
    const tokenStatsProxy = (0, _tokenStatsManagerProxy.createTokenStatsManagerProxy)({
      DependencySystem,
      logger
    });
    DependencySystem.register('tokenStatsManagerProxy', tokenStatsProxy);

    // UI State Service
    const uiStateService = (0, _uiStateService.createUIStateService)({
      logger
    });
    DependencySystem.register('uiStateService', uiStateService);

    // Register auth component factories
    const authFormHandler = (0, _authFormHandler.createAuthFormHandler)({
      domAPI,
      sanitizer,
      eventHandlers,
      logger,
      safeHandler
    });
    DependencySystem.register('authFormHandler', authFormHandler);

    // AuthApiService requires a functional apiClient and apiEndpoints.
    // These are only available after serviceInit's basic & advanced
    // registrations.  Therefore we register *a factory wrapper* that can
    // lazily create the real service on first access, once the
    // dependencies exist.  This prevents an early boot failure while
    // keeping the module name reserved in the DI container.

    function _tryCreateAuthApiService() {
      let instance = DependencySystem.modules.get('__authApiServiceReal');
      if (instance) return instance;
      const apiClient = DependencySystem.modules.get('apiRequest') || DependencySystem.modules.get('apiClient');
      const apiEndpoints = DependencySystem.modules.get('apiEndpoints') || opts.apiEndpoints;
      if (!apiClient || !apiEndpoints) {
        return null; // dependencies not ready yet
      }
      instance = (0, _authApiService.createAuthApiService)({
        apiClient,
        apiEndpoints,
        logger,
        browserService
      });
      DependencySystem.register('__authApiServiceReal', instance);
      return instance;
    }
    const authApiServiceProxy = new Proxy({}, {
      get(_target, prop) {
        const inst = _tryCreateAuthApiService();
        if (inst) {
          const value = inst[prop];
          return typeof value === 'function' ? value.bind(inst) : value;
        }
        // Not ready yet â€“ return noop to avoid hard crash
        if (prop === 'toString' || prop === Symbol.toPrimitive) {
          return () => '[authApiServiceProxy:unready]';
        }
        return () => {
          throw new Error('[authApiServiceProxy] AuthApiService not ready yet');
        };
      },
      set(_target, prop, value) {
        const inst = _tryCreateAuthApiService();
        if (inst) {
          inst[prop] = value;
        }
        return true;
      }
    });
    DependencySystem.register('authApiService', authApiServiceProxy);
    const authStateManager = (0, _authStateManager.createAuthStateManager)({
      eventService,
      logger,
      browserService,
      storageService: null // will be set later
    });
    DependencySystem.register('authStateManager', authStateManager);

    // Return all created services
    // Start background factory registration (non-blocking)
    try {
      // Intentionally not awaited â€“ side-effects only.
      registerFactories();
    } catch (err) {
      logger.warn('[bootstrapCore] registerFactories() failed', err, {
        context: 'bootstrapCore:registerFactories'
      });
    }
    return {
      logger,
      eventHandlers,
      domAPI,
      safeHandler,
      sanitizer,
      domReadinessService,
      uiUtils,
      globalUtils,
      getSessionId: _session.getSessionId,
      eventService,
      errorReporter
    };
  }

  /**
   * Register factory functions in DI container
   */
  function registerFactories() {
    const factoriesToRegister = ['KBManagerFactory', 'KBSearchHandlerFactory', 'PollingServiceFactory', 'chatUIEnhancementsFactory',
    // Phase-2 factories
    'createChatUIController', 'createConversationManager', 'createMessageHandler', 'createProjectDetailsRenderer', 'createProjectDataCoordinator', 'createProjectEventHandlers'];

    // Import and register KB factories
    Promise.resolve().then(() => _interopRequireWildcard(require("../../knowledgeBaseManager.js"))).then(m => {
      if (!DependencySystem.modules.get('KBManagerFactory')) {
        DependencySystem.register('KBManagerFactory', m.createKnowledgeBaseManager);
      }
    });
    Promise.resolve().then(() => _interopRequireWildcard(require("../../knowledgeBaseSearchHandler.js"))).then(m => {
      if (!DependencySystem.modules.get('KBSearchHandlerFactory')) {
        DependencySystem.register('KBSearchHandlerFactory', m.createKnowledgeBaseSearchHandler);
      }
    });
    Promise.resolve().then(() => _interopRequireWildcard(require("../../pollingService.js"))).then(m => {
      if (!DependencySystem.modules.get('PollingServiceFactory')) {
        DependencySystem.register('PollingServiceFactory', m.createPollingService);
      }
    });
    Promise.resolve().then(() => _interopRequireWildcard(require("../../chatUIEnhancements.js"))).then(m => {
      if (!DependencySystem.modules.get('chatUIEnhancementsFactory')) {
        DependencySystem.register('chatUIEnhancementsFactory', m.createChatUIEnhancements);
      }
    });
  }
  return {
    initializeCoreServices,
    registerFactories
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,